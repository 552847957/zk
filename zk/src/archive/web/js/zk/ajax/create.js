/* create.js

{{IS_NOTE
	Purpose:
		
	Description:
		
	History:
		Sat Oct 18 19:24:38     2008, Created by tomyeh
}}IS_NOTE

Copyright (C) 2008 Potix Corporation. All Rights Reserved.

{{IS_RIGHT
}}IS_RIGHT
*/
/** Begins the creating of widgets and pages. */
function zkcrbg() {
	zk.creating = true;
}
/** Ends the creating of widgets and pages. */
function zkcre() {
	if (!zk.loading) {
		zk.booted = true;
		zk.creating = false;
	}
	zkws = []; //clean up if failed
	zkdtid = null;
}

/** Used internally. */
function zkbeg(o) {
	o.children = [];
	if (zkws.length > 0)
		zkws[0].children.add(o);
	zkws.unshift(o);
}
/** Used internally. */
function zkend() {
	var o = zkws.shift();
	if (!zkws.length) {
		zkload(o);
	}
}
/** Used internally to load package of the specified widget/page. */
function zkload(o) {
	var type = o.type; j = type.lastIndexOf('.');
	if (j >= 0)
		zkPkg.load(type.substring(0, j), zkdtid);
	for (var children = o.children, len = children.length, j = 0; j < len;++j)
		zkload(children[j]);
}

/** Used internally. */
var zkws = [], zkdtid; //used to load widget

/** Begins the creation of a page generated by the server.
 *
 * @param contained if a page is not owned by another page, and
 * it doesn't cover the whole browser window (included by non-ZK tech)
 */
function zkpgbg(pgid, style, dtid, contained, updateURI) {
	if (dtid) zkdtbg(dtid, updateURI);
	zkbeg({type: "#p", uuid: pgid,
		style: style ? style: "height:100%;width:100%",
		contained: contained, updateURI: updateURI});
}
/** Ends the creation of a page.
 */
zkpge = zkend;

/** Begins the creation of a widget generated by the server.
 */
function zkbg(type, uuid, mold, props) {
	zkbeg({type: type, uuid: uuid, mold: mold ? mold: "default",
		props: props});
}
/** Ends the creation of a widget. */
zke = zkend;

/** Begins the creation of a desktop generated by the server.
 * This method is called only if zkpgbg is not called.
 * <p>Note: there is no zken().
 */
function zkdtbg(dtid, updateURI) {
	var dt = zk.Desktop.of(dtid);
	if (dt == null) new zk.Desktop(dtid, updateURI);
	else if (updateURI) dt.updateURI = updateURI;
	zkdtid = dtid;
}

//Init Only//
/** Sets the version. */
function zkver() {
	var args = arguments, len = args.length;
	zk.version = args[0];
	zk.build = args[1];

	for (var j = 2; j < len; j += 2)
		zkPkg.version(args[j], args[j + 1]);
	return;
}

/** Sets the options. */
function zkopt(opts) {
	for (var nm in opts) {
		var val = opts[nm];
		switch (nm) {
		case "pd": zk.procDelay = val; break;
		case "td": zk.tipDelay =  val; break;
		case "rd": zk.resendDelay = val; break;
		case "dj": zk.debugJS = val; break;
		case "kd": zk.keepDesktop = val; break;
		case "pf": zk.pfmeter = val; break;
		}
	}
}
