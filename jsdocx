#!/bin/bash
# jsdocx
#
#	Purpose:
#		
#	Description:
#		
#	History:
#		Wed Dec  9 15:11:56     2009, Created by jumperchen
#
#Copyright (C) 2009 Potix Corporation. All Rights Reserved.
#
stamp=$(date +%Y-%m-%d)
maindir="$(pwd)"
target=$1

setting=build.setting.local
if [ ! -f $setting ] ; then
	setting=build.setting
	if [ ! -f $setting ] ; then
		echo $setting must be specified
		exit 1
	fi
fi

jsdocdir=$(grep '^jsdoc' $setting)
jsdocdir=${jsdocdir#jsdoc=}
if [ "$jsdocdir" = "" ] ; then
	echo jsdoc must be specified in $setting
	exit 1
fi
jsdocdir=${jsdocdir/\~/$HOME}
	
#-- subroutine invoke_ant
#$1: cmd
#$2: target
function invoke_ant
{
	echo "$1.$outdir $2 $3..."
	cd $2
	
	if [ $3 ] ; then
		prjnm=$3
	else
		prjnm=$2
	fi
	
	#handle class.test.local
	local class_test=
	if [ "${cmd#utest}" != "$cmd" ] ; then #utest
		if [ -f class.test.local ] ; then
			ctOrg=$(cat class.test.local | tr '\n' ' ')
			class_test=
			for cls in $ctOrg ; do
				if [ "${cls#\#}" = "$cls" ] ; then
					fl=$(echo $cls | tr '.' '/').java
					if [ "$class_test" = "" ] ; then
						class_test="-Dclass.test=$fl"
					else
						class_test="$class_test,$fl"
							#Don't use whitespace
					fi
				fi
			done
		fi
	fi

	local CP=
	if [ -f classpath ] ; then
		#retrieve path
		CP=$(cat classpath | tr '\n' ':')
		CP=${CP%:}

		#javadoc.class.path shall not contain '.', because xdoclet will
		#ignore files that are found in classpath
		DCP=$(echo $CP | sed -e 's/:\.:/:/g' -e 's/^\.://' -e 's/:\.$//')
		if [ "$TERM" = "cygwin" ] ; then
			DCP=$(safe_cygpath "-mp" "$DCP")
				#Don't convert CP because it is used by bash directly
		fi
	fi
	if [ "$verbose" != "" ] ; then
		echo "CP: $CP"
		echo "DCP: $DCP"
	fi

	local war_libs=
	if [ -f war.libs ] ; then
		war_libs=$(cat war.libs | tr '\n' ',')
		war_libs=${war_libs%,}
	fi
	if [ "$war_libs" = "" ] ; then
		war_libs=nonexist
	fi

	local server_libs=
	if [ -f server.libs ] ; then
		server_libs=$(cat server.libs | tr '\n' ',')
		server_libs=${server_libs%,}
	fi
	if [ "$server_libs" = "" ] ; then
		server_libs="nonexist"
	fi

	local ear_libs=
	if [ -f ear.libs ] ; then
		ear_libs=$(cat ear.libs | tr '\n' ',')
		ear_libs=${ear_libs%,}
	fi
	if [ "$ear_libs" = "" ] ; then
		ear_libs=nonexist
	fi

	local deploy=
	local unziplist=
	if [ -f deploy ] ; then
		deploy=$(head -1 deploy)
		if [ "$deploy" = "server" ] || [ "${cmd#utest}" != "$cmd" ] ; then
			app=$(grep '^app=' deploy)
			app=${app#app=}
			if [ "$app" = "" ] ; then
				echo "You must specify app=xxx in deploy, because deploy target is server or utest is required"
				exit 1
			fi
			echo Application: $app
		fi
		if [ "$deploy" = "server" ] ; then
			rootContext=$(grep '^root-context=' deploy)
			rootContext=${rootContext#root-context=}

			if [ "$unzip" != "" ]; then
				unziplist=$(grep '^unzip' deploy|tr -d ' ')
				unziplist=${unziplist#unzip=}
				if [ "$unziplist" != "" ] ; then
					unziplist=-Ddeploy.unzip.list="$unziplist"
				fi
			fi
		fi

		zipjslist=$(grep '^zipjs=' deploy)
		zipjslist=${zipjslist#zipjs=}
		zipcsslist=$(grep '^zipcss=' deploy)
		zipcsslist=${zipcsslist#zipcss=}
	else
		deploy=unknown
	fi
	if [ "${zipjslist}" = "" ] ; then
		zipjslist=_na_dir_
	fi
	if [ "${zipcsslist}" = "" ] ; then
		zipcsslist=_na_dir_
	fi

	prjver="$(head -1 version)"
	srcver=$(grep '^source=' version)
	srcver=${srcver#source=}
	if [ "$srcver" = "" ] ; then
		srcver=1.4
	fi
	tgtver=$(grep '^target=' version)
	tgtver=${tgtver#target=}
	if [ "$tgtver" = "" ] ; then
		tgtver=1.4
	fi
	deprecation=$(grep '^deprecation=' version)
	deprecation=${deprecation#deprecation=}
	if [ "$deprecation" = "" ] ; then
		deprecation=on
	fi

	this_dflag=$dflag
	dflagtmp=$(grep '^debug=' version)
	dflagtmp=${dflagtmp#debug=}
	if [ "$dflagtmp" = "true" ] ; then
		this_dflag=on
	elif [ "$dflagtmp" = "false" ] ; then
		this_dflag=off
	fi
	this_oflag=$oflag
	oflagtmp=$(grep '^optimize=' version)
	oflagtmp=${oflagtmp#optimize=}
	if [ "$oflagtmp" = "true" ] ; then
		this_oflag=on
	elif [ "$oflagtmp" = "false" ] ; then
		this_oflag=off
	fi

	prjtitle=$(grep '^project=' version)
	prjtitle=${prjtitle#project=}
	if [ "$prjtitle" = "" ] ; then
		prjtitle=$prjnm
	fi

	format="$(head -1 format)"
	if [ "$format" = "cpp" ] ; then
		if [ ! -d $outdir ] ; then
			mkdir $outdir
		fi
		if [ \( "${cmd#build}" != "$cmd" \) -o \( "${cmd#clean}" != "$cmd" \) ] ; then
		(
			cd $outdir
			DEPLOY_DIR=../../dist/lib make -f ../src/Makefile $1
		)
		fi
	else
		gentime=$(grep '^time=' format)
		gentime=${gentime#time=}

		CLASSPATH="$DCP" ANT_OPTS=-Xmx160M ant $verbose $class_test \
		$doall -Dformat="$format" -Ddeploy="$deploy" \
		-Dserver.libs="$server_libs" -Dstart.service="$start_service" \
		-Djboss.profile="$jboss_profile" -Djboss.ear="$jboss_ear" \
		-Djboss.home="$jboss_home" -Dtomcat.home="$tomcat_home" \
		-Djs.trim=$jstrim -Dzipjs=$zipjslist\
		-Dzipcss=$zipcsslist\
		-Dwar.libs="$war_libs" -Dbasedir=. \
		-Dear.libs="$ear_libs" \
		-Dproject.name="$prjnm" -Dproject.title="$prjtitle" -Dproject.version="$prjver" \
		-Dsource.version="$srcver" -Dtarget.version="$tgtver" \
		-Ddeprecation="$deprecation" \
		-Dhaltonerror=$haltonerror -Dout.dir=$outdir \
		-Ddebug=$this_dflag -Doptimize=$this_oflag ${nojc} \
		-Dshare.javadoc.dir="$jsdocdir" \
		-Djavadoc.class.path="$DCP" -Dapp.name=$app $unziplist \
		-Droot.context=$rootContext -Dgentime=$gentime \
		$dfnList -buildfile ../../build.xml $1
	fi

	if [ $? != 0 ] ; then
		exit $?
	fi

	rm -rf velocity.log junit*.properties
	cd ..
}


cd jsdoc
if [ $# != 0 ] ; then
	for target in $* ; do
		target=${target%/}
		jsdocsrc="$jsdocsrc $target"
		if [ \( ! -d ../$target \) -a \( ! -d ../${target}Test \) ] ; then
			echo "Error: $target doesn't exist"
			exit 1
		fi
	done
else
	deploy=
	if [ -f deploy ] ; then
		deploy=$(head -1 deploy)
		jsdocsrc=$(grep '^jsdoc=' deploy)
		jsdocsrc=${jsdocsrc#jsdoc=}
		if [ "$jsdocsrc" = "" ] ; then
			echo jsdoc must be specified in $deploy
			exit 1
		fi
	else
		echo $deploy must be specified
		exit 1
	fi
	jsdocsrc="$(echo $jsdocsrc | tr ',' ' ')"
fi

rm -rf codegen
rm -rf $jsdocdir
mkdir temp
cp -rp src/* temp
cd temp
find -name .svn | xargs rm -rf
cd ..
mkdir -p codegen/src
mv -f temp/* codegen/src
for target in $jsdocsrc ; do
	echo "jsdoc $target"
	mkdir -p codegen/$target
	java -jar zk_jsdoc.jar "$maindir/$target/src" "./temp" "./codegen/$target/"
	
	mv -f codegen/$target/* codegen/src
	rm -rf codegen/$target
done

cp -rp version format codegen
invoke_ant javadoc codegen ./ZK
rm -rf temp