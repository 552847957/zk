/* Include.java

{{IS_NOTE
	Purpose:
		
	Description:
		
	History:
		Tue Oct 22 14:45:31     2008, Created by Flyworld
}}IS_NOTE

Copyright (C) 2008 Potix Corporation. All Rights Reserved.

{{IS_RIGHT
	This program is distributed under GPL Version 2.0 in the hope that
	it will be useful, but WITHOUT ANY WARRANTY.
}}IS_RIGHT
 */
package org.zkoss.zul.api;

import org.zkoss.zk.ui.Execution;
import org.zkoss.zk.ui.WrongValueException;
import org.zkoss.zk.ui.event.Events;
import org.zkoss.zk.ui.util.Clients;
import org.zkoss.zk.ui.ext.DynamicPropertied;
import org.zkoss.zul.mesg.MZul;

/**
 * Includes the result generated by any servlet, not limited to a ZUML page.
 * 
 * <p>
 * Non-XUL extension.
 * 
 * <p>
 * If the servlet is eventually another ZUML page, the page will be added to the
 * current desktop in the rendering phase.
 * 
 * <p>
 * There are two ways to pass parameters to the included page. First, you can
 * use the query string:
 * 
 * <pre>
 * &lt;code&gt;&lt;include src=&quot;/WEB-INF/mypage?arg=something&quot;/&gt;&lt;/code&gt;
 * </pre>
 * 
 * <p>
 * Second, since ZK 3.0.4, you can use {@link #setDynamicProperty}, or, in ZUL,
 * 
 * <pre>
 * &lt;code&gt;&lt;include src=&quot;/WEB-INF/mypage&quot; arg=&quot;something&quot;/&gt;&lt;/code&gt;
 * </pre>
 * 
 * <p>
 * With the query string, you can pass only the String values. and the parameter
 * can be accessed by {@link Execution#getParameter} or
 * javax.servlet.ServletRequest's getParameter. Or, you can access it with the
 * param variable in EL expressions.
 * 
 * <p>
 * On the other hand, the dynamic properties ({@link #setDynamicProperty}) are
 * passed to the included page thru the request's attributes. You can pass any
 * type of objects you want. In the included page, you can access them by use of
 * {@link Execution#getAttribute} or javax.servlet.ServletRequest's
 * getAttribute. Or, you can access with the requestScope variable in EL
 * expressions.
 * 
 * <h3>Macro Component versus {@link Include}</h3>
 * 
 * <ol>
 * <li>{@link Include} could include anything include ZUML, JSP or any other
 * servlet, while a macro component could embed only a ZUML page.</li>
 * <li>If {@link Include} includes a ZUML page, a {@link org.zkoss.zk.ui.Page}
 * instance is created as a child of {@link Include}. On the other hand, a macro
 * component makes the created components as the direct children -- i.e., you
 * can browse them with {@link org.zkoss.zk.ui.Component#getChildren}.</li>
 * <li>{@link Include} creates components in the Rendering phase, while a macro
 * component creates components in
 * {@link org.zkoss.zk.ui.HtmlMacroComponent#afterCompose}.</li>
 * <li>{@link Include#invalidate} will cause it to re-include the page (and then
 * recreate the page if it includes a ZUML page). However,
 * {@link org.zkoss.zk.ui.HtmlMacroComponent#invalidate} just causes it to
 * redraw and update the content at the client -- like any other component does.
 * To re-create, you have to invoke
 * {@link org.zkoss.zk.ui.HtmlMacroComponent#recreate}.</li>
 * </ol>
 * 
 * <p>
 * In additions to macro and {@link Include}, you can use the fulfill attribute
 * as follows: <code>&lt;div fulfill="=/my/foo.zul"&gt;...&lt;/div&gt;
 * 
 * @author tomyeh
 * @see Iframe
 * @since 3.5.2
 */
public interface Include extends org.zkoss.zul.impl.api.XulElement,
		DynamicPropertied {

	/**
	 * Sets whether to show the {@link MZul#PLEASE_WAIT} message before a long
	 * operation. This implementation will automatically use an echo event like
	 * {@link Events#echoEvent(String, org.zkoss.zk.ui.Component, String)} to
	 * suspend the including progress before using the
	 * {@link Clients#showBusy(String, boolean)} method to show the
	 * {@link MZul#PLEASE_WAIT} message at client side.
	 * 
	 * <p>
	 * Default: false.
	 * 
	 */
	public void setProgressing(boolean progressing);

	/**
	 * Returns whether to show the {@link MZul#PLEASE_WAIT} message before a
	 * long operation.
	 * <p>
	 * Default: false.
	 * 
	 */
	public boolean getProgressing();

	/**
	 * Internal use only.
	 * 
	 */
	public void onEchoInclude();

	/**
	 * Returns the src.
	 * <p>
	 * Default: null.
	 */
	public String getSrc();

	/**
	 * Sets the src.
	 * 
	 * <p>
	 * If src is changed, the whole component is invalidate. Thus, you want to
	 * smart-update, you have to override this method.
	 * 
	 * @param src
	 *            the source URI. If null or empty, nothing is included. You can
	 *            specify the source URI with the query string and they will
	 *            become a parameter that can be accessed by use of
	 *            {@link Execution#getParameter} or
	 *            javax.servlet.ServletRequest's getParameter. For example, if
	 *            "/a.zul?b=c" is specified, you can access the parameter with
	 *            ${param.b} in a.zul.
	 * @see #setDynamicProperty
	 */
	public void setSrc(String src) throws WrongValueException;

}
