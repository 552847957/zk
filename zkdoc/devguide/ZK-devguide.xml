<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book lang="en-US">
<title>The Developer's Guide</title>
<subtitle>Version 3.6.3</subtitle>
<bookinfo>
<copyright>
<year>2007</year>
<holder>Potix Corporation. All rights reserved.</holder>
</copyright>
</bookinfo>
<para>
<graphic fileref="images/2000009A000011C5000007882B1A34C6.jpg">2
			
		</graphic>
</para>
<para/>
<para>SIMPLY RICH</para>
<para>ZKTM</para>
<para>June 2009</para>
<para>Potix Corporation</para>
<para>Revision 228</para>
<para/>
<para/>
<para>Copyright Â© Potix Corporation. All rights reserved.</para>
<para>The material in this document is for information only and is subject to change without notice. While reasonable efforts have been made to assure its accuracy, Potix Corporation assumes no liability resulting from errors or omissions in this document, or from the use of the information contained herein.</para>
<para>Potix Corporation may have patents, patent applications, copyright or other intellectual property rights covering the subject matter of this document. The furnishing of this document does not give you any license to these patents, copyrights or other intellectual property.</para>
<para>Potix Corporation reserves the right to make changes in the product design without reservation and without notification to its users.</para>
<para>The Potix logo and ZK are trademarks of Potix Corporation.</para>
<para>All other product names are trademarks, registered trademarks, or trade names of their respective owners.</para>
<chapter>
<title>1. Introduction</title>
<para>Welcome to ZK, the simplest way to make Rich Web Applications.</para>
<para>The Developer's Guide describes the concepts and features of ZK. For installation refer to the Quick Start Guide. For a full description of component properties and methods refer to the Developer's Reference.</para>
<para>This chapter describes the historical background of Web programming, AJAX technologies and the ZK project. You may skip this chapter if you prefer to familiarize yourself with the ZK features right away.</para><sect1><title>Traditional Web Applications</title>
<para>Aimed at simply and effectively exchanging documents Web technologies such as, HTTP and HTML are originated from the page-based stateless-communication model. In this model a page is self-contained and is a minimal unit that communicates between clients and servers.</para>
<para>
<graphic fileref="images/20000081000027E400002C36A98C01AF.jpg">2
			
		</graphic>Since the Web has emerged as the default platform for application development this model faces a substantial challenge: the inability to visually represent the complexities in today's applications. For example, to give a customer a quotation, you might have to open another page to search his trading records, another page for the recent prices, and another page for current stocking. Users are forced to leave the page they are working in, and navigate among several pages. It is easy to get lost and confused resulting in unhappy customers, lost sales and low productivities.</para>
<para>The challenge to develop a modern application upon this page-based model is also substantial. In this model, applications running at the server have to take care of everything: from parsing the request, rendering the response, routing processes that link users from one page to another, and handling versatile errors made by users. Many different frameworks such as: Struts, Tapestry and JSF have emerged to simplify this development process. Due to the huge gap between the page-based model and modern applications learning and using these frameworks is never a pleasant process, not to mention intuitive or simplistic.</para></sect1><sect1><title>Ad-hoc AJAX Applications</title>
<para>Over a decade of evolution, Web applications have evolved from static HTML pages to Dynamic HTML pages, from applets to Flash, and finally to AJAX<footnote>
<para>AJAX is coined by Jesse James Garrett in Ajax: A New Approach to Web Applications.</para>
</footnote> technologies (Asynchronous JavaScript and XML). Illustrated by Google Maps and Suggest, AJAX breaths new life into Web applications by delivering the same level of interactivity and responsiveness as desktop applications do. Unlike applets or Flash, AJAX is based on the standard browser and JavaScript with no proprietary plugins required.</para>
<para/>
<para>
<graphic fileref="images/200000C9000027E4000032FC924A1F58.jpg">2
			
		</graphic>AJAX is a kind of new generation DHTML. Like DHTML, it heavily relies on JavaScript to listen to events triggered by user's activity, and then manipulate visual presentation of a page (aka. DOM) in the browser dynamically. Moreover, it takes a step further by enabling communication with the server asynchronously without leaving or rendering the whole page again. It breaks the page-based model by introducing light-weight communication between clients and servers. With proper design AJAX could bring rich components, common to desktop applications, to life in Web applications allowing dynamic updates and more control over the application.</para>
<para>When providing the interactivity that users demand, AJAX adds more complexities and skill prerequisites to the already costly development of Web applications. Developers have to manipulate DOM in the browser and communicate with the server via incompatible and even buggy JavaScript APIs. For better interactivity developers have to replicate application data and business logic in the browser, increasing maintenance costs and the challenge of synchronizing data between the server and the client.</para>
<para>The bottom line is that ad hoc AJAX applications are no different from traditional Web applications in regards to the way processes are requested. Developers still have to fill the gap caused by the page-based and stateless model.</para></sect1><sect1><title>ZK: What It Is </title>
<para>ZK is an event-driven, component-based framework to enable rich user interfaces for Web applications. ZK includes an AJAX-based event-driven engine, a rich set of XUL and XHTML components and a markup language called ZUML (ZK User Interface Markup Language).</para>
<para>With ZK, you represent your application in feature-rich XUL and XHTML components and manipulate them upon events triggered by user's activity, similar to what is done in desktop applications. Unlike most of other AJAX frameworks, as far as ZK is concerned, AJAX is a behind-the-scene technology. The synchronization of component content and the pipelining of events are done automatically by the ZK engine.</para>
<para>Your users get the same engaging interactivity and responsiveness of the desktop application, while your development retains the simplicity of developing desktop applications.</para>
<para>In addition to a simple model and rich components ZK also supports a markup language called ZUML. ZUML, like XHTML, enables developers to design user interfaces without programming. With XML namespaces, ZUML seamlessly integrates different set of tags<footnote>
<para>A tag is an XML element. When a ZUML page is interpreted, a corresponding component is created.</para>
</footnote> into the same page. Currently ZUML supports two set of tags, XUL and HTML.</para>
<para>For fast prototyping and customization ZUML allows developers to embed EL expressions, and scripting codes in your favorite languages including but not limited to: Java<footnote>
<para>The Java interpreter is based on BeanShell (http://www.beanshell.org).</para>
</footnote>, JavaScript<footnote>
<para>The JavaScript interpreter is based on Rhino (http://www.mozilla.org/rhino).</para>
</footnote>, Ruby<footnote>
<para>The Ruby interpreter is based on JRuby (http://jruby.codehaus.org/).</para>
</footnote> and Groovy<footnote>
<para>The Groovy interpreter is based on Groovy (http://groovy.codehaus.org/).</para>
</footnote>. Developers could choose not to embed any scripting codes at all if they prefer a more rigid discipline. Unlike JavaScript embedded in HTML, ZK executes all embedded scripting code on the server.</para>
<para>It is interesting to note that everything running at the server is from the viewpoint of the application developers. Component developers have to balance the interactivity and simplicity by deciding what tasks will done at the browser and what tasks will be done at the server.</para></sect1><sect1><title>ZK: What It Is Not</title>
<para>ZK assumes nothing about persistence or inter-server communication. ZK is designed to be as thin as possible. It is only aimed at the presentation tier. It does not require or suggest any other back-end technologies. All of your favorite middleware technologies such as: JDBC, Hibernate, Java Mail, EJB or JMS work as they used to.</para>
<para>ZK doesn't provide a tunnel, RMI or other API for developers to communicate between clients and servers. This is because all code runs at the server within the same JVM.</para>
<para>ZK doesn't enforce developers to use MVC or other design patterns. Whether to use them is the developer's choice.</para>
<para>ZK is not a framework aiming to bring XUL to Web applications. It is aimed to bring the desktop programming model to Web applications. Currently, it supports XUL and XHTML, in future it might support XAML, XQuery and others.</para>
<para>ZK embeds AJAX in the current implementation but it doesn't end in where AJAX does. With ZK API for Mobile devices, your applications could reach any devices that support J2ME such as: PDA, mobiles and game consoles. Moreover, you don't need to modify your application at all<footnote>
<para>For devices with small screen, you usually have to adjust the presentation pages.</para>
</footnote>.</para></sect1><sect1><title>ZK: Limitations</title>
<para>ZK is not for applications that run most of tasks at the clients, such as 3D action games.</para>
<para>Unless you write a special component, ZK is not for applications that want to leverage the computing power at the clients.</para></sect1></chapter>
<chapter>
<title>2. Getting Started</title>
<para>This chapter describes how to write your first ZUML page. It is suggested to read at least this chapter, if you are in hurry.</para>
<para>This chapter uses XUL to illustrate ZK features, but it is usually applicable to other markup languages that ZK supports.</para><sect1><title>Hello World!</title>
<para>After ZK is installed into your favorite Web server<footnote>
<para>Refer to the Quick Start Guide.</para>
</footnote>, writing applications is straight forward. Just create a file, say hello.zul, as follows<footnote>
<para>The other way to try examples depicted here is to use the live demo to run them.</para>
</footnote> under a proper directory.</para>
<programlisting>&lt;window title="Hello" border="normal"&gt;&#13;    Hello World!    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Then, browse to the right URL, say <ulink url="http://localhost/myapp/hello.zul">http://localhost/myapp/hello.zul</ulink>, and you got it.</para>
<para>
<graphic fileref="images/100000000000016B0000003225F823E1.png">2
			
		</graphic>In a ZUML page, a XML element describes what component to create. In this example, it is a window (org.zkoss.zul.Window). The XML attributes are used to assign values to properties of the window component. In this example, it creates a window with a title and border, which is done by setting the title and border properties to "Hello" and "normal", respectively.</para>
<para>The text enclosed in the XML elements is also interpreted as a special component called label (org.zkoss.zul.Label). Thus, the above example is equivalent to the following.</para>
<programlisting>&lt;window title="Hello" border="normal"&gt;&#13;    &lt;label value="Hello World!"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Also, it is equivalent to</para>
<programlisting>&lt;window title="Hello" border="normal"&gt;&#13;    &lt;label&gt;Hello World!"&lt;/label&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect1><sect1><title>Interactivity</title>
<para>Let us put some interactivity into it.</para>
<programlisting>&lt;window title="Hello" border="normal"&gt;&#13;    &lt;button label="Say Hello" onClick="alert(&amp;quot;Hello World!&amp;quot;)"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Then, when you click the button, you see as follows.</para>
<para>
<graphic fileref="images/10000000000002960000005450FF7802.png">2
			
		</graphic>
<graphic fileref="images/10000000000001EB00000087D3A63E71.png">2
			
		</graphic>The onClick attribute is a special attribute used to add an event listener to the component. The attribute value could be any legal Java codes. Notice that we use &amp;quot; to denote the double quot (") to make it a legal XML document. If you are not familiar with XML, you might take a look at the XML section in the ZK User Interface Markup Language chapter.</para>
<para>The alert function is a global function to display a message dialog box. It is a shortcut to one of the show methods of the org.zkoss.zul.Messagebox class.</para>
<programlisting>&lt;button label="Say Hello" onClick="Messagebox.show(&amp;quot;Hello World!&amp;quot;)"/&gt;&#13;</programlisting>
<para>Notes:</para>
<itemizedlist>
<listitem>
<para>The scripts embedded in ZUML pages can be written in different languages, including but not limited to Java, JavaScript, Ruby and Groovy. Moreover, they are running at the server.</para>
</listitem>
<listitem>
<para>ZK uses BeanShell to interpret Java at run time, so you could declare global functions, such as alert, for it. Similarly, almost all scripting language provides a simple way to define global functions, and, sometimes, classes.</para>
</listitem>
<listitem>
<para>All classes in the java.lang, java.util, org.zkoss.zk.ui, org.zkoss.zk.ui.event and org.zkoss.zul package are imported before evaluating the scripting codes embedded in ZUML pages.</para>
</listitem>
</itemizedlist></sect1><sect1><title>The zscript Element</title>
<para>The zscript element is a special element to define the scripting codes that will be evaluated when a ZUML page is rendered. Typical use includes initialization and declaring global variables and methods.</para>
<para>Note: You cannot use EL expressions in zscript codes.</para>
<para>For example, the following example displays a different message each time the button is pressed.</para>
<programlisting>&lt;window title="Hello" border="normal"&gt;&#13;    &lt;button label="Say Hello" onClick="sayHello()"/&gt;    &#13;    &lt;zscript&gt;    &#13;    int count = 0;    &#13;    void sayHello() { //declare a global function    &#13;        alert("Hello World! "+ ++count);        &#13;    }    &#13;    &lt;/zscript&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Note: zscript is evaluated only once when the page is loaded. It is usually used to define methods and initial variables.</para><sect2><title>The Scripting Language</title>
<para>By default, the scripting language is assumed to be Java. However, you can select different language by specifying the language attribute as follows. The language attribute is case insensitive.</para>
<programlisting>&lt;zscript language="javascript"&gt;&#13;    alert('Say Hi in JavaScript');    &#13;    new Label("Hi, JavaScript!").setParent(win);    &#13;&lt;/zscript&gt;&#13;</programlisting>
<para>To specify the scripting language for an event handler, you can prefix with, say, javascript: as follows. Notice: don't put whitespace before or after the language name.</para>
<programlisting>&lt;button onClick="javascript: do_something_in_js();"/&gt;&#13;</programlisting>
<para>You may have the script codes writing in different scripting languages in the same page.</para></sect2><sect2><title>The Scripting Codes in a Separate File</title>
<para>To separate codes and views, developers could put the scripting codes in a separated file, say sayHello.zs, and then use the src attribute to reference it.</para>
<programlisting>&lt;window title="Hello" border="normal"&gt;&#13;    &lt;button label="Say Hello" onClick="sayHello()"/&gt;    &#13;    &lt;zscript src="sayHello.zs"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>which assumes the content of sayHello.zs is as follows.</para>
<programlisting>int count = 0;&#13;void sayHello() { //declare a global function&#13;    alert("Hello World! "+ ++count);    &#13;}&#13;</programlisting></sect2></sect1><sect1><title>The attribute Element</title>
<para>The attribute element is a special element to define a XML attribute of the enclosing element. With proper use, it makes the page more readable. The following is equivalent to hello.zul described above.</para>
<programlisting>&lt;button label="Say Hello"&gt;&#13;     &lt;attribute name="onClick"&gt;alert("Hello World!");&lt;/attribute&gt;    &#13;&lt;/button&gt;&#13;</programlisting>
<para>You can control whether to omit the leading and trailing whitespaces of the attribute value by use of the trim attribute as follows. By default, no trim at all.</para>
<programlisting>&lt;button&gt;&#13;    &lt;attribute name="label" trim="true"&gt;    &#13;        The leading and trailing whitespaces will be omitted.        &#13;    &lt;/attribute&gt;    &#13;&lt;/button&gt;&#13;</programlisting></sect1><sect1><title>The EL Expressions</title>
<para>Like JSP, you could use EL expressions in any part of ZUML pages, except the names of attributes, elements and processing instructions.</para>
<para>EL expressions use the syntax ${expr}. For example,</para>
<programlisting>&lt;element attr1=â${bean.property}â.../&gt;&#13;${map[entry]}&#13;&lt;another-element&gt;${3+counter} is ${empty map}&lt;/another-element&gt;&#13;</programlisting>
<para>Tip: empty is an operator used to test whether a map, a collection, an array or a string is null or empty.</para>
<para>Tip: map[entry] is a way to access an element of a map. In other words, it is the same as map.get(entry) in Java.</para>
<para>When an EL expression is used as an attribute value, it could return any kind of objects as long as the component accepts it. For example, the following expression will be evaluated to a Boolean object.</para>
<programlisting>&lt;window if="${some &gt; 10}"&gt;&#13;</programlisting>
<para>Tip: The + operator in EL is arithmetic. It doesn't handle string catenations. If you want to catenate strings, simple use "${expr1} is added with ${expr2}".</para>
<para>Standard implicit objects, such as param and requestScope, and ZK implicit objects, such as self and page, are supported to simplify the use.</para>
<programlisting>&lt;textbox value="${param.who} does ${param.what}"/&gt;&#13;</programlisting>
<para>To import a method, you can use a processing instruction called the xel-method as follows.</para>
<programlisting>&lt;?xel-method prefix="c" name="forName"&#13;    class="java.lang.Class"    &#13;    signature="java.lang.Class forName(java.lang.String)"?&gt;    &#13;&lt;textbox value="${c:forName('java.util.List')}"/&gt;&#13;</programlisting>
<para>To import EL functions from TLD files, you could use a processing instruction called taglib as follows.</para>
<programlisting>&lt;?taglib uri="http://www.zkoss.org/dsp/web/core" prefix="c" ?&gt;&#13;</programlisting>
<para>The Developer's Reference provides more details on EL expressions. Or, you might refer to JSP 2.0 tutorials or guides for more information about EL expressions.</para></sect1><sect1><title>The id Attribute</title>
<para>To access a component in Java codes and EL expressions, you could assign an identifier to it by use of the id attribute. In the following example, we set an identifier to a label such that we could manipulate its value when one of the buttons is pressed.</para>
<programlisting>&lt;window title="Vote" border="normal"&gt;&#13;    Do you like ZK? &lt;label id="label"/&gt;    &#13;    &lt;separator/&gt;    &#13;    &lt;button label="Yes" onClick="label.value = self.label"/&gt;    &#13;    &lt;button label="No" onClick="label.value = self.label"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>After pressing the Yes button, you will see the following.</para>
<para>
<graphic fileref="images/100000000000029A0000006E7B745AB5.png">2
			
		</graphic>The following is any example for referencing a component in an EL expression.</para>
<programlisting>&lt;textbox id="source" value="ABC"/&gt;&#13;&lt;label value="${source.value}"/&gt;&#13;</programlisting></sect1><sect1><title>The if and unless Attributes</title>
<para>The if and unless attributes are used to control whether to create a component. In the following examples, both labels are created only if the request has a parameter called vote.</para>
<programlisting>&lt;label value="Vote 1" if="${param.vote}"/&gt;&#13;&lt;label value="Vote 2" unless="${!param.vote}"/&gt;&#13;</programlisting>
<para>If both attributes are specified, the component won't be created unless they are both evaluated to true.</para></sect1><sect1><title>The forEach Attribute</title>
<para>The forEach attribute is used to control how many components shall be created. If you specify a collection of objects to this attribute, ZK Loader will create a component for each item of the specified collection. For example, in the following ZUML page, the listitem element will evaluated three times (for "Monday", "Tuesday" and "Wednesday") and then generate three list items.</para>
<programlisting>&lt;zscript&gt;contacts = new String[] {"Monday", "Tuesday", "Wednesday"};&lt;/zscript&gt;&#13;&lt;listbox width="100px"&gt;<inlinegraphic fileref="images/100000000000006A00000037D22ADEEF.png" align="right"/>&#13;&lt;listitem label="${each}" forEach="${contacts}"/&gt;&#13;&lt;/listbox&gt;&#13;</programlisting>
<para>When evaluating the element with the forEach attribute, the each variable is assigned one-by-one with objects from the collection, i.e., contacts in the previous example. Thus, the above ZUML page is the same as follows.</para>
<programlisting>&lt;listbox&gt;&#13;&lt;listitem label="Monday"/&gt;&#13;&lt;listitem label="Tuesday"/&gt;&#13;&lt;listitem label="Wednesday"/&gt;&#13;&lt;/listbox&gt;&#13;</programlisting>
<para>Alternatively, you can specify a list of items in the forEach attribute by separating them with comma.</para>
<programlisting>&lt;listbox&gt;&#13;&lt;listitem label="${each}" forEach="Monday, Tuesday, Wednesday"/&gt;&#13;&lt;/listbox&gt;&#13;</programlisting>
<para>In additions to forEach, you can control the iteration with forEachBegin and forEachEnd. Refer to the ZK Attributes section in the ZK User Interface Markup Language chapter for details.</para></sect1><sect1><title>The use and apply Attribute</title>
<para>Embedding codes improperly in pages might cause maintenance headache. There are several ways to separate codes from views.</para>
<para>First, you could listen to events you care, and then invoke the proper methods accordingly. For example, you could invoke your methods to initialize, process and cancel upon the onCreate<footnote>
<para>The onCreate event is sent when a window defined in a ZUML page is created.</para>
</footnote>, onOK<footnote>
<para>The onOK event is sent when user pressed the ENTER key.</para>
</footnote> and onCancel<footnote>
<para>The onCancel event is sent when user pressed the ESC key.</para>
</footnote> events.</para>
<programlisting>&lt;window onCreate="MyManager.init(main)"onOK="MyManager.process(main)" onCancel="MyManager.cancel(main)"/&gt;&#13;</programlisting>
<para>In addition, you must have a Java class called MyManager shown as follows.</para>
<programlisting>import org.zkoss.zul.Window;&#13;&#13;public class MyManager {&#13;    public static void init(Window main) { //does initialization    &#13;    }    &#13;    public static void save(Window main) { //saves the result    &#13;    }    &#13;    public static void cancel(Window main) { //cancel any changes    &#13;    }    &#13;}&#13;</programlisting>
<para>However, the above approach requires you to embed some codes in the ZUML pages. The advantage of embedding codes in UI is easy to change the behavior dynamically (particularly in the prototype phase), but it still reveals some maintenance codes and the performance is bit slower<footnote>
<para>The codes specified in ZUML pages are interpreted a the run time by the Java interpreter.</para>
</footnote>.</para><sect2><title>The use Attribute</title>
<para>If you prefer not to use any Java codes in the ZUML pages, you can extend the implementation of a component to handle the events as follows.</para>
<programlisting>import org.zkoss.zul.Window;&#13;&#13;public class MyWindow extends Window {&#13;    public void onCreate() { //does initialization    &#13;    }    &#13;    public void onOK() { //save the result    &#13;    }    &#13;    public void onCancel() { //cancel any changes    &#13;    }    &#13;}&#13;</programlisting>
<para>Then, specify the class with the use attribute as shown below.</para>
<programlisting>&lt;window use="MyWindow"&gt;&#13;    ...    &#13;&lt;/window&gt;&#13;</programlisting></sect2><sect2><title>The apply Attribute</title>
<para>If you prefer the MVC (Model-View-Controller) approach, i.e., you prefer not to embed the handling codes in the window (the view), you can implement a class to initialize the window. The class must implement the org.zkoss.zk.ui.util.Composer interface.</para>
<programlisting>import org.zkoss.zk.ui.util.Composer;&#13;import org.zkoss.zul.Window;&#13;public class MyComposer implements Composer {&#13;    public void doAfterCompose(Component comp) {    &#13;        ((Window)comp).setTitle("My Title"); //do whatever initialization you want        &#13;            //comp is Window since we will specify it to a window later            &#13;    }    &#13;}&#13;</programlisting>
<para>where assumes you have three event listeners, MyCreate, MyOK, and MyCancel. Refer to the Event section below for the explanation of event listeners.</para>
<para>Then, specify the class with the apply attribute as shown below.</para>
<programlisting>&lt;window apply="MyComposer"&gt;&#13;...&#13;&lt;/window&gt;&#13;</programlisting>
<para>The window is still created as an instance of org.zkoss.zul.Window, and it will be passed to the doAfterCompose method as the comp argument. Then, you can do any initialization you want.</para>
<para>If you want to apply multiple composers, separate them with comma. In addition, you can use an EL expression to return the class, its name, an instance of Composer, or a collection of Composer instances.</para>
<programlisting>&lt;window apply="MyComposer, AnotherComposer"&gt;&#13;    &lt;textbox apply="${c:mycomposer()}"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect2><sect2><title>Implement Java Classes in zscript</title>
<para>Thanks to the power of BeanShell<footnote>
<para>http://www.beanshell.org</para>
</footnote>, the implementation of Java classes can be done in zscript as follows.</para>
<programlisting>&lt;zscript&gt;&#13;    public class MyWindow extends Window {    &#13;    }    &#13;&lt;/zscript&gt;&#13;&lt;window use="MyWindow"/&gt;&#13;</programlisting>
<para>Tip: Many scripting languages, e.g., JRuby, also allow developers to define classes that are accessible by JVM. Please consult the corresponding manuals for details.</para>
<para>To separate codes from the view, you can put all zscript codes in a separated file, say mywnd.zs, and then,</para>
<programlisting>&lt;zscript src="/zs/mywnd.zs"/&gt;&#13;&lt;window use="MyWindow"/&gt;&#13;</programlisting>
<para>Tip: You can use the init directive to specify a zscript file, too. The difference is the init directive is evaluated before any component is created (in the Page Initial phase). For more information, refer to the init Directive section in the ZK User Interface Markup Language chapter.</para></sect2></sect1><sect1><title>The forward Attribute</title>
<para>A window usually consists of several buttons, menu items and other controls. For example,</para>
<programlisting>&lt;window use="MyWindow"&gt;&#13;    ...    &#13;    &lt;button label="OK"/&gt;    &#13;    &lt;button label="Cancel"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>When the user clicks the button, the onClick event is sent to the button itself. However, these events are better to process in the window rather than scattering around these buttons. To do that, you can use the forward attribute as follows.</para>
<programlisting>&lt;window use="MyWindow"&gt;&#13;    ...    &#13;    &lt;button label="OK" forward="onOK"/&gt;    &#13;    &lt;button label="Cancel" forward="onCancel"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>where the forward attribute of the OK button specifies that the onClick event, if received, shall be forwarded to the space owner (i.e., the window) as the onOK event. Similarly, the onClick event targeting the Cancel button is forwarded as the onCancel event. Thus, you can handle the onOK and onCancel events in the space owner, MyWindow, as follows.</para>
<programlisting>public class MyWindow extends Window {&#13;    public void onOK() {    &#13;        //called when the OK button is clicked (or the ENTER button is pressed)        &#13;    }    &#13;    public void onCancel() {    &#13;        //called when the Cancel button is clicked (or the ESC button is pressed)        &#13;    }    &#13;}&#13;</programlisting>
<para>In addition to forward the onClick event to the space owner, you can forward any event to any component with the forward attribute. Refer to the forward Attribute section in the ZK User Interface Markup Language chapter for more details.</para></sect1><sect1><title>Create Components Manually</title>
<para>In addition to describe what components to create in ZUML pages, developers could create them manually. All component classes are concrete. You create them directly<footnote>
<para>To make things simpler, the factory design pattern is not used.</para>
</footnote> with their constructors.</para>
<programlisting>&lt;window id="main"&gt;&#13;    &lt;button label="Add Item"&gt;    &#13;        &lt;attribute name="onClick"&gt;        &#13;    new Label("Added at "+new Date()).setParent(main);    &#13;    new Separator().setParent(main);    &#13;        &lt;/attribute&gt;        &#13;    &lt;/button&gt;    &#13;    &lt;separator bar="true"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>When a component is created manually, it won't be added to any page automatically. In other words, it doesn't appear at user's browser. To add it to a page, you could invoke the setParent, appendChild or insertBefore method to assign a parent to it, and it becomes a part of a page if the parent is a part of a page.</para>
<para>There is no destroy or close method for components<footnote>
<para>The concept is similar to W3C DOM. On the other hand, Windows API required developers to manage the lifecycle.</para>
</footnote>. A component is removed from the browser as soon as it is detached from the page. It is shown as soon as it is attached to the page.</para>
<programlisting>&lt;window id="main"&gt;&#13;    &lt;zscript&gt;Component detached = null;&lt;/zscript&gt;    &#13;    &lt;button id="btn" label="Detach"&gt;    &#13;        &lt;attribute name="onClick"&gt;        &#13;    if(detached != null) {    &#13;        detached.setParent(main);        &#13;        detached = null;        &#13;        btn.label = "Detach";        &#13;    } else {    &#13;        (detached = target).setParent(null);        &#13;        btn.label = "Attach";        &#13;    }    &#13;        &lt;/attribute&gt;        &#13;    &lt;/button&gt;    &#13;    &lt;separator bar="true"/&gt;    &#13;    &lt;label id="target" value="You see this if it is attached."/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>In the above example, you could use the setVisible method to have a similar effect. However, setVisible(false) doesn't remove the component from the browser. It just makes a component (and all its children) invisible.</para>
<para>After a component is detached from a page, the memory it occupies is release by JVM's garbage collector if the application has no reference to it.</para><sect2><title>Developing ZK Applications without ZUML</title>
<para>For developers who preferred not to use ZUML at all, they can use the so-called richlet to create all components manually.</para>
<programlisting>import org.zkoss.zul.*;&#13;public class TestRichlet extends org.zkoss.zk.ui.GenericRichlet {&#13;    public void service(Page page) {    &#13;        page.setTitle("Richlet Test");        &#13;&#13;        final Window w = new Window("Richlet Test", "normal", false);        &#13;        new Label("Hello World!").setParent(w);        &#13;        final Label l = new Label();        &#13;        l.setParent(w);        &#13;        //...        &#13;        w.setPage(page);        &#13;    }    &#13;}&#13;</programlisting>
<para>Refer to the Richlets section in the Advanced Features chapter.</para></sect2></sect1><sect1><title>Define New Components for a Particular Page</title>
<para>As illustrated, it is simple to assign properties to a component by use of XML attributes.</para>
<programlisting>&lt;button label="OK" style="border:1px solid blue"/&gt;&#13;</programlisting>
<para>ZK provides a powerful yet simple way to let developers define new components for a particular pages. It is useful if most components of the same type share a set of properties.</para>
<para>First, you use the component directive to define a new component.</para>
<programlisting>&lt;?component name="bluebutton" extends="button" style="border:1px solid blue" label="OK"?&gt;&#13;&#13;&lt;bluebutton/&gt;&#13;&lt;bluebutton label="Cancel"/&gt;&#13;</programlisting>
<para>is equivalent to</para>
<programlisting>&lt;bluebutton style="border:1px solid blue" label="OK"/&gt;&#13;&lt;bluebutton style="border:1px solid blue" label="Cancel"/&gt;&#13;</programlisting>
<para>Moreover, you can override the definition of button altogether as follows. Of course, it won't affect any other pages.</para>
<programlisting>&lt;?component name="button" extends="button" style="border:1px solid blue" label="OK"?&gt;&#13;&#13;&lt;button/&gt;&#13;&lt;button label="Cancel"/&gt;&#13;</programlisting>
<para>For more information, refer to the component Directive section in the ZK User Interface Markup Language chapter.</para></sect1></chapter>
<chapter>
<title>3. The Basics</title>
<para>This chapter describes the basics of ZK. It uses XUL to illustrate ZK features, but it is usually applicable to other markup languages that ZK supports.</para><sect1><title>Architecture Overview</title>
<para>ZK includes an AJAX-based mechanism to automate interactivity, a rich set of XUL-based components to enrich usability, and a markup language to simplify development.</para>
<para>The AJAX-based mechanism consists of three parts as depicted below: ZK loader, ZK AU Engine<footnote>
<para>Also known as ZK Update Engine.</para>
</footnote> and ZK Client Engine.</para>
<para>
<graphic fileref="images/2000011400003FE500002350FCFBD1DA.jpg">2
			
		</graphic>Based on the user's request, the ZK Loader loads a ZK page, interprets it, and renders the result into HTML pages in response to URL requests. A ZK page is written in a markup language called ZUML. ZUML, like HTML, is used to describe what components to create and how to represent them visually. These components, once created, remain available until the session is timeout.</para>
<para>The ZK AU<footnote>
<para>AU stands for Asynchronous Update.</para>
</footnote> Engine and the ZK Client Engine then work together as pitcher and catcher. They deliver events happening in the browser to the application running at the server, and update the DOM tree at the browser based on how components are manipulated by the application. This is so-called event-driven programming model.</para><sect2><title>The Execution Flow</title>
<orderedlist>
<listitem>
<para>When a user types an URL or clicks an hyperlink at the browser, a request is sent to the Web server. ZK loader is then invoked to serve this request, if the URL matches which ZK is configured for<footnote>
<para>Refer to Appendix A in the Developer's Reference.</para>
</footnote>.</para>
</listitem>
<listitem>
<para>ZK loader loads the specified page and interprets it to create proper components accordingly.</para>
</listitem>
<listitem>
<para>After interpreting the whole page, ZK loader renders the result into a HTML page. The HTML page is then sent back to the browser accompanied with ZK Client Engine<footnote>
<para>ZK Client Engine is written in JavaScript. Browsers cache ZK Client engine, so the engine is usually sent only once at the first visit.</para>
</footnote>.</para>
</listitem>
<listitem>
<para>ZK Client engine sits at the browser to detect any event triggered by user's activity such as moving mouse or changing a value. Once detected, it notifies ZK AU Engine by sending a ZK request<footnote>
<para>ZK requests are special AJAX requests. However, for the mobile edition, ZK requests are special HTTP requests.</para>
</footnote>.</para>
</listitem>
<listitem>
<para>Upon receiving ZK requests from Client Engine, AU Engine updates the content of corresponding component, if necessary. And then, AU Engine notifies the application by invoking relevant event handlers, if any.</para>
</listitem>
<listitem>
<para>If the application chooses to change content of components, add or move components, AU Engine send the new content of altered components to Client Engine by use of ZK responses.</para>
</listitem>
<listitem>
<para>These ZK responses are actually commands to instruct Client Engine how to update the DOM tree accordingly.</para>
</listitem>
</orderedlist></sect2></sect1><sect1><title>Components, Pages and Desktops</title><sect2><title>Components</title>
<para>A component is an UI object, such as a label, a button and a tree. It defines the visual presentation and behaviors of a particular user interface. By manipulating them, developers control how to represent an application visually in the client.</para>
<para>A component must implement the org.zkoss.zk.ui.Component interface.</para></sect2><sect2><title>Pages</title>
<para>A page (org.zkoss.zk.ui.Page) is a collection of components. A page confines components belonging to it, such that they will be displayed in a certain portion of the browser. A page is automatically created when ZK loader interprets a ZUML page.</para><sect3><title>Page Title</title>
<para>Each page could have a title that will be displayed as part of the browser's window caption. Refer to the Processing Instructions section in the ZK User Interface Markup Language chapter for details.</para>
<programlisting>&lt;?page title="My Page Title"?&gt;&#13;</programlisting></sect3></sect2><sect2><title>Desktops</title>
<para>
<graphic fileref="images/2000002800002299000010A1C2250C8A.jpg">2
			
		</graphic>A ZUML page might include another ZUML pages directly or indirectly. Since these pages are created for serving the same URL request, they are collectively called a desktop (org.zkoss.zk.ui.Desktop). In other word, a desktop is a collection of pages for serving the same URL request.</para>
<para>As a ZK application interacts with user, more pages might be added to a desktop and some might be removed from a desktop. Similarly, a component might be added to or removed from a page.</para><sect3><title>The createComponents Method</title>
<para>Notice that both pages and desktops are created and remove implicitly. There are no API to create or remove them. A page is create each time ZUML loads a page. A page is removed when ZK finds it is no longer referenced. A desktop is created when the first ZUML page is loaded. A desktop is removed if too many desktops are created for the specific session.</para>
<para>The createComponents method in the org.zkoss.zk.ui.Executions class creates only components, not page, even though it loads a ZUML file (aka., page).</para></sect3></sect2><sect2><title>Forest of Trees of Components</title>
<para>A component has at most one parent. A component might have multiple children. Some components accept only certain types of components as children. Some must be a child of certain type of components. Some don't allow any child at all. For example, Listbox in XUL accepts Listcols and Listitem only. Refer to Javadoc or XUL tutorials for details.</para>
<para>A component without any parent is called a root component. A page might have multiple root components, which could be retrieved by the getRoots method.</para></sect2><sect2><title>Component: a Visual Part and a Java Object</title>
<para>Besides being a Java object in the server, a component has a visual part<footnote>
<para>If the client is a browser, the visual presentation is a DOM element or a set of DOM elements.</para>
</footnote> in the browser, if and only if it belongs to a page. When a component is attached to a page, its visual part is created<footnote>
<para>The visual part is created, updated and removed automatically. Application developers rarely need to notice its existence. Rather, they manipulate the object part in the server.</para>
</footnote>. When a component is detached from a page, its visual part is removed.</para>
<para>There are two ways to attach a component into a page. First, you could call the setPage method to make a component to become a root component of the specified page. Second, you could call the setParent, insertBefore or appendChild method to make it to become a child of another component. Then, the child component belongs to the same page as to which the parent belongs.</para>
<para>Similarly, you could detach a root component from a page by calling setPage with null. A child is detached if it is detached from a parent or its parent is detached from a page.</para></sect2><sect2><title>Identifiers</title>
<para>Each component has an identifier (the getId method). It is created automatically when a component is created. Developers could change it anytime. There is no limitation about how an identifier shall be named. However, if an alphabetical identifier is assigned, developers could access it directly in Java codes and EL expression embedded in the ZUML page.</para>
<programlisting>&lt;window title="Vote" border="normal"&gt;&#13;    Do you like ZK? &lt;label id="label"/&gt;    &#13;    &lt;separator/&gt;    &#13;    &lt;button label="Yes" onClick="label.value = self.label"/&gt;    &#13;    &lt;button label="No" onClick="label.value = self.label"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect2><sect2><title>UUID</title>
<para>A component has another identifier called UUID (Universal Unique ID), which application developers rarely need.</para>
<para>UUID is used by components and Client Engine to manipulate DOM at the browser and to communicate with the server. More precisely, the id attribute of a DOM element at the client is UUID.</para>
<para>UUID is generated automatically when a component is created. It is immutable, except the identifiers of components for representing HTML tags.</para>
<para>HTML relevant components handle UUID different from other set of components: UUID is the same as ID. If you change ID of a HTML relevant component, UUID will be changed accordingly. Therefore, old JavaScript codes and servlets will remain to work without any modification.</para></sect2></sect1><sect1><title>The ID Space</title>
<para>It is common to decompose a visual presentation into several ZUML pages. For example, a page for displaying a purchase order, and a modal dialog for entering the payment term. If all components are uniquely identifiable in the same desktop, developers have to maintain the uniqueness of all identifiers for all pages that might created to the same desktop.</para>
<para>The concept of ID spaces is then introduced to resolved this issue. An ID space is a subset of components of a desktop. The uniqueness is guaranteed only in the scope of an ID space.</para>
<para>The simplest form of an ID space is a window (org.zkoss.zul.Window). All descendant components of a window (including the window itself) forms an independent ID space. Thus, you could use a window as the topmost component of each page, such that developers need to maintain the uniqueness of each page separately.</para>
<para>More generally, any component could form an ID space as long as it implements the org.zkoss.zk.ui.IdSpace interface. Page also implements the IdSpace interface, so it is also a space owner.</para>
<para>The topmost component of an ID space is called the owner of the ID space, which could be retrieved by the getSpaceOwner method in the Component interface.</para>
<para>
<graphic fileref="images/2000005000001B39000015E7270F9884.jpg">2
			
		</graphic>If an ID space, say X, is a descendant of another ID space, say Y, then space X's owner is part of space Y but descendants of X is not part of space Y.</para>
<para>As depicted in the figure, there are three spaces: P, A and C. Space P includes P, A, F and G. Space A includes A, B, C and D. Space C includes C and E.</para>
<para>Components in the same ID spaces are called fellows. For example, A, B, C and D are fellows of the same ID space.</para>
<para>To retrieve another fellow, you could use the getFellow method in the IdSpace interface or the Component interface.</para>
<para>Notice that the getFellow method can be invoked against any components in the same ID space, not just the space owner. Similarly, the getSpaceOwner method returns the same object for any components in the same ID space, no matter it is the space owner or not.</para>
<para>The org.zkoss.zk.ui.Path class provides utilities to simplify the location of a component among ID spaces. Its use is similar to java.io.File.</para>
<para>Path.getComponent("/A/C/E");</para>
<para>new Path("A/C", "E").getComponent();</para><sect2><title>Namespace and ID Space</title>
<para>To let the interpreter able to access the components directly, the namespace concept (org.zkoss.scripting.Namespace) is introduced. First, each ID space has exactly one namespace. Second, variables defined in a namespace are visible to the scripting codes and EL expressions that belong to the same namespace.</para>
<para>
<graphic fileref="images/100000000000013A0000001CEEC7BB2A.png">2
			
		</graphic>
</para>
<programlisting>&lt;window border="normal"&gt;&#13;    &lt;label id="l" value="hi"/&gt;    &#13;    &lt;zscript&gt;    &#13;        l.value = "Hi, namespace";        &#13;    &lt;/zscript&gt;    &#13;    ${l.value}    &#13;&lt;/window&gt;&#13;</programlisting>
<para>In the following example, there are two namspaces. One belongs to window w1 and the other to window w2<footnote>
<para>A window implements org.zkoss.zk.ui.IdSpace, so it forms an independent ID space and namespace.</para>
</footnote>. Thus, the b1 button's onClick script refers to the label defined in window w1, while the b2 button's onClick script refers to the checkbox defined in window w2.</para>
<programlisting>&lt;window id="w1"&gt;&#13;    &lt;window id="w2"&gt;    &#13;        &lt;label id="c"/&gt;        &#13;        &lt;button id="b1" onClick="c.value = &amp;quot;OK&amp;quot;"/&gt;        &#13;    &lt;/window&gt;    &#13;    &lt;checkbox id="c"/&gt;    &#13;    &lt;button id="b2" onClick="c.label = &amp;quot;OK&amp;quot;"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Notice the namespace is hierarchical. In other words, zscript in window w2 can see components in window w1, unless it is overridden in window w2. Thus, clicking button b1 will change label c in the following example.</para>
<programlisting>&lt;window id="w1"&gt;&#13;    &lt;window id="w2"&gt;    &#13;        &lt;button id="b1" onClick="c.value = &amp;quot;OK&amp;quot;"/&gt;        &#13;    &lt;/window&gt;    &#13;    &lt;label id="c"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>In addition to ZK's assigning components to the namespace, you can assign your variables to them by use of the setVariable method, such that zscript can reference them directly.</para></sect2><sect2><title>Variable and Functions Defined in zscript</title>
<para>In addition to executing codes, you could define variables and functions in the zscript element directly as depicted below.</para>
<programlisting>&lt;window id="A&gt;&#13;    &lt;zscript&gt;    &#13;        Object myvar = new LinkedList();        &#13;        void myfunc() {        &#13;            ...            &#13;        }        &#13;    &lt;/zscript&gt;    &#13;    ...    &#13;    &lt;button label="add" onClick="myvar.add(some)"/&gt;    &#13;    &lt;button label="some" onClick="myfunc()"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>The variables and methods defined in zscript are stored in the interpreter of the corresponding scripting language.</para><sect3><title>zscript and EL Expressions</title>
<para>Like namespaces<footnote>
<para>org.zkoss.zk.scripting.Namespace</para>
</footnote>, variable defined in zscript are all visible to EL expressions.</para>
<programlisting>&lt;window&gt;&#13;    &lt;zscript&gt;    &#13;    String var = "abc";    &#13;    self.setVariable("var2", "xyz", true);    &#13;    &lt;/zscript&gt;    &#13;    ${var} ${var2}    &#13;&lt;/window&gt;&#13;</programlisting>
<para>is equivalent to</para>
<programlisting>&lt;window&gt;&#13;abc xyz&#13;&lt;/window&gt;&#13;</programlisting>
<para>Notice that variables defined in zscript has the higher priority than those defined in the namespace.</para>
<programlisting>&lt;window&gt;&#13;    &lt;zscript&gt;    &#13;    String var = "abc";    &#13;    self.setVariable("var", "xyz", true);    &#13;    &lt;/zscript&gt;    &#13;    ${var}    &#13;&lt;/window&gt;&#13;</programlisting>
<para>is equivalent to</para>
<programlisting>&lt;window&gt;&#13;abc&#13;&lt;/window&gt;&#13;</programlisting>
<para>It is sometimes confusing, if you declare a component later as shown in the following example.</para>
<programlisting>&lt;window&gt;&#13;    &lt;zscript&gt;    &#13;    String var = "abc";    &#13;    &lt;/zscript&gt;    &#13;    &lt;label id="var" value="A label"/&gt;    &#13;    ${var.value} &lt;!-- Wrong! var is "abc", not the label --&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Therefore, it is suggested to use some naming pattern to avoid the confusion. For example, you can prefix all interpreter variables with zs_.</para>
<para>In additions, you shall use local variables if possible. A local variable is declared with the class name, and it is visible only to a particular scope of zscript codes.</para>
<programlisting>&lt;zscript&gt;&#13;Date now = new Date();&#13;&lt;/zscript&gt;&#13;</programlisting>
<para>Furthermore, you can make a local variable invisible to EL expressions by enclosing it with curly braces as follows.</para>
<programlisting>&lt;zscript&gt;&#13;{ //create a new logic scope&#13;    String var = "abc"; //visible only inside of the enclosing curly brace    &#13;}&#13;&lt;/zscript&gt;&#13;</programlisting></sect3><sect3><title>Multi-Scope Interpreters</title>
<para>Depending on the implementation, an interpreter might have exactly one logical scope, or one logic scope per ID space to store these variables and methods. For sake of description, we call them the single-scope and multi-scope interpreters, respectively.</para>
<para>Java interpreter (BeanShell) is a typical multi-scope interpreter<footnote>
<para>Java interpreter supports multi-scope after 2.3.1 (included) and before 2.2.1 (included).</para>
</footnote>. It creates an interpreter-dependent scope for each ID space. For example, two logical scopes are created for window A and B, respectively in the following example. Therefore, var2 is visible only to window B, while var1 is visible to both window A and B in the following example.</para>
<programlisting>&lt;window id="A"&gt;&#13;    &lt;zscript&gt;var1 = "abc";&lt;/zscript&gt;    &#13;    &lt;window id="B"&gt;    &#13;        &lt;zscript&gt;var2 = "def";&lt;/zscript&gt;        &#13;    &lt;/window&gt;    &#13;&lt;/window&gt;&#13;</programlisting><sect4><title>Java Interpreter (BeanShell)</title>
<para>With Java Interpreter (BeanShell), you can declare an interpreter variable local to the logical scope of the nearest ID space (i.e., a window) by specifying the class name as below,</para>
<programlisting>&lt;window id="A"&gt;&#13;    &lt;window id="B"&gt;    &#13;        &lt;zscript&gt;        &#13;    String b = "local to window B";    &#13;        &lt;/zscript&gt;        &#13;    &lt;/window&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>The following is a more sophisticated example which will generate abc def.</para>
<programlisting>&lt;window id="A"&gt;&#13;    &lt;zscript&gt;    &#13;    var1 = var2 = "abc";    &#13;    &lt;/zscript&gt;    &#13;    &lt;window id="B"&gt;    &#13;        &lt;zscript&gt;        &#13;    Object var1 = "123";    &#13;    var2 = "def";    &#13;    var3 = "xyz";    &#13;        &lt;/zscript&gt;        &#13;    &lt;/window&gt;    &#13;    ${var1} ${var2} ${var3}    &#13;&lt;/window&gt;&#13;</programlisting>
<para>where Object var1 = "123" actually creates a variable local to window B since the class name, Object, is specified. On the other hand, var2 = "def" causes the interpreter to look up any variable called var2 defined in the current scope or any scope in the upper layers. Since var2 was defined in window A, the variable is overridden. In the case of var3 = "xyz", a variable local to window B is created, since window A doesn't define any variable called var3.</para></sect4></sect3><sect3><title>Single-Scope Interpreters</title>
<para>Ruby, Groovy and JavaScript interpreters don't support multi-scope yet<footnote>
<para>We may support it in the near future.</para>
</footnote>. It means all variables defined in, say, Ruby are stored in one logical scope (per interpreter). Thus, the interpreter variables defined in one window override those defined in another window if they are in the same page. To avoid confusion, you could prefix the variable names with special prefix denoting the window.</para>
<para>Tip: Each page has its own interpreter to evaluate zscript codes. If a desktop has multiple pages, then it might have multiple instances of the interpreters (per scripting language). </para></sect3><sect3><title>Multiple scripting Languages in One Page</title>
<para>Each scripting language is associated with one interpreter. Thus, variables and methods defined in one language are not visible to another language. For example, var1 and var2 belong to two different interpreters in the following example.</para>
<programlisting>&lt;zscript language="Java"&gt;&#13;    var1 = 123;    &#13;&lt;/zscript&gt;&#13;&lt;zscript language="JavaScript"&gt;&#13;    var2 = 234;    &#13;&lt;/zscript&gt;&#13;</programlisting></sect3><sect3><title>getVariable versus getZScriptVariable</title>
<para>Variables defined in the namespace can be retrieved by use of the getVariable method.</para>
<para>On the other hand, variables defined in zscript is part of the interpret that interprets it. They are not a part of any namespace. In other words, you can not retrieve them by use of the getVariable method.</para>
<programlisting>&lt;zscript&gt;&#13;    var1 = 123; //var1 belongs to the interpreter, not any namespace    &#13;    page.getVariable("var1"); //returns null    &#13;&lt;/zscript&gt;&#13;</programlisting>
<para>Instead, you have to use getZScriptVariable to retrieve variables defined in zscript. Similarly, you can use getZScriptClass to retrieve classes and getZScriptMethod to retrieve methods defined in zscript. These methods will iterate through all loaded interpreters until the specified one is found.</para>
<para>If you want to search a particular interpreter, you can use the getInterpreter method to retrieve the interpreter first, as follows.</para>
<programlisting>page.getInterpreter("JavaScript").getVariable("some"); //interpreter for JavaScript&#13;page.getInterpreter(null).getVariable("some"); //interpreter for default language&#13;</programlisting></sect3></sect2></sect1><sect1><title>Events</title>
<para>An event (org.zkoss.zk.ui.event.Event) is used to notify application what happens. Each type of event is represented by a distinct class. For example, org.zkoss.zk.ui.event.MouseEvent denotes a mouse activity, such as clicking.</para>
<para>To response to an event, an application must register one or more event listeners to it. There are two ways to register an event listener. One is by specifying the onXxx attribute in the markup language. The other is by calling the addEventListener method for the component or the page you want to listen.</para>
<para>In addition to event triggered by user's activity at the browser, an application could fire events by use of the sendEvent, postEvent and echoEvent methods from the org.zkoss.zk.ui.event.Events class.</para></sect1><sect1><title>Desktops and Event Processing</title>
<para>As mentioned above, a desktop is a collection of pages for serving the same URL request. A desktop is also the scope that an event listener could access.</para>
<para>When an event is fired, it is associate with a desktop. ZK separates events based on the associated desktops, and pipelines events into separated queues. Therefore, events for the same desktop are processed sequentially. On the other hand, events for different desktops are processed in parallel.</para>
<para>An event listener is allowed to access any components of any pages of the desktop associated with the event. It is also allowed to moving components from one page to another as long as they are in the same desktop. On the other hand, it cannot access components belonging to other desktops.</para>
<para>Note: Developers can detach a component from one desktop in one event listener, and then attach it to another desktop in other event listener.</para><sect2><title>Desktops and the Creation of Components</title>
<para>When a component is created in an event listener, it is assigned automatically to the associated desktop of the event being processed. This assignment happens even if the component is not attached to a page. It means that any component you created in an event listener can be used in the same desktop that the listener is handling.</para>
<para>When a component is created in a thread other than any event listener, it doesn't belong to any desktop. In this case, you could attach to any desktop you want as long as the attachment occurs in a proper event listener. Of course, once the component is attached to a desktop, it belongs to the desktop forever.</para>
<para>For most applications, it is rarely necessary to create components in a thread other than event listeners. However, if you have a long operation, you might want to execute it in a background thread. Then, you could prepare the component tree at the background and then add it to a desktop when a proper event is received. Refer to the Long Operations section in the Event Listening and Processing chapter.</para></sect2></sect1><sect1><title>ZUML and XML Namespaces</title>
<para>The ZK User Interface Markup Language (ZUML) is a XML-based language used by developers to describe the visual presentation. ZUML is aimed to separate the dependency of the set of components to use. In other words, different set of components<footnote>
<para>Also known as tags. There is one-to-one mapping between components and tags.</para>
</footnote>, such as XUL and XHTML, could be used simultaneously in the same ZUML page. Different markup languages could be added transparently. If two or more set of components are used in the same page, developers have to use the XML namespaces to distinguish them. Refer to the Component Sets and XML Namespaces section in the ZK User Interface Markup Language chapter if you want to mix multiple component sets, say XUL and XHTML, in the same page.</para>
<para>Tip: Using XML namespaces in ZUML is optional. You need it only if you want to mix two or more.</para></sect1></chapter>
<chapter>
<title>4. The Component Lifecycle</title>
<para>This chapter describes the lifecycles of loading pages and updating pages.</para><sect1><title>The Lifecycle of Loading Pages</title>
<para>It takes four phases for ZK loaders to load and interpret a ZUML page: the Page Initial Phase, the Component Creation Phase, the Event Processing Phase, and the Rendering Phase.</para>
<para>If you create all components manually (with richlet<footnote>
<para>Refer to Developing ZK Applications without ZUML.</para>
</footnote>), then there is no Page Initial Phase.</para><sect2><title>The Page Initial Phase</title>
<para>In this phase, ZK processes the processing instructions, called init. If none of such processing instructions are defined, this phase is skipped.</para>
<para>For each init processing instruction with the class attribute, an instance of the specified class is constructed, and then its doInit method is called. What the class will do, of course, depends on your application requirements.</para>
<programlisting>&lt;?init class="MyInit"?&gt;&#13;</programlisting>
<para>Another form of the init processing instruction is to specify a file containing the scripting codes with the zscript attribute, as follows. Then, the file will be interpreted at the Page Initial phase.</para>
<programlisting>&lt;?init zscript="/my/init.zs"?&gt;&#13;</programlisting>
<para>Notice that the page is not yet attached to the desktop when the Page Initial phase executes.</para></sect2><sect2><title>The Component Creation Phase</title>
<para>In this phase, ZK loader interprets an ZUML page. It creates and initializes components accordingly. It takes several steps as follows.</para>
<orderedlist>
<listitem>
<para>For each element, it examines the if and unless attribute to decide whether it is effective. If not, the element and all of its child elements are ignored.</para>
</listitem>
<listitem>
<para>If the forEach attribute is specified with a collection of items, ZK repeats the following steps for each item in the collection.</para>
</listitem>
<listitem>
<para>Creates a component based on the element name, or by use of the class specified in the use attribute, if any.</para>
</listitem>
<listitem>
<para>Initializes the members one-by-one based on the order that attributes are specified in the ZUML page.</para>
</listitem>
<listitem>
<para>Interprets the nested elements and repeat the whole procedure.</para>
</listitem>
<listitem>
<para>Invokes the afterCompose method if the component implements the org.zkoss.zk.ui.ext.AfterCompose interface<footnote>
<para>The step 3-5 is so-called composing. That is why AfterCompose is named.</para>
</footnote>.</para>
</listitem>
<listitem>
<para>After all children are created, the onCreate event is sent to this component, such that application could initialize the content of some elements later. Notice that the onCreate events are posted for child components first.</para>
</listitem>
</orderedlist>
<para>Note: an developer can perform some application-specific initialization by listening to the onCreate event or implementing AfterCompose. AfterCompose is called in the Component Creation Phase, while the onCreate event is handled by an event listener. </para>
<para>An event listener is free to suspend and resume the execution (such as creating modal dialogs), while AfterCompose is a bit faster since no need to fork another thread.</para></sect2><sect2><title>The Event Processing Phase</title>
<para>In this phase, ZK invokes each listener for each event queued for this desktop one-by-one.</para>
<para>An independent thread is started to invoke each listener, so it could be suspended without affecting the processing of other events.</para>
<para>During the processing, an event listener might fire other events. Refer to the Event Listening and Processing chapter for details.</para></sect2><sect2><title>The Rendering Phase</title>
<para>After all events are processed, ZK renders these components into a regular HTML page and sends this page to the browser.</para>
<para>To render a component, the redraw method is called. The implementation of a component shall not alter any content of the component in this method.</para></sect2></sect1><sect1><title>The Lifecycle of Updating Pages</title>
<para>It takes three phases for ZK AU Engine to process the ZK requests sent from the clients: the Request Processing Phase, the Event Processing Phase, and the Rendering Phase.</para>
<para>ZK AU Engine pipelines ZK requests into queues on a basis of one queue per desktop. Therefore, requests for the same desktop are processed sequentially. Requests for different desktops are processed in parallel. </para><sect2><title>The Request Processing Phase</title>
<para>Depending on the request, ZK AU Engine might update the content of affected components such that their content are the same as what are shown at the client.</para>
<para>Then, it posts corresponding events to the queue.</para></sect2><sect2><title>The Event Processing Phase</title>
<para>This phase is the same as the Event Processing Phase in the Component Creation Phase. It processes events one-by-one in an independent thread.</para></sect2><sect2><title>The Rendering Phase</title>
<para>After all events are processed, ZK renders affected components, generates corresponding ZK responses, and sends these responses back to the client. Then, Client Engine updates the DOM tree at the browser based on the responses.</para>
<para>Whether to redraw the whole visual presentation of a component or to update an attribute at the browser all depend on the implementation of components. It is the job of component developers to balance between interactivity and simplicity.</para></sect2></sect1><sect1><title>The Molds</title>
<para>A component could have different appearance even at the same page. The concept is called mold (aka., template). Developers could dynamically change the mold by use of the setMold method in the Component interface. All components support a mold called default, which is the default value. Some components might have support two or more molds For example, tabbox supports both default and accordion molds.</para>
<programlisting>&lt;tabbox&gt;&lt;!-- if not specified, the default mold is assumed. --&gt;&#13;    &lt;tabs&gt;    <inlinegraphic fileref="images/10000000000000A100000085680109CC.png" align="right"/>&#13;        &lt;tab label="Default"/&gt;        &#13;    &lt;/tabs&gt;    &#13;    &lt;tabpanels&gt;    &#13;        &lt;tabpanel&gt;        &#13;        &lt;tabbox mold="accordion"&gt;        &#13;            &lt;tabs&gt;            &#13;                &lt;tab label="First Accordion"/&gt;                &#13;                &lt;tab label="Second Accordion"/&gt;                &#13;            &lt;/tabs&gt;            &#13;            &lt;tabpanels&gt;            &#13;                &lt;tabpanel&gt;The first panel.&lt;/tabpanel&gt;                &#13;                &lt;tabpanel&gt;The second panel.&lt;/tabpanel&gt;                &#13;            &lt;/tabpanels&gt;            &#13;        &lt;/tabbox&gt;        &#13;        &lt;/tabpanel&gt;        &#13;    &lt;/tabpanels&gt;    &#13;&lt;/tabbox&gt;&#13;</programlisting></sect1><sect1><title>Component Garbage Collection</title>
<para>Unlike many component-based GUI, ZK has no destroy or close method for components. Like W3C DOM, a component is removed from the browser as soon as it is detached from the page. It is shown as soon as it is attached to the page.</para>
<para>More precisely, once a component is detached from a page, it is no longer managed by ZK. If the application doesn't have any reference to it. The memory occupied by the component will be released by JVM's Garbage Collector.</para></sect1></chapter>
<chapter>
<title>5. Event Listening and Processing</title>
<para>This chapter describes how an event is processed.</para><sect1><title>Add Event Listeners by Markup Languages</title>
<para>The simplest way to add an event listener is to declare an attribute in a ZUML page. The value of the attribute for listening an event is any Java codes that could be interpreted by BeanShell.</para>
<programlisting>&lt;window title="Hello" border="normal"&gt;&#13;    &lt;button label="Say Hello" onClick="alert(&amp;quot;Hello World!&amp;quot;)"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect1><sect1><title>Add and Remove Event Listeners by Program</title>
<para>There are two ways to add event listeners by program.</para><sect2><title>Declare a Member</title>
<para>When overriding a component by use of your own class, you could declare a member function to be an event listener as follows.</para>
<para>In a ZUML page, you declare the use attribute to specify what class you want to use instead of the default one. As illustrated below, it asks ZK to use the MyWindow class instead of org.zkoss.zul.Window<footnote>
<para>The default class is defined in lang.xml embedded in zul.jar.</para>
</footnote>.</para>
<programlisting>&lt;window use="MyWindow"&gt;&#13;...&#13;&lt;/window&gt;&#13;</programlisting>
<para>Then, you implement MyWindow.java by extending from the default class as follows.</para>
<programlisting>public class MyWindow extends org.zkoss.zul.Window {&#13;    public void onOK() { //add an event listener    &#13;        ...//handles the onOK event (sent when ENTER is pressed)        &#13;    }    &#13;}&#13;</programlisting>
<para>If you want to retrieve more information about the event, you could declare as follows.</para>
<programlisting>public void onOK(org.zkoss.zk.ui.event.KeyEvent event) {...}&#13;</programlisting>
<para>or</para>
<programlisting>public void onOK(org.zkoss.zk.ui.event.Event event) {...}&#13;</programlisting>
<para>Different events might be associated with different event objects. Refer to Append C for more details.</para></sect2><sect2><title>Add and Remove Event Listeners Dynamically</title>
<para>Developers could use the addEventListener and removeEventListener methods of the org.zkoss.zk.ui.Component interface to dynamically add or remove an event listener. As illustrated below, the event listener to be added dynamically must implement the org.zkoss.zk.ui.event.EventListener interface.</para>
<programlisting>void init(Component comp) {&#13;    ...    &#13;    comp.addEventListener("onClick", new MyListener());    &#13;    ...    &#13;}&#13;class MyListener implements org.zkoss.zk.ui.event.EventListener {&#13;    public void onEvent(Event event) throws UiException {    &#13;        ...//processing the event        &#13;    }    &#13;}&#13;</programlisting></sect2><sect2><title>Deferrable Event Listeners</title>
<para>By default, events are sent the server when it is fired at the client. However, many event listeners are just used to maintain the status at the server, rather than providing visual response to the user. In other words, the events for these listeners have no need to be sent immediately. Rather, they shall be sent at once to minimize the traffic between the client and the server, and then to improve the server's performance. For the sake of the description convenience, we call them the deferrable event listeners.</para>
<para>To make an event listener deferrable, you have to implement the org.zkoss.zk.ui.event.Deferrable interface (with EventListener) and return true for the isDeferrable method as follows.</para>
<programlisting>public class DeferrableListener implements EventListener, Deferrable {&#13;    private boolean _modified;    &#13;    public void onEvent(Event event) {    &#13;        _modified = true;        &#13;    }    &#13;    public boolean isDeferrable() {    &#13;        return true;        &#13;    }    &#13;}&#13;</programlisting>
<para>When an event is fired at the client (e.g., the user selects a list item), ZK won't send the event if no event listener is registered for it or only deferrable listeners are registered. instead, the event is queued at the client.</para>
<para>On the hand, if at least one non-deferrable listener is registered, the event are sent immediately with all queued events to the server at once. No event is lost and the arriving order is preserved.</para>
<para>Tip: Use the deferrable listeners for maintaining the server status, while the non-deferrable listeners for providing the visual responses for the user.</para></sect2><sect2><title>Add and Remove Event Listeners to Pages Dynamically</title>
<para>Developers could add event listeners to a page (org.zkoss.zk.ui.Page) dynamically. Once added, all events of the specified name the are sent to any components of the specified page will be sent to the listener.</para>
<para>All page-level event listeners are non-ASAP. In other words, the isArap method is ignored.</para>
<para>A typical example is to use a page-level event listener to maintain the modification flag as follows.</para>
<programlisting>public class ModificationListener implements EventListener, Deferrable {&#13;    private final Window _owner;    &#13;    private final Page _page;    &#13;    private boolean _modified;    &#13;&#13;    public ModificationListener(Window owner) {    &#13;        //Note: we have to remember the page because unregister might        &#13;        //be called after the owner is detached        &#13;        _owner = owner;        &#13;        _page = owner.getPage();        &#13;        _page.addEventListener("onChange", this);        &#13;        _page.addEventListener("onSelect", this);        &#13;        _page.addEventListener("onCheck", this);        &#13;    }    &#13;    /** Called to unregister the event listener.    &#13;     */    &#13;    public void unregister() {    &#13;        _page.removeEventListener("onChange", this);        &#13;        _page.removeEventListener("onSelect", this);        &#13;        _page.removeEventListener("onCheck", this);        &#13;    }    &#13;    /** Returns whether the modified flag is set.    &#13;     */    &#13;    public boolean isModified() {    &#13;        return _modified;        &#13;    }    &#13;    //-- EventListener --//    &#13;    public void onEvent(Event event) throws UiException {    &#13;        _modified = true;        &#13;    }    &#13;    //-- Deferrable --//    &#13;    public boolean isDeferrable() {    &#13;        return true;        &#13;    }    &#13;}&#13;</programlisting>
<para>Note: Whether to implement the Deferrable interface is optional in this example, because the page's event listeners are always assumed to be deferrable, no matter Deferrable is implemented or not.</para></sect2><sect2><title>The Invocation Sequence</title>
<para>The sequence of invoking event listeners is as follows. Let us assume the onClick event is received.</para>
<orderedlist>
<listitem>
<para>Invoke event listeners for the onClick event one-by-one that are added to the targeting component, if the listeners also implement the org.zkoss.zk.ui.event.Express interface. The first added, the first called.</para>
</listitem>
<listitem>
<para>Invoke the script specified in the onClick attribute of the targeting component, if any.</para>
</listitem>
<listitem>
<para>Invoke event listeners for the onClick event one-by-one that are added to the targeting component, if the listeners don't implement the org.zkoss.zk.ui.event.Express interface. The first added, the first called.</para>
</listitem>
<listitem>
<para>Invoke the onClick member method of the targeting component, if any.</para>
</listitem>
<listitem>
<para>Invoke event listeners for the onClick event one-by-one that are added to the page that the targeting component belongs. The first added, the first called.</para>
</listitem>
</orderedlist>
<para>The org.zkoss.zk.ui.event.Express interface is a decorative interface used to alter the invocation priority of an event listener. Notice that it is meaningless if the event listener is added to pages, instead of components.</para></sect2><sect2><title>Abort the Invocation Sequence</title>
<para>You could abort the calling sequence by calling the stopPropagation method in the org.zkoss.zk.ui.event.Event class. Once one of the event listeners invokes this method, all following event listeners are ignored.</para></sect2></sect1><sect1><title>Send, Post and Echo Events from an Event Listener</title>
<para>In addition to receiving events, an application could communicate among event listeners by posting or sending events to them.</para><sect2><title>Post Events</title>
<para>By use of the postEvent method in the org.zkoss.zk.ui.event.Events class, the application could post an event to the end of the event queue. This method returns immediately after placing the event into the queue. The event will be processed later after all events preceding it have been processed.</para></sect2><sect2><title>Send Events</title>
<para>By use of the sendEvent method in the org.zkoss.zk.ui.event.Events class, the application could ask ZK to process the specified event immediately. This method won't return until all event listeners of the specified event has been processed. The event is processed at the same thread.</para></sect2><sect2><title>Echo Events</title>
<para>By use of the echoEvent method in the org.zkoss.zk.ui.event.Events class, the application could ask the client to echo back the event for processing later. This method returned immediately after queuing the response asking the client to echo back the event.</para>
<para>Notice that, unlike sendEvent and postEvent, the event won't be processed in the current execution. Rather, it is processed later after the client echoes back the event. In other words, the event is processed later after the client has updated its user interfaces. Thus, it is useful to prompt the user before starting a long operation.</para>
<para>For example, you can open a highlighted window and then invoke echoEvent to do the long operation after the client shows the window (and echoes back the event).</para>
<para>For example, we can use the org.zkoss.zk.ui.util.Clients.showBusy method to show the busy message such that the user knows the system is busy. So, the end user will see "Execute..." first and then, after two seconds, "Done." in the following example. If you use postEvent, the end user will see "Execute..." and "Done" at the same time after two seconds.</para>
<programlisting>&lt;window id="w" title="Test echoEvent"&gt;&#13;    &lt;attribute name="onLater"&gt;    &#13;    Thread.sleep(2000);    &#13;    Clients.showBusy(null, false);    &#13;    new Label("Done.").setParent(w);    &#13;    &lt;/attribute&gt;    &#13;&#13;    &lt;button label="echo"&gt;    &#13;    &lt;attribute name="onClick"&gt;    &#13;    Clients.showBusy("Execute...", true);    &#13;    Events.echoEvent("onLater", w, null);    &#13;    &lt;/attribute&gt;    &#13;    &lt;/button&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect2></sect1><sect1><title>Thread Model</title>
<para>For each desktop, events are processed sequentially, so thread model is simple. Like developing desktop applications, you don't need to worry about racing and multi-threading. All you need to do is to register an event listener and process the event when invoked.</para>
<para>Tip: Each event listener executes in an independent thread called event processing thread, while the ZUML page is evaluated in the servlet thread.</para>
<para>Tip: The use of the event processing thread can be disabled such that all events are processed in the Servlet threads. It has a little bit better performance and less integration issues. However, you can not suspend the execution. Refer to the Use the Servlet Thread to Process Events section in the Advanced Features chapter.</para><sect2><title>Suspend and Resume</title>
<para>For advanced applications, you might have to suspend an execution until some condition is satisfied. The wait, notify and notifyAll methods of the org.zkoss.zk.ui.Executions class are designed for such purpose.</para>
<para>When an event listener want to suspend itself, it could invoke wait. Another thread could then wake it up by use of notify or notifyAll, if the application-specific condition is satisfied. The modal dialog is an typical example of using this mechanism.</para>
<programlisting>public void doModal() throws InterruptedException {&#13;    ...Executions.wait(_mutex); //suspend this thread, an event processing thread}    &#13;public void endModal() {&#13;...&#13;    Executions.notify(_mutex); //resume the suspended event processing thread    &#13;}&#13;</programlisting>
<para>Their use is similar to the wait, notify and notifyAll methods of the java.lang.Object class. However, you cannot use the methods of java.lang.Object for suspending and resuming event listeners. Otherwise, all event processing will be stalled for the associated desktop.</para>
<para>Notice that, unlike Java Object's wait and notify, whether to use the synchronized block to enclose Executions' wait and notify is optional. In the above case, we don't have to, because no racing condition is possible. However, if there is an racing condition, you can use the synchronized block as what you do with Java Object's wait and notify.</para>
<programlisting>//Thread 1&#13;public void request() {&#13;    ...    &#13;    synchronized (mutex) {    &#13;        ...//start another thread        &#13;        Executions.wait(mutex); //wait for its completion        &#13;    }    &#13;}&#13;&#13;//Thread 2&#13;public void process() {&#13;    ... //process it asynchronously    &#13;    synchronized (mutex) {    &#13;        Executions.notify(mutex);        &#13;    }    &#13;}&#13;</programlisting></sect2><sect2><title>Long Operations</title>
<para>Events for the same desktop are processed sequentially. In other words, an event handler will block any following handlers. Worse of all, the user, due to the limitation of HTTP, got no hint but the small processing dialog shown at the left-top corner on the browser.</para>
<para>With the echo event and the showBusy method as described in the Echo Events section above, you can provide a more descriptive message and prevent the user from, say, clicking other buttons to slow down the performance further for long operations.</para>
<para>However, blocking users from access might not be acceptable for your applications. To prevent the blocking, you have to, like desktop applications, process the long operation in another working thread. Then, report the processing status back the client continuously.</para>
<para>With ZK, you have four options: server push, suspend and resume, timer, and piggyback.</para><sect3><title>Alternative 1: Server Push</title>
<para>Server push is so-called reverse-Ajax which allows the server to send content to the client actively. With the help of server push, you could send or update the content to the client in the working thread when your pre-defined condition is satisfied. To use server push is simple,and it requires only three steps as follows, </para>
<orderedlist>
<listitem>
<para>Enable server push for the desktop </para>
<para>Invoke Desktop.enableServerPush(boolean bool) to enable server push</para>
</listitem>
<listitem>
<para>Passing components required to be update into the working thread</para>
</listitem>
<listitem>
<para>Invoke the working thread in the desktop </para>
</listitem>
</orderedlist>
<para>Note: You need to install zkex.jar or zkmax.jar to have the server push, unless you have your own implementation of org.zkoss.zk.ui.sys.ServerPush.</para>
<para>Letâs take a look at a real example below. If you want to update the number of client using server push, first of all, you have to enable server push for the desktop and then to invoke the thread as follows, </para>
<programlisting>&#13;&lt;window title="Demo of Server Push"&gt;&#13;&lt;zscript&gt;&#13;    import test.WorkingThread;    &#13;    WorkingThread thread;    &#13;    void startServerpush(){    &#13;        //enable server push        &#13;        desktop.enableServerPush(true);        &#13;            //invoke working thread and passing required component as parameter            &#13;            thread= new WorkingThread(info);            &#13;        thread.start();        &#13;    }    &#13;    void stopServerpush(){    &#13;        //stop the thread        &#13;        thread.setDone();        &#13;        //disable server push        &#13;        desktop.enableServerPush(false);        &#13;    }    &#13;&lt;/zscript&gt;&#13;    &lt;vbox&gt;    &#13;        &lt;button label="Start Server Push" onClick="startServerpush()"/&gt;        &#13;        &lt;button label="Stop Server Push" onClick="stopServerpush()"/&gt;        &#13;    &lt;label id="info"/&gt;    &#13;    &lt;/vbox&gt;    &#13;&lt;/window&gt;&#13;&#13;</programlisting><sect4><title>Security Issue</title>
<para>One thing to notice is that the problem of synchronization which happens when a desktop is accessed by multiple threads at the same time Thus, before accessing the desktop, you have to invoke Executions.activate(Desktop desktop) to get full control of the desktop to avoid this problem, and then release the control of the desktop by invoking Executions.deactivate(Desktop desktop) after the thread finishing its job as follows,</para>
<programlisting>    packagetest;    &#13;&#13;        publicclassWorkingThread extends Thread{        &#13;    private final Desktop _desktop;    &#13;    private final Label _info;    &#13;    private int _cnt;    &#13;    private boolean _ceased;    &#13;        publicWorkingThread(Label info){        &#13;        _desktop = info.getDesktop();        &#13;            _info= info;            &#13;                            }publicvoidrun(){try{                            &#13;                while(!_ceased){                &#13;                Threads.sleep(2000); //Update each two seconds                &#13;                Executions.activate(_desktop); //get full control of desktop                &#13;                    try{                    &#13;                    _info.setValue(Integer.toString(++_cnt));                    &#13;                                            }catch(RuntimeException ex){throw ex;                                            &#13;                    }catch(Error ex){                    &#13;                    throw ex;                    &#13;                }finally{                &#13;                    Executions.deactivate(_desktop);                    &#13;                        //release full control of desktop                        &#13;                }                &#13;            }            &#13;            }catch(InterruptedException ex){            &#13;            }            &#13;                }publicvoidsetDone(){                &#13;        _ceased = true;        &#13;    }}    &#13;</programlisting></sect4><sect4><title>Behind the Scene</title>
<para>The mechanism of server push is implemented using client-polling technique which the client will query the server repetitively to invoke the working thread to do its job, and the frequency of query could be adjusted manually by invoking Executions.setDelay(int min, int max, int factor).</para>
<itemizedlist>
<listitem>
<para>min, the minimal delay to poll the server for any pending server-push threads.</para>
</listitem>
<listitem>
<para>max, the maximum delay to poll the server for any pending server-push threads.</para>
</listitem>
<listitem>
<para>factor, The real delay is the processing time multiplies the delay factor.</para>
</listitem>
</itemizedlist>
<para>Last, one thing to notice is that the frequency will be adjusted automatically depending on the loading of the server</para></sect4></sect3><sect3><title>Alternative 2: Thread Suspend and Resume</title>
<para>With the help of server push, you don't have to take care about the problem of multi threads. However, if you would like to handle this job by yourself, you have to conform with the following rules due to the limitations of HTTP.</para>
<itemizedlist>
<listitem>
<para>Use the wait method in the org.zkoss.zk.ui.Executions class to suspend the event handler itself, after creating a working thread.</para>
</listitem>
<listitem>
<para>Because the working thread is not an event listener, it cannot access any components, unless the components don't belong to any desktop. Thus, you might have to pass necessary information manually before starting the working thread.</para>
</listitem>
<listitem>
<para>Then, the working thread could crush the information and create components as necessary. Just don't reference any component that belongs to any desktop.</para>
</listitem>
<listitem>
<para>Use the notify(Desktop desktop, Object flag) or notifyAll(Desktop desktop, Object flag) method in the org.zkoss.zk.ui.Executions class in the working thread to resume the event handler, after the working thread finishes.</para>
</listitem>
<listitem>
<para>The resumed event handler won't be executed immediately until another event is sent from the client. To enforce an event to be sent, you could use a timer component (org.zkoss.zul.Timer) to fire an event a moment later or periodically. This event listener for this timer could do nothing or update the progress status.</para>
</listitem>
</itemizedlist><sect4><title>Example: A Working Thread Generates Labels Asynchronously</title>
<para>Assume we want create a label asynchronously. Of course, it is non-sense to do such a little job by applying multi-threading, but you can replace the task with sophisticated one.</para>
<programlisting>//WorkingThread&#13;package test;&#13;public class WorkingThread extends Thread {&#13;    private static int _cnt;    &#13;    private Desktop _desktop;    &#13;    private Label _label;    &#13;    private final Object _mutex = new Integer(0);    &#13;    /** Called by thread.zul to create a label asynchronously.    &#13;    *To create a label, it start a thread, and wait for its completion.    &#13;    */    &#13;    public static final Label asyncCreate(Desktop desktop)    &#13;        throws InterruptedException {        &#13;                final WorkingThread worker = new WorkingThread(desktop);synchronized (worker._mutex) { //to avoid racing                &#13;            worker.start();            &#13;            Executions.wait(worker._mutex);            &#13;            return worker._label;            &#13;        }        &#13;    }    &#13;    public WorkingThread(Desktop desktop) {    &#13;        _desktop = desktop;        &#13;        }public void run() {        &#13;            _label = new Label("Execute "+ ++_cnt);            &#13;            synchronized (_mutex) { //to avoid racing            &#13;            Executions.notify(_desktop, _mutex);            &#13;        }        &#13;    }    &#13;}&#13;</programlisting>
<para>Then, we have a ZUML page to invoke this working thread in an event listener, say onClick.</para>
<programlisting>&lt;window id="main" title="Working Thread"&gt;&#13;    &lt;button label="Start Working Thread"&gt;    &#13;        &lt;attribute name="onClick"&gt;        &#13;        timer.start();        &#13;        Label label = test.WorkingThread.asyncCreate(desktop);        &#13;        main.appendChild(label);        &#13;        timer.stop()        &#13;        &lt;/attribute&gt;        &#13;    &lt;/button&gt;    &#13;    &lt;timer id="timer" running="false" delay="1000" repeats="true"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Notice that we have to use a timer to really resume the suspended the event listener (onClick). It looks odd, but it is a must due to the HTTP limitation: to keep Web page alive at the browser, we have to return the response when the event processing is suspended. Then, when the working thread completes its job and notifies the even listener, the HTTP request was already gone. Therefore, we need a way to 'piggyback' the result, which the timer is used for.</para>
<para>More precisely, when the working thread notifies the event listener to resume, ZK only adds it to a waiting list. And, the listener is really resumed when another HTTP request arrives (in the above example, it is the onTimer event)</para>
<para>In this simple example, we do nothing for the onTimer event. For a sophisticated application, you can use it to send back the progressing status.</para></sect4></sect3><sect3><title>Alternative 3: Timer (No Suspend/Resume)</title>
<para>It is possible to implement a long operation without suspend and resume. It is useful if the synchronization codes are going too complex to debug.</para>
<para>The idea is simple. The working thread save the result in a temporary space, and then the onTimer event listener pops the result to the desktop.</para>
<programlisting>//WorkingThread2&#13;package test;&#13;public class WorkingThread2 extends Thread {&#13;    private static int _cnt;    &#13;    private final Desktop _desktop;    &#13;    private final List _result;    &#13;        &#13;    public WorkingThread2(Desktop desktop, List result) {    &#13;        _desktop = desktop;        &#13;        _result = result;        &#13;    }    &#13;    public void run() {    &#13;        _result.add(new Label("Execute "+ ++_cnt));        &#13;    }    &#13;}&#13;</programlisting>
<para>Then, you append the labels in the onTimer event listener.</para>
<programlisting>&lt;window id="main" title="Working Thread2"&gt;&#13;    &lt;zscript&gt;    &#13;        int numPending = 0;        &#13;        List result = Collections.synchronizedList(new LinkedList());        &#13;    &lt;/zscript&gt;    &#13;    &lt;button label="Start Working Thread"&gt;    &#13;        &lt;attribute name="onClick"&gt;        &#13;            ++numPending;            &#13;            timer.start();            &#13;            new test.WorkingThread2(desktop, result).start();            &#13;        &lt;/attribute&gt;        &#13;    &lt;/button&gt;    &#13;    &lt;timer id="timer" running="false" delay="1000" repeats="true"&gt;    &#13;        &lt;attribute name="onTimer"&gt;        &#13;            while (!result.isEmpty()) {            &#13;            main.appendChild(result.remove(0));            &#13;            --numPending;            &#13;            }            &#13;            if (numPending == 0) timer.stop();            &#13;        &lt;/attribute&gt;        &#13;    &lt;/timer&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect3><sect3><title>Alternative 4: Piggyback (No Suspend/Resume, No Timer)</title>
<para>Instead of checking the results periodically, you can piggyback them to the client when the user, say, clicks a button or enters something.</para>
<para>To piggyback, all you need to do is to register an event listener for the onPiggyback event to one of the root components. Then, the listener will be invoked each time ZK Update Engine has processed the events. For example, you can rewrite the codes as follows.</para>
<programlisting>&lt;window id="main" title="Working Thread3" onPiggyback="checkResult()"&gt;&#13;    &lt;zscript&gt;    &#13;    List result = Collections.synchronizedList(new LinkedList());    &#13;&#13;    void checkResult() {    &#13;        while (!result.isEmpty())        &#13;            main.appendChild(result.remove(0));            &#13;    }    &#13;    &lt;/zscript&gt;    &#13;    &lt;button label="Start Working Thread"&gt;    &#13;        &lt;attribute name="onClick"&gt;        &#13;    timer.start();    &#13;    new test.WorkingThread2(desktop, result).start();    &#13;        &lt;/attribute&gt;        &#13;    &lt;/button&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>The advantage of the piggyback is no extra traffic between the client and the server. However, the user sees no updates if he doesn't have any activity, such as clicking or typing. Whether it is proper is really up to the application requirements.</para>
<para>Note: A deferrable event won't be sent to the client immediately, so the onPiggyback event is triggered only if a non-deferrable event is fired. Refer to the Deferrable Event Listeners section.</para></sect3></sect2></sect1><sect1><title>Initialization and Cleanup of Event Processing Thread</title><sect2><title>Initialization Before Processing Each Event</title>
<para>An event listener is executed in an event processing thread. Sometimes, you have to initialize the thread before processing any event.</para>
<para>A typical example is to initialize the thread for the authentication. Some J2EE or Web containers store authentication information in the thread local storage, such that they could re-authenticate automatically when needed.</para>
<para>To initialize the event processing threads, you have to register a class, that implements the org.zkoss.zk.ui.event.EventThreadInit interface, to the listener element in the WEB-INF/zk.xml file<footnote>
<para>It is described more detailedly in Appendix B in the Developer's Reference.</para>
</footnote>.</para>
<para>Once registered, an instance of the specified class is constructed in the main thread (aka., the servlet thread), before starting an event processing thread. Then, the init method of the instance is called at the context of the event processing thread before doing anything else.</para>
<para>Notice that the constructor and the init method are invoked at different thread such that developers could retrieve thread-dependent data from one thread and pass to anther.</para>
<para>Here is an example for the authentication mechanism of JBoss<footnote>
<para>http://www.jboss.org</para>
</footnote>. In this example, we retrieve the information stored in the servlet thread in the constructor. Then, we initialize the event processing thread when the init method is called.</para>
<programlisting>import java.security.Principal;&#13;import org.jboss.security.SecurityAssociation;&#13;import org.zkoss.zk.ui.Component;&#13;import org.zkoss.zk.ui.event.Event;&#13;import org.zkoss.zk.ui.event.EventThreadInit;&#13;&#13;public class JBossEventThreadInit implements EventThreadInit {&#13;    private final Principal _principal;    &#13;    private final Object _credential;    &#13;    /** Retrieve info at the constructor, which runs at the servlet thread. */    &#13;    public JBossEventThreadInit() {    &#13;        _principal = SecurityAssociation.getPrincipal();        &#13;        _credential = SecurityAssociation.getCredential();        &#13;    }    &#13;    //-- EventThreadInit --//    &#13;    /** Initial the event processing thread at this method. */    &#13;    public void init(Component comp, Event evt) {    &#13;        SecurityAssociation.setPrincipal(_principal);        &#13;        SecurityAssociation.setCredential(_credential);        &#13;    }    &#13;}&#13;</programlisting>
<para>Then, in WEB-INF/zk.xml, you have to specify as follows.</para>
<programlisting>&lt;zk&gt;&#13;    &lt;listener&gt;    &#13;        &lt;listener-class&gt;JBossEventThreadInit&lt;/listener-class&gt;        &#13;    &lt;/listener&gt;    &#13;&lt;/zk&gt;&#13;</programlisting></sect2><sect2><title>Cleanup After Processed Each Event</title>
<para>Similarly, you might have to clean up an event processing thread after it has processed an event.</para>
<para>A typical example is to close the transaction, if it is not closed properly.</para>
<para>To cleanup the event processing threads, you have to register a listener class, that implements the org.zkoss.zk.ui.event.EventThreadCleanup interface, to the listener element in the WEB-INF/zk.xml file.</para>
<programlisting>&lt;zk&gt;&#13;    &lt;listener&gt;    &#13;        &lt;listener-class&gt;my.MyEventThreadCleanup&lt;/listener-class&gt;        &#13;    &lt;listener&gt;    &#13;&lt;/zk&gt;&#13;</programlisting></sect2></sect1></chapter>
<chapter>
<title>6. The ZK User Interface Markup Language</title>
<para>The ZK User Interface Markup Language (ZUML) is based on XML. Each XML element describes what component to create. A XML attribute describes an initial values to be assigned to the created component. An XML processing instruction describes how to process the whole page, such as the page title.</para>
<para>Different sets of components are distinguished by XML namespaces. For example, the namespace of XUL is <ulink url="http://www.potix.com/2005/zul">http://www.zkoss.org/2005/zul</ulink>,<footnote>
<para>It was called <ulink url="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul</ulink>. However , many non-XUL features are added, so it is better to use an independent namespace.</para>
</footnote> and that of XHTML is <ulink url="http://www.w3.org/1999/xhtml">http://www.w3.org/1999/xhtml</ulink>.</para><sect1><title>XML</title>
<para>This section provides the most basic concepts of XML to work with ZK. If you are familiar with XML, you could skip this section. If you want to learn more, there are a lot of resources on Internet, such as <ulink url="http://www.w3schools.com/xml/xml_whatis.asp">http://www.w3schools.com/xml/xml_whatis.asp</ulink> and <ulink url="http://www.xml.com/pub/a/98/10/guide0.html">http://www.xml.com/pub/a/98/10/guide0.html</ulink>.</para>
<para>XML is a markup language much like HTML but with stricter and cleaner syntax. It has several characteristics worth to notice.</para><sect2><title>Elements Must Be Well-formed</title>
<para>First, each element must be closed. They are two ways to close an element as depicted below. They are equivalent.</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Description</para>
</entry>
<entry>
<para>Code</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>Close by an end tag:</para>
</entry>
<entry>
<programlisting>&lt;window&gt;&lt;/window&gt;&#13;</programlisting>
</entry>
</row>
<row>
<entry>
<para>Close without an end tag:</para>
</entry>
<entry>
<programlisting>&lt;window/&gt;&#13;</programlisting>
</entry>
</row></tbody></tgroup>
</informaltable>
<para>Second, elements must be properly nested.</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Result</para>
</entry>
<entry>
<para>Code</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>Correct:</para>
</entry>
<entry>
<programlisting>&lt;window&gt; &lt;groupbox&gt; Hello World! &lt;/groupbox&gt;&lt;/window&gt;&#13;</programlisting>
</entry>
</row>
<row>
<entry>
<para>Wrong:</para>
</entry>
<entry>
<programlisting>&lt;window&gt; &lt;groupbox&gt; Hello World! &lt;/window&gt;&lt;/groupbox&gt;&#13;</programlisting>
</entry>
</row></tbody></tgroup>
</informaltable></sect2><sect2><title>Special Character Must Be Replaced</title>
<para>XML use &lt;element-name&gt; to denote an element, so you have to replace special characters. For example, you have to use &amp;lt; to represent the &lt; character.</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Special Character</para>
</entry>
<entry>
<para>Replaced With</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>&lt;</para>
</entry>
<entry>
<para>&amp;lt;</para>
</entry>
</row>
<row>
<entry>
<para>&gt;</para>
</entry>
<entry>
<para>&amp;gt;</para>
</entry>
</row>
<row>
<entry>
<para>&amp;</para>
</entry>
<entry>
<para>&amp;amp;</para>
</entry>
</row>
<row>
<entry>
<para>"</para>
</entry>
<entry>
<para>&amp;quot;</para>
</entry>
</row>
<row>
<entry>
<para>'</para>
</entry>
<entry>
<para>&amp;apos;</para>
</entry>
</row></tbody></tgroup>
</informaltable>
<para>Alternatively, you could ask XML parser not to interpret a piece of text by use of CDATA as follows.</para>
<programlisting>&lt;zscript&gt;&#13;&lt;![CDATA[&#13;void myfunc(int a, int b) {&#13;    if (a &lt; 0 &amp;&amp; b &gt; 0) {    &#13;        //do something        &#13;    }    &#13;]]&gt;&#13;&lt;/zscript&gt;&#13;</programlisting>
<para>It is interesting to notice that backslash (\) is not a special character, so you don't need to escape it at all.</para></sect2><sect2><title>Attribute Values Must Be Specified and Quoted</title>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Result</para>
</entry>
<entry>
<para>Code</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>Correct:</para>
</entry>
<entry>
<programlisting>width="100%"&#13;checked="true"&#13;</programlisting>
</entry>
</row>
<row>
<entry>
<para>Wrong:</para>
</entry>
<entry>
<programlisting>width=100%&#13;checked&#13;</programlisting>
</entry>
</row></tbody></tgroup>
</informaltable></sect2><sect2><title>Comments</title>
<para>A comment is used to leave a note or to temporarily edit out a portion of XML code. To add a comment to XML, use &lt;!-- and --&gt; to escape them.</para>
<programlisting>&lt;window&gt;&#13;&lt;!-- this is a comment and ignored by ZK --&gt;&#13;&lt;/window&gt;&#13;</programlisting></sect2><sect2><title>Character Encoding</title>
<para>It is, though optional, a good idea to specify the encoding in your XML such that the XML parser can interprets it correctly. Note: it must be the first line of the file.</para>
<programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&#13;</programlisting>
<para>In addition to specify the correct encoding, you have to make sure your XML editor supports it as well.</para></sect2><sect2><title>Namespace</title>
<para>Namespaces are a simple and straightforward way to distinguish names used in XML documents. ZK uses XML namespaces to distinguish the component name, such that it is OK to have two components with the same name as long as they are in different namespace. In other words, ZK uses a XML namespace to represent a component set, such that developers could mix two or more component sets in the same page, as depicted below.</para>
<programlisting>&lt;html xmlns="http://www.w3.org/1999/xhtml"&#13;xmlns:x="http://www.zkoss.org/2005/zul"&#13;xmlns:zk="http://www.zkoss.org/2005/zk"&gt;&#13;&lt;head&gt;&#13;    &lt;title&gt;ZHTML Demo&lt;/title&gt;    &#13;&lt;/head&gt;&#13;&lt;body&gt;&#13;    &lt;h1&gt;ZHTML Demo&lt;/h1&gt;    &#13;    &lt;table&gt;    &#13;    &lt;tr&gt;    &#13;        &lt;td&gt;&lt;x:textbox/&gt;&lt;/td&gt;        &#13;        &lt;td&gt;&lt;x:button label="Now" zk:onClick="addItem()"/&gt;&lt;/td&gt;        &#13;    &lt;/tr&gt;    &#13;    &lt;/table&gt;    &#13;    &lt;zk:zscript&gt;    &#13;        void addItem() {        &#13;    }    &#13;    &lt;/zk:zscript&gt;    &#13;&lt;/body&gt;&#13;&lt;/html&gt;&#13;</programlisting>
<para>where</para>
<itemizedlist>
<listitem>
<para>xmlns:x="<ulink url="http://www.potix.com/2005/zul">http://</ulink>
<ulink url="http://www.potix.com/2005/zul">www.zkoss.org/2005/zul</ulink>" specifies a namespace called <ulink url="http://www.potix.com/2005/zul">http://www.zkoss.org/2005/zul</ulink>, and use x to represent this namespace.</para>
</listitem>
<listitem>
<para>xmlns="http://www.w3.org/1999/xhtml" specifies a namespace called http://www.w3.org/1999/xhtml, and use it as the default namespace.</para>
</listitem>
<listitem>
<para>&lt;html&gt; specifies an element called html from the default namespace, i.e., http://www.w3.org/1999/xhtml in this example.</para>
</listitem>
<listitem>
<para>&lt;x:textbox/&gt; specifies an element called textbox from the name space called <ulink url="http://www.potix.com/2005/zul">http://</ulink>
<ulink url="http://www.potix.com/2005/zul">www.zkoss.org/2005/zul</ulink>.</para>
</listitem>
</itemizedlist><sect3><title>Auto-completion with Schema</title>
<para>Many IDEs, such Eclipse, supports auto-completion if XML schema is specified as follows.</para>
<programlisting>&lt;window xmlns="http://www.zkoss.org/2005/zul"&#13;xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&#13;xsi:schemaLocation="http://www.zkoss.org/2005/zul http://www.zkoss.org/2005/zul/zul.xsd"&gt;&#13;</programlisting>
<para>In addition to downloading from <ulink url="http://www.zkoss.org/2005/zul/zul.xsd">http://www.zkoss.org/2005/zul/zul.xsd</ulink>, you can find zul.xsd under the dist/xsd directory in the ZK binary distribution.</para></sect3></sect2></sect1><sect1><title>Conditional Evaluation</title><sect2><title>If and Unless</title>
<para>The evaluation of an element could be conditional. By specifying the if or unless attribute or both, developers could control whether to evaluate the associated element.</para>
<para>In the following example, the window component is created only if a is 1 and b is not 2. If an element is ignored, all of its child elements are ignored, too.</para>
<programlisting>&lt;window if="${a==1}" unless="${b==2}"&gt;&#13;    ...    &#13;&lt;/window&gt;&#13;</programlisting>
<para>The following example controls when to interpret a piece of Java codes.</para>
<programlisting>&lt;textbox id="contributor"/&gt;&#13;&lt;zscript if="${param.contributor}"&gt;&#13;    contributor.label = Executions.getCurrent().getParameter("contributor");    &#13;&lt;/zscript&gt;&#13;</programlisting></sect2><sect2><title>Switch and Case</title>
<para>With the switch and case attributes of the zk element, you can evaluate a portion of a ZK page only if a variable matches a certain value.</para>
<programlisting>&lt;zk switch="${fruit}"&gt;&#13;    &lt;zk case="apple"&gt;    &#13;    Evaluated only if ${fruit} is apple    &#13;</programlisting>
<para>&lt;/zk&gt;</para>
<para>&lt;zk case="${special}"&gt;</para>
<para>Evaluated only if ${fruit} equals ${special}</para>
<para>&lt;/zk&gt;</para>
<para>&lt;zk&gt;</para>
<para>Evaluated only if none of the above cases matches.</para>
<para>&lt;/zk&gt;</para>
<para>&lt;/zk&gt;</para>
<para>ZK Loader will evaluate from the first case to the last case, until it matches the switch condition, which is the value specified in the switch attribute. The evaluation is mutually exclusive conditional. Only the first matched case is evaluated.</para>
<para>The zk element without any case, is the default â i.e., it always matches and is evaluated if all cases above it failed to match.</para><sect3><title>Multiple Cases</title>
<para>You can specify a list of cases in one case attribute, such that a portion of a ZK page has to be evaluated if one of them matches.</para>
<programlisting>&lt;zk switch="${fruit}"&gt;&#13;    &lt;zk case="apple, ${special}"&gt;    &#13;    Evaluated if ${fruit} is either apple or ${special}    &#13;</programlisting>
<para>&lt;/zk&gt;</para>
<para>&lt;/zk&gt;</para></sect3><sect3><title>Regular Expression</title>
<programlisting>&lt;zk switch="${fruit}"&gt;&#13;</programlisting>
<para>&lt;zk case="/ap*.e/"&gt;</para>
<para>Evaluate if the regular expression, ap*.e"., matches the switch condition.</para>
<para>&lt;/zk&gt;</para>
<para>&lt;/zk&gt;</para></sect3><sect3><title>Used with forEach</title>
<para>Like other elements, you can use with the forEach attribute (so are if and unless). The forEach condition is evaluated first, so the following is the same as multiple cases.</para>
<programlisting>&lt;zk case="${each}" forEach="apple, orange"&gt;&#13;</programlisting>
<para>is equivalent to</para>
<para>&lt;zk case="apple, orange"&gt;</para></sect3></sect2><sect2><title>Choose and When</title>
<para>The choose and when attributes provide an alternative way for mutually exclusive conditional evaluation.</para>
<programlisting>&lt;zk choose=""&gt;&#13;    &lt;zk when="${fruit == 'apple'}"&gt;    &#13;</programlisting>
<para>Evaluated if the when condition is true.</para>
<para>&lt;/zk&gt;</para>
<para>&lt;zk&gt;</para>
<para>Evaluated if none of above cases matches.</para>
<para>&lt;/zk&gt;</para>
<para>&lt;/zk&gt;</para>
<para>You don't have to assign any value to the choose attribute, which is used only to identify the range of the mutually exclusive condition evaluation.</para></sect2></sect1><sect1><title>Iterative Evaluation</title>
<para>The evaluation of an element could be iterative. By specifying a collection of objects to the forEach Attribute, developers could control how many time of the associated element shall be evaluated. For sake of description, we call an element is an iterative element if it is assigned with the forEach attribute.</para>
<para>In the following example, the list item is created three times. Each of them has the label called "Best", "Better" and "God", respectively.</para>
<programlisting>&lt;listbox&gt;&#13;&lt;listitem label="${each}" forEach="Best, Better, God"/&gt;&#13;&lt;/listbox&gt;&#13;</programlisting>
<para>If you have a variable holding a collection of objects, then you can specify it directly in the forEach attribute. For example, assume you have a variable called grades as follows.</para>
<programlisting>grades = new String[] {"Best", "Better", "Good"};&#13;</programlisting>
<para>Then, you can iterate them by use of the forEach attribute as follows. Notice that you have to use EL expression to specify the collection. </para>
<programlisting>&lt;listbox&gt;&#13;    &lt;listitem label="${each}" forEach="${grades}"/&gt;    &#13;</programlisting>
<para>&lt;/listitem&gt;</para>
<para>The iteration depends on the type of the specified value of the forEach attribute.</para>
<itemizedlist>
<listitem>
<para>If java.util.Collection, it iterates each element of the collection.</para>
</listitem>
<listitem>
<para>If java.util.Map, it iterates each Map.Entry of the map.</para>
</listitem>
<listitem>
<para>If java.util.Iterator, it iterates each element from the iterator.</para>
</listitem>
<listitem>
<para>If java.util.Enumeration, it iterates each element from the enumeration.</para>
</listitem>
<listitem>
<para>If Object[], int[], short[], byte[], char[], float[] or double[] is specified, it iterates each element from the array.</para>
</listitem>
<listitem>
<para>If null, nothing is generated (it is ignored).</para>
</listitem>
<listitem>
<para>If neither of above types is specified, the associated element will be evaluated once as if a collection with a single item is specified.</para>
</listitem>
</itemizedlist>
<programlisting>&lt;listbox&gt;&#13;&lt;listitem label="${each}" forEach="grades"/&gt;&#13;&lt;/listbox&gt;&#13;</programlisting><sect2><title>The each Variable</title>
<para>During the evaluation, a variable called each is created and assigned with the item from the specified collection. In the above example, each is assigned with "Best" in the first iteration, then "Better" and finally "Good".</para>
<para>Notice that the each variable is accessible both in EL expression and in zscript. ZK will preserve the value of the each variable if it is defined before, and restore it after the evaluation of the associated element.</para></sect2><sect2><title>The forEachStatus Variable</title>
<para>The forEachStatus variable is an instance of org.zkoss.ui.util.ForEachStatus. It holds the information about the current iteration. It is mainly used to get the item of the enclosing element that is also assigned with the forEach attribute.</para>
<para>In the following example, we use nested iterative elements to generate two listboxes.</para>
<programlisting>&lt;hbox&gt;&#13;&lt;zscript&gt;&#13;classes = new String[] {"College", "Graduate"};&#13;grades = new Object[] {&#13;new String[] {"Best", "Better"}, new String[] {"A++", "A+", "A"}&#13;};&#13;&lt;/zscript&gt;&#13;&lt;listbox width="200px" forEach="${classes}"&gt;&#13;&lt;listhead&gt;&#13;&lt;listheader label="${each}"/&gt;&#13;&lt;/listhead&gt;&#13;&lt;listitem label="${forEachStatus.previous.each}: ${each}"&#13;forEach="${grades[forEachStatus.previous.index]}"/&gt;&#13;&lt;/listbox&gt;&#13;&lt;/hbox&gt;&#13;</programlisting>
<para>
<graphic fileref="images/10000000000001A20000004E0C4C66ED.png">2
			
		</graphic>Notice that the forEachStatus variable is accessible both in EL expression and in zscript.</para></sect2><sect2><title>How to Use each and forEachStatus Variables in Event Listeners</title>
<para>It is a bit tricky to use the forEach and forEachStatus variables in event listeners, because they are available only in the Component Creation Phase<footnote>
<para>Refer to the Component Lifecycle chapter for more details.</para>
</footnote>. Thus, the following sample is incorrect: when the onClick listener is called, the each variable is no longer available.</para>
<programlisting>&lt;window title="Countries" border="normal" width="100%"&gt;&#13;    &lt;zscript&gt;&lt;![CDATA[    &#13;    String[] countries = {    &#13;        "China", "France", "Germany", "United Kindom", "United States"};        &#13;    ]]&gt;&lt;/zscript&gt;    &#13;&#13;    &lt;hbox&gt;    &#13;        &lt;button label="${each}" forEach="${countries}"        &#13;            onClick="alert(each)"/&gt; &lt;!-- incorrect!! --&gt;            &#13;    &lt;/hbox&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Notice that the button's label is assigned correctly because it is done at the same phase â the Component Creation Phase.</para>
<para>Also notice that you cannot use EL expressions in the event listener. For example, the following codes fail to execute because the onClick listener is not a legal Java codes (i.e., EL expressions are ignored in zscript).</para>
<programlisting>&lt;button label="${each}" forEach="${countries}"&#13;        onClick="alert(${each})"/&gt; &lt;!-- incorrect!! --&gt;        &#13;</programlisting><sect3><title>A Solution: custom-attributes</title>
<para>The solution is that we have to store the content of each (and forEachStatus) somewhere such that its content is still available when the listener executes. You can store its content anywhere, but there is a simple way to do it as follows.</para>
<programlisting>&lt;window title="Countries" border="normal" width="100%"&gt;&#13;    &lt;zscript&gt;&lt;![CDATA[    &#13;    String[] countries = {    &#13;        "China", "France", "Germany", "United Kindom", "United States"};        &#13;    ]]&gt;&lt;/zscript&gt;    &#13;&#13;    &lt;hbox&gt;    &#13;        &lt;button label="${each}" forEach="${countries}"        &#13;        onClick="alert(self.getAttribute(&amp;quot;country&amp;quot;))"&gt;        &#13;            &lt;custom-attributes country="${each}"/&gt;            &#13;        &lt;/button&gt;        &#13;    &lt;/hbox&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Like button's label, the properties of custom attributes are evaluated in the Component Creation Phase, so you can use each there. Then, it is stored to a custom attribute which will last as long as the component exists (or until being removed programmingly).</para></sect3></sect2></sect1><sect1><title>Load on Demand</title>
<para>By default, ZK creates a component based on what are defined in a ZUML page one-by-one, when loading the page. However, we can defer the creation of a portion of components, until they become visible. This feature is called load-on-demand. It improves the performance, if there are a lot of invisible components at the beginning.</para><sect2><title>Load-on-Demand with the fulfill Attribute</title>
<para>The simplest way to defer the creation of the child components is to use the fulfill attribute. For example, the comboitem component in the following code snippet will not be created, until the combobox component receives the onOpen event, indicating comboitem is becoming visible.</para>
<programlisting>&lt;combobox fulfill="onOpen"&gt;&#13;    &lt;comboitem label="First Option"/&gt;    &#13;&lt;/combobox&gt;&#13;</programlisting>
<para>In other words, if a ZUML element is specified with the fulfill attribute, its child elements won't be processed until the event specified as the value of the fulfill attribute is received.</para>
<para>If the event to trigger the creation of children is targeted to another component, you can specify the target component's identifier after colon as depicted below.</para>
<programlisting>&lt;button id="btn" label="show" onClick="content.visible = true"/&gt;&#13;&lt;div id="content" fulfill="btn.onClick"&gt;&#13;    Any content created automaticall when btn is clicked    &#13;&lt;/div&gt;&#13;</programlisting>
<para>If the components belong to different ID space, you can specify a path after the event name as follows.</para>
<programlisting>&lt;button id="btn" label="show" onClick="content.visible = true"/&gt;&#13;&lt;window id="content" fulfill="../btn.onClick"&gt;&#13;    Any content created automaticall when btn is clicked    &#13;&lt;/window&gt;&#13;</programlisting></sect2><sect2><title>Load-on-Demand with an Event Listener</title>
<para>If you prefer to create the children manually or you need to alter them dynamically, you can listen to the event indicating the children are becoming visible, and then manipulate them in the listener. For example,</para>
<programlisting>&lt;combobox id="combo" onOpen="prepare()"/&gt;&#13;&lt;zscript&gt;&lt;![CDATA[&#13;    void prepare() {    &#13;        if (event.isOpen() &amp;&amp; combo.getItemCount() == 0) {        &#13;            combo.appendItem("First Option");            &#13;        }        &#13;    }    &#13;]]&gt;&lt;/zscript&gt;&#13;</programlisting></sect2></sect1><sect1><title>Implicit Objects</title>
<para>For scripts embedded in a ZUML page, there are a set of implicit objects that enable developers to access components more efficiently. These objects are available to the Java codes included by the zscript element and the attributes for specifying event listeners. They are also available to EL expressions.</para>
<para>For example, self is an instance of org.zkoss.zk.ui.Component to represent the component being processing. In the following example, you could identify the component in an event listener by self.</para>
<programlisting>&lt;button label="Try" onClick="alert(self.label)"/&gt;&#13;</programlisting>
<para>Similarly, event is the current event being processed by an event listener. Thus, the above statement is equivalent to</para>
<programlisting>&lt;button label="Try" onClick="alert(event.target.label)"/&gt;&#13;</programlisting><sect2><title>List of Implicit Objects</title>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Object Name</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>self</para>
</entry>
<entry>
<para>org.zkoss.zk.ui.Component</para>
<para>The component itself.</para>
</entry>
</row>
<row>
<entry>
<para>spaceOwner</para>
</entry>
<entry>
<para>org.zkoss.zk.ui.IdSpace</para>
<para>The space owner of this component. It is the same as self.spaceOwner.</para>
</entry>
</row>
<row>
<entry>
<para>page</para>
</entry>
<entry>
<para>org.zkoss.zk.ui.Page</para>
<para>The page. It is the same as self.page.</para>
</entry>
</row>
<row>
<entry>
<para>desktop</para>
</entry>
<entry>
<para>org.zkoss.zk.ui.Desktop</para>
<para>The desktop. It is the same as self.desktop.</para>
</entry>
</row>
<row>
<entry>
<para>execution</para>
</entry>
<entry>
<para>org.zkoss.zk.ui.Execution</para>
<para>The current execution.</para>
</entry>
</row>
<row>
<entry>
<para>session</para>
</entry>
<entry>
<para>org.zkoss.zk.ui.Session</para>
<para>The session.</para>
</entry>
</row>
<row>
<entry>
<para>application</para>
</entry>
<entry>
<para>org.zkoss.zk.ui.WebApp</para>
<para>The Web application.</para>
</entry>
</row>
<row>
<entry>
<para>componentScope</para>
</entry>
<entry>
<para>java.util.Map</para>
<para>A map of attributes defined in the component. It is the same as the getAttributes method in the org.zkoss.zk.ui.Component interface.</para>
</entry>
</row>
<row>
<entry>
<para>spaceScope</para>
</entry>
<entry>
<para>java.util.Map</para>
<para>A map of attributes defined in the ID space containing this component.</para>
</entry>
</row>
<row>
<entry>
<para>pageScope</para>
</entry>
<entry>
<para>java.util.Map</para>
<para>A map of attributes defined in the page. It is the same as the getAttributes method in the org.zkoss.zk.ui.Page interface.</para>
</entry>
</row>
<row>
<entry>
<para>desktopScope</para>
</entry>
<entry>
<para>java.util.Map</para>
<para>A map of attributes defined in the desktop. It is the same as the getAttributes method in the org.zkoss.zk.ui.Desktop interface.</para>
</entry>
</row>
<row>
<entry>
<para>sessionScope</para>
</entry>
<entry>
<para>java.util.Map</para>
<para>A map of attributes defined in the session. It is the same as the getAttributes method in the org.zkoss.zk.ui.Session interface.</para>
</entry>
</row>
<row>
<entry>
<para>applicationScope</para>
</entry>
<entry>
<para>java.util.Map</para>
<para>A map of attributes defined in the web application. It is the same as the getAttributes method in the org.zkoss.zk.ui.WebApp interface.</para>
</entry>
</row>
<row>
<entry>
<para>requestScope</para>
</entry>
<entry>
<para>java.util.Map</para>
<para>A map of attributes defined in the request. It is the same as the getAttributes method in the org.zkoss.zk.ui.Execution interface.</para>
</entry>
</row>
<row>
<entry>
<para>arg</para>
</entry>
<entry>
<para>java.util.Map</para>
<para>The arg argument passed to the createComponents method in the org.zkoss.zk.ui.Executions class. It is never null.</para>
<para>Notice that arg is available only when creating the components for the included page (the first argument of createComponents). On the other hand, all events, including onCreate, are processed later. Thus, if you want to access arg in the onCreate's listener, use the getArg method of the org.zkoss.zk.ui.event.CreateEvent class.</para>
<para>It is the same as self.desktop.execution.arg.</para>
</entry>
</row>
<row>
<entry>
<para>each</para>
</entry>
<entry>
<para>java.lang.Object</para>
<para>The current item of the collection being iterated, when ZK evaluates an iterative element. An iterative element is an element with the forEach attribute.</para>
</entry>
</row>
<row>
<entry>
<para>forEachStatus</para>
</entry>
<entry>
<para>org.zkoss.zk.ui.util.ForEachStatus</para>
<para>The status of an iteration. ZK exposes the information relative to the iteration taking place when evaluating the iterative element.</para>
</entry>
</row>
<row>
<entry>
<para>event</para>
</entry>
<entry>
<para>org.zkoss.zk.ui.event.Event or derived</para>
<para>The current event. Available for the event listener only.</para>
</entry>
</row></tbody></tgroup>
</informaltable></sect2><sect2><title>Information about Request and Execution</title>
<para>The org.zkoss.zk.ui.Execution interface provides information about the current execution, such as the request parameters. To get the current execution, you could do one of follows.</para>
<itemizedlist>
<listitem>
<para>If you are in a component, use getDesktop().getExecution().</para>
</listitem>
<listitem>
<para>If you don't have any reference to component, page or desktop, use the getCurrent method in the org.zkoss.zk.ui.Executions class.</para>
</listitem>
</itemizedlist></sect2></sect1><sect1><title>Processing Instructions</title>
<para>The XML processing instructions describe how to process the ZUML page. Here we list the most common directives. For the complete list of all directives, please refer to the Developer's Reference.</para><sect2><title>The page Directive</title>
<para>&lt;?page [id="..."] [title="..."] [style="..."] [language="xul/html"] [zscriptLanguage="Java"]?&gt;</para>
<para>It describes attributes of a page.</para>
<para>Note: You can place the page directive in any location of a XML document, but the language attribute is meaningful only if the directive is located at the topmost level, i.e., at the the same level as the root element.</para>
<para>For more available options and descriptions, refer to the Developer's Reference.</para></sect2><sect2><title>The component Directive</title>
<para>&lt;?component name="myName" macroURI="/mypath/my.zul" [apply="composer"] [prop1="value1"] [prop2="value2"]...?&gt;</para>
<para>&lt;?component name="myName" [class="myPackage.myClass"] [extends="existentName"] [moldName="myMoldName"] [moldURI="/myMoldURI"] [apply="composer"] [prop1="value1"] [prop2="value2"]...?&gt;</para>
<para>Defines a new component for a particular page. Components defined in this directive is visible only to the page with this directive. To define components that can be used in any page, use the language addon, which is a XML file defining components for all pages in a Web application<footnote>
<para>Language addon is described in the Component Development Guide.</para>
</footnote>.</para>
<para>There are two formats: by-macro and by-class.</para><sect3><title>The by-macro Format</title>
<para>&lt;?component name="myName" macroURI="/mypath/my.zul" [inline="true|false"] [class="myPackage.myClass"] [prop1="value1"] [prop2="value2"]...?&gt;</para>
<para>Defines a new component based on a ZUML page. It is called a macro component. In other words, once an instance of the new component is created, it creates child components based on the specified ZUML page (the macroURI attribute). For more details, refer to the Macro Components chapter.</para></sect3><sect3><title>The by-class Format</title>
<para>&lt;?component name="myName" [class="myPackage.myClass"] [extends="existentName"] [moldName="myMoldName"] [moldURI="/myMoldURI"] [apply="composer"] [prop1="value1"] [prop2="value2"]...?&gt;</para>
<para>Defines a new component, if the extends attribute is not specified, based on a class. It is called a primitive component. The class must implement the org.zkoss.zk.ui.Component interface.</para>
<para>To define a new component, you have to specify at least the class attribute, which is used by ZK to instantiate a new instance of the component.</para>
<para>In addition to defining a brand-new component, you can override properties of existent components by specifying extends="existentName". In other words, if extends is specified, the definition of the specified component is loaded as the default value and then override only properties that are specified in this directive.</para>
<para>For example, assume you want to define a new component called mywindow by use of MyWindow instead of the default window, org.zkoss.zul.Window in a ZUML page. Then, you can declare it as follows.</para>
<programlisting>&lt;?component name="mywindow" extends="window" class="MyWindow"?&gt;&#13;...&#13;&lt;mywindow&gt;&#13;...&#13;&lt;/mywindow&gt;&#13;</programlisting>
<para>It is equivalent to the following codes.</para>
<programlisting>&lt;window use="MyWindow"&gt;&#13;...&#13;&lt;/window&gt;&#13;</programlisting>
<para>Similarly, you could use the following definition to use OK as the default label and a blue border for all buttons specified in this page.</para>
<programlisting>&lt;?component name="okbutton" extends="button" label="OK"&#13;style="border:1px solid blue"?&gt;&#13;</programlisting>
<para>Notice the new component name can be the same as the existent one. In this case, all instances of the specified type of component will use the initial properties you assigned, as if it hides the existent definition. For example, the following codes make all buttons to have a blue border as default.</para>
<programlisting>&lt;?button name="button" extends="button" style="border:1px solid blue"?&gt;&#13;&lt;button/&gt; &lt;!-- with blue border --&gt;&#13;</programlisting>
<para>For more information, refer to the Developer's Reference.</para></sect3></sect2><sect2><title>The init Directive</title>
<para>&lt;?init class="..." [arg0="..."] [arg1="..."] [arg2="..."] [arg3="..."]?&gt;</para>
<para>&lt;?init zscript="..."?&gt;</para>
<para>There are two formats. The first format is to specify a class that is used to do the application-specific initialization. The second format is to specify a zscript file to do the application-specific initialization.</para>
<para>Since 3.6.2, you can use any (readable) name instead of arg0 and so on. For example,</para>
<programlisting>&lt;?init class="org.zkoss.zkplus.databind.AnnotateDataBinderInit" root="./abc"?&gt;&#13;</programlisting>
<para>The initialization takes place before the page is evaluated and attached to a desktop. Thus, the getDesktop, getId and getTitle method will return null, when initializing. To retrieve the current desktop, you could use the org.zkoss.zk.ui.Execution interface.</para>
<para>You could specify any number of the init directive. If you choose the first format, the specified class must implement the org.zkoss.zk.ui.util.Initator interface. Once specified, an instance of the class is constructed and its doInit method is called, before the page is evaluated.</para>
<para>In addition, the doFinally method is called, after the page has been evaluated. The doCatch method is called if an exception occurs. Thus, this directive is not limited to initialization. You could use it for cleanup and error handling.</para>
<para>If you choose the second format, the zscript file is evaluated.</para>
<para>For more information, refer to the Developer's Reference.</para></sect2><sect2><title>The variable-resolver Directive</title>
<para>&lt;?variable-resolver class="..."?&gt;</para>
<para>Specifies the variable resolver that will be used by the zscript interpreter to resolve unknown variables. The specified class must implement the org.zkoss.xel.VariableResolver interface.</para>
<para>You can specify multiple variable resolvers with multiple variable-resolver directives. The later declared one has higher priority.</para>
<para>The following is an example when using ZK with the Spring framework. It resolves Java Beans declared in the Spring framework, such that you access them directly.</para>
<programlisting>&lt;?variable-resolver class="org.zkoss.zkplus.spring.DelegatingVariableResolver"?&gt;&#13;</programlisting>
<para>Refer to <ulink url="http://zk1.sourceforge.net/smalltalks/springdao1/sdao1.html">Small Talk: </ulink>
<ulink url="http://zk1.sourceforge.net/smalltalks/springdao1/sdao1.html">ZK with Spring DAO and JDBC, Part II</ulink> for more details.</para>
<para>For more information about the attributes, refer to the Developer's Reference.</para></sect2><sect2><title>The import Directive</title>
<para>&lt;?import uri="..."?&gt;&lt;?import uri="..." directives="..."?&gt;</para>
<para>It imports the directives, such as component definitions (&lt;?component?&gt;) and initiators (&lt;?init?&gt;), defined in another ZUML page.</para>
<para>If the directives attribute is omitted, only the component and init directives are imported. If you want to import particular directives, you can specify a list of the names of the directives separated by comma. For example,</para>
<programlisting>&lt;?import uri="/template/taglibs.zul" directives="taglib, xel-method"?&gt;&#13;</programlisting>
<para>The directives that can be imported include component, init, meta, taglib, variable-resolver, and xel-method. If you want to import them all, specify * to the directives attribute. Notice that meta implies both the meta and link directives.</para>
<para>A typical use is that you put a set of component definitions in one ZUML page, and then import it in other ZUML pages, such that they share the same set of component definitions, additional to the system default.</para>
<programlisting>&lt;!-- special.zul: Common Definitions --&gt;&#13;&lt;?init zscript="/WEB-INF/macros/special.zs"?&gt;&#13;&lt;?component name="special" macroURI="/macros/special.zuml" class="Special"?&gt;&#13;&lt;?component name="another" macroURI="/WEB-INF/macros/another.zuml"?&gt;&#13;</programlisting>
<para>where the Special class is assumed to be defined in /WEB-INF/macros/special.zs.</para>
<para>Then, other ZUML pages can share the same set of component definitions as follows.</para>
<programlisting>&lt;?import uri="special.zul"?&gt;&#13;...&#13;&lt;special/&gt;&lt;!-- you can use the component defined in special.zul --&gt;&#13;</programlisting>
<para>Unlike other directives, the import directives must be at the topmost level, i.e., at the the same level as the root element.</para>
<para>For more information, refer to the Developer's Reference.</para></sect2><sect2><title>The link, meta and script Directives</title>
<para>&lt;?link [href="uri"] [name0="value0"] [name1="value1"] [name2="value2"]?&gt;&lt;?meta [name0="value0"] [name1="value1"] [name2="value2"]?&gt;&lt;?script type="text/javascript" [src="uri"] [charset="encoding"] [content="javascript"]?&gt;</para>
<para>These are so-called header elements in HTML. They are generated inside the HEAD element. The meta tags are generated before ZK default JavaScript and CSS files, while the other tags are generated after ZK default JavaScript and CSS files. Currently only HTML-based clients (so-called browsers) support them.</para>
<para>Developers can specify whatever attributes with these header directives. ZK only encodes the URI of the href and src attribute (by use of the encodeURL method of the Executions class). ZK generates all other attributes directly to the client.</para>
<para>Notice that these header directives are effective only for the main ZUL page. In other words, they are ignored if a page is included by another pages or Servlets. Also, they are ignored if the page is a zhtml file.</para>
<programlisting>&lt;?link rel="alternate" type="application/rss+xml" title="RSS feed"&#13;href="/rssfeed.php"?&gt;&lt;?link rel="shortcut icon" type="image/x-icon" href="/favicon.ico"?&gt;&#13;&lt;?link rel="stylesheet" type="text/css" href="~./zul/css/ext.css.dsp"?&gt;&#13;&lt;?script type="text/javascript" src="/js/foo.js"?&gt;&#13;&lt;?script type="text/javascript" content="var foo = true;&#13;</programlisting>
<para>if (zk.ie) foo = false;"?&gt;</para>
<programlisting>&#13;&lt;window title="My App"&gt;&#13;    My content    &#13;&lt;/window&gt;&#13;</programlisting></sect2></sect1><sect1><title>ZK Attributes</title>
<para>ZK attributes are used to control the associated element, other than initializing the data member.</para><sect2><title>The apply Attribute</title>
<para>apply="a-class-name"apply="class1, class2,..."apply="${EL_returns_a_class_or_a_collection_of_classes}"apply="${EL_returns_an_instance_or_a_collection_of_Composer_instances}"</para>
<para>It specifies a class, a collection of classes that are used to initialize the component. The class must implement the org.zkoss.zk.util.Composer interface. And then, you can do the initialization in the doAfterCompose method, since it is called after the component and all its children are instantiated.</para>
<programlisting>&lt;window apply="MyComposer"/&gt;&#13;</programlisting>
<para>In addition, you specify a Composer instance, or a collection of Composer instances by use of EL expressions.</para>
<para>Note: the EL expressions are, if specified, evaluated before the component is instantiated. So you cannot reference to the component. Moreover, the self variable references to the parent component, if any, or the current page, if no parent component, in the EL expressions specified in this attribute.</para>
<para>If you want more control such as handling the exception, you can also implement the org.zkoss.zk.util.ComposerExt interface. </para></sect2><sect2><title>The use Attribute</title>
<para>use="a-class-name"use="${EL_returns_a_class_or_a_class_name_or_a_component}"</para>
<para>It specifies a class to create a component instead of the default one. In the following example, MyWindow is used instead of the default class, org.zkoss.zul.Window.</para>
<programlisting>&lt;window use="MyWindow"/&gt;&#13;</programlisting>
<para>Notice that, if the expression returns a component, the component shall not belong to any page.</para></sect2><sect2><title>The if Attribute</title>
<para>if="${an-EL-expr}"</para>
<para>It specified the condition to evaluate the associated element. In other words, the associated element and all its child elements are ignored, if the condition is evaluated to false.</para></sect2><sect2><title>The unless Attribute</title>
<para>unless="${an-EL-expr}"</para>
<para>It specified the condition not to evaluate the associated element. In other words, the associated element and all its child elements are ignored, if the condition is evaluated to true.</para></sect2><sect2><title>The forEach Attribute</title>
<para>forEach="${an-EL-expr}"forEach="${an-EL-expr},a-value"</para>
<para>There are two formats. First, you specify a value without comma. The value is usually a collection of objects, such that the associated element will be evaluated repeatedly against each object in the collection. If not specified or empty, this attribute is ignored. If non-collection object is specified, it is evaluated only once as if a single-element collection is specified.</para>
<para>Second, you can specify a list of values by separating them with comma. Then, the associated element will be evaluated repeatedly against each value in the list.</para></sect2><sect2><title>The forEachBegin Attribute</title>
<para>forEachBegin="an-interger"forEachBegin="${an-EL-expr}"</para>
<para>It is used with the forEach attribute to specify the index (starting from 0) that the iteration shall begin at. If not specified, the iteration begins at the first element, i.e., 0 is assumed.</para>
<para>If forEachBegin is greater than or equals to the number of elements, no iteration is performed.</para>
<para>Note: forEachStatus.index is absolute with respect to the underlying collection, array or other type. For example, if forEachBegin is 5, then the first value of forEachStatus.index with be 5.</para></sect2><sect2><title>The forEachEnd Attribute</title>
<para>forEachEnd="an-interger"forEachEnd="${an-EL-expr}"</para>
<para>It is used with the forEach attribute to specify the index (starting from 0) the iteration shall ends at (inclusive). If not specified, the iterations ends at the last element.</para>
<para>If forEachEnd is greater than or equals to the number of elements, the iteration ends at the last element.</para></sect2><sect2><title>The fulfill Attribute</title>
<para>fulfill="event-expr"fulfill="event-expr1, event-expr2, event-expr3"fulfill="event-expr=uri-expr"fulfill="event-expr1, event-expr2=uri-expr2"fulfill="=uri_expr"</para>
<para>where event-expr, event-expr1 and others are called event expressions. An event expression is used to identify an event that is targeting a particular component. It can be one of the following formats:</para>
<para>event-nametarget-id.event-nameid1/id2/id3.event-name${el-expr}.event-name</para>
<para>and uri-expr is an URI or an EL expression returning URI. For example,</para>
<para>/my/super.zul${my_super_zul}</para>
<para>It is used to specify when to create the child components. By default (i.e., fulfill is not specified), the child components are created right after its parent component, when the ZUML page is loaded.</para>
<para>If you want to defer the creation of the child components, you can specify the condition with the fulfill attribute. The condition consists of the event name and, optionally, the target component's identifier or path. It means that the child elements won't be processed, until the event is received by, if specified, the target component. If the identifier is omitted, the same component is assumed.</para>
<para>If an EL expression is specified, it must return a component, an identifier or a path.</para>
<para>Refer to the Load on Demand section for more details.</para><sect3><title>With an URI Expression</title>
<para>If the URI expression is specified, ZK loader will create the components defined in the specified URI and assign them as the child components. To create the components defied in the specified URI, ZK actually invokes the createComponents method defined in Executions. For example, ZK loader, in the following example, will invoke Executions.createComponents("/my/super.zul", d, null) to create child components for the d div, when the b button is clicked.</para>
<programlisting>&lt;button id="b" label="open"/&gt;&#13;&lt;div id="d" fulfill="b.onClick=/my/super.zul"&gt;&#13;&lt;/div&gt;&#13;</programlisting>
<para>If the event expression is not specified, ZK loader creates the components immediately - after all properties are assigned and child components are created. In the following example, ZK loader creates combobox first and then create components defined in /my/super.zul.</para>
<programlisting>&lt;div fulfill="=/my/super.zul"&gt;&#13;    &lt;combobox/&gt;    &#13;&lt;/div&gt;&#13;</programlisting></sect3><sect3><title>The onFulfill Event</title>
<para>After ZK applies the fulfill condition, i.e., creates all descendant components, it fires the onFulfill event with an instance of org.zkoss.zk.ui.event.FulfillEvent to notify the component for further processing if any.</para>
<para>For example, if you use the wireVariables method of the org.zkoss.zk.ui.Components class, you might have to call wireVariables again to wire the new components in the onFulfill event.</para>
<programlisting>&lt;div fulfill="b1.onClick, b2.onOpen"&#13;onFulfill="Components.wireVariables(self, controller)"&gt;&#13;</programlisting>
<para>...</para>
<para>&lt;/div&gt;</para></sect3></sect2><sect2><title>The forward Attribute</title>
<para>forward="target_event_expr"forward="oringal_event=target_event_expr"</para>
<para>where target_event_expr is an event expressions. An event expression is used to identify an event that is targeting a particular component. It can be one of the following formats:</para>
<para>event-nametarget-id.event-nameid1/id2/id3.event-name${el-expr}.event-name</para>
<para>It is used to forward an event, that is targeting a particular component, to another component and to another event name. It is called the forward condition.</para>
<para>For example, you can forward the onClick event targeting a button to the window as follows:</para>
<programlisting>&lt;window id="w" use="MyWindow"&gt;&#13;    ...    &#13;    &lt;button lable="Submit" forward="onClick=w.onOK"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Then, you can handle the submission in the MyWindow class as follows:</para>
<programlisting>public class MyWindow extends Window {&#13;    public void onOK() {    &#13;        //handle the submission        &#13;    }    &#13;}&#13;</programlisting>
<para>The original event is optional. If it is omitted, onClick is assumed. Similarly, the target ID is also optional. If omitted, the space owner is assumed. Thus, the above codes can be simplified to the following:</para>
<programlisting>&lt;window id="w" use="MyWindow"&gt;&#13;    ...    &#13;    &lt;button lable="Submit" forward="onOK"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>If you want to forward several events, you can specify these conditions in the forward attribute by separating them with the comma (,):</para>
<programlisting>&lt;textbox forward="onChanging=onUpdating, onChange=some.onUpdate"/&gt;&#13;</programlisting><sect3><title>The Forward Event</title>
<para>The forward event being sent is an instance of the org.zkoss.zk.ui.event.ForwardEvent class. You can retrieve the original event by use of the getOrigin method.</para></sect3><sect3><title>Pass Information to the Forward Event</title>
<para>forward="orginalEvent=targetId1/targetId2.targetEvent(eventData)"</para>
<para>You can pass the application-specific information to the forward event by surrounding it with parenthesis and appending it to the forward condition as shown above. The information can be retrieved by use of the getData method of the ForwardEvent class.</para>
<programlisting>&lt;button forward="onCancel(abort)"/&gt;&#13;</programlisting>
<para>The getData method will return "abort". Of course, you can specify EL expressions to pass whatever type of data you want.</para></sect3><sect3><title>EL Expressions in the Forward Condition</title>
<para>forward="originalEvent=${el-targetPath}.targetEvent(${el-eventData})"</para>
<para>You can use EL expressions when specifying the target ID/path and the application-specific information (aka., the event data).</para>
<programlisting>&lt;button forward='${mainWnd}.onOK(${c:getProperty("status")})'/&gt;&#13;</programlisting>
<para>However, you can not use EL expressions to specify the event names.</para></sect3></sect2></sect1><sect1><title>ZK Elements</title>
<para>ZK elements are used to control ZUML pages other than creating components.</para><sect2><title>The zk Element</title>
<para>&lt;zk&gt;...&lt;/zk&gt;</para>
<para>It is a special element used to aggregate other components. Unlike a real component (say, hbox or div), it is not part of the component tree being created. In other words, it doesn't represent any component. For example,</para>
<programlisting>&lt;window&gt;&#13;    &lt;zk&gt;    &#13;        &lt;textbox/&gt;        &#13;        &lt;textbox/&gt;        &#13;    &lt;/zk&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>is equivalent to</para>
<programlisting>&lt;window&gt;&#13;    &lt;textbox/&gt;    &#13;    &lt;textbox/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Then, what is it used for?</para><sect3><title>Multiple Root Elements in a Page</title>
<para>Due to XML's syntax limitation, we can only specify one document root. Thus, if you have multiple root components, you must use zk as the document root to group these root components.</para>
<programlisting>&lt;?page title="Multiple Root"?&gt;&#13;&lt;zk&gt;&#13;    &lt;window title="First"&gt;    &#13;    ...    &#13;    &lt;/window&gt;    &#13;    &lt;window title="Second" if="${param.secondRequired}"&gt;    &#13;    ...    &#13;    &lt;/window&gt;    &#13;&lt;/zk&gt;&#13;</programlisting></sect3><sect3><title>Iteration Over Versatile Components</title>
<para>The zk element, like components, supports the forEach attribute. Thus, you could use it to generate different type of components depending on the conditions. In the following example, we assume mycols is a collection of objects that have several members, isUseText(), isUseDate() and isUseCombo().</para>
<programlisting>&lt;window&gt;&#13;    &lt;zk forEach="${mycols}"&gt;    &#13;        &lt;textbox if="${each.useText}"/&gt;        &#13;        &lt;datebox if="${each.useDate}"/&gt;        &#13;        &lt;combobox if="${each.useCombo}"/&gt;        &#13;    &lt;/zk&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Attribute Name</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>if</para>
</entry>
<entry>
<para>[Optional][Default: true]</para>
<para>Specifies the condition to evaluate this element.</para>
</entry>
</row>
<row>
<entry>
<para>unless</para>
</entry>
<entry>
<para>[Optional][Default: false]</para>
<para>Specifies the condition not to evaluate this element.</para>
</entry>
</row>
<row>
<entry>
<para>forEach</para>
</entry>
<entry>
<para>[Optional][Default: ignored]</para>
<para>It specifies a collection of objects, such that the zk element will be evaluated repeatedly against each object in the collection. If not specified or empty, this attribute is ignored. If non-collection object is specified, it is evaluated only once as if a single-element collection is specified.</para>
</entry>
</row>
<row>
<entry>
<para>switch</para>
</entry>
<entry>
<para>[Optional][Default: none]</para>
<para>Provide the context for mutually exclusive evaluation. The value specified in this attribute is called the switch condition.</para>
<para>The only allowed children are the zk elements.</para>
</entry>
</row>
<row>
<entry>
<para>case</para>
</entry>
<entry>
<para>[Optional][Default: none]</para>
<para>Provides an alternative within the switch evaluation.</para>
<para>If the value is a string starting and ending with slash, such as /a[p]*/, it is considered as a regular expression, which is used to match the switch condition.</para>
<para>You can specify multiple cases by separating them with comma.</para>
</entry>
</row>
<row>
<entry>
<para>choose</para>
</entry>
<entry>
<para>[Optional][Default: none]</para>
<para>Provide the context for mutually exclusive evaluation.</para>
<para>The only allowed children are the zk elements.</para>
</entry>
</row>
<row>
<entry>
<para>when</para>
</entry>
<entry>
<para>[Optional][Default: none]</para>
<para>Provides an alternative within the choose evaluation.</para>
<para>It is evaluated if the condition matches.</para>
</entry>
</row></tbody></tgroup>
</informaltable></sect3></sect2><sect2><title>The zscript Element</title>
<para>&lt;zscript [language="Java"]&gt;Scripting codes&lt;/zscript&gt;&lt;zscript src="uri" [language="Java"]/&gt;</para>
<para>It defines a piece of the scripting codes, say the Java codes, that will be interpreted when the page is evaluated. The language of the scripting codes is, by default, Java (see below). You can select a different language by use the language attribute.</para>
<para>The zscript element has two formats as shown above. The first format is used to embed the scripting codes directly in the page. The second format is used to reference an external file that contains the scripting codes.</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Attribute Name</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>src</para>
</entry>
<entry>
<para>[Optional][Default: none]</para>
<para>Specifies the URI of the file containing the scripting codes. If specified, the scripting codes will be loaded as if they are embedded directly.</para>
<para>The src attribute supports browser and locale dependent URI. In other words, you can specify ~ or * to denote different context path, browser and locale-dependent information. Refer to the Internationalization chapter for details.</para>
<para>Note: the file shall contain the source codes of the selected language that can be interpreted directly. The encoding must be UTF-8. Don't specify a class file (aka. byte codes).</para>
</entry>
</row>
<row>
<entry>
<para>language</para>
</entry>
<entry>
<para>[Optional][Default: Java or as specified in the page directive][Allowed Values: Java | JavaScript | Ruby | Groovy]</para>
<para>It specifies the scripting language in which the scripting codes are written.</para>
</entry>
</row>
<row>
<entry>
<para>deferred</para>
</entry>
<entry>
<para>[Optional][Default: false]</para>
<para>Whether to defer the evaluation of this element until the first non-deferred zscript codes of the same language need to be evaluated. Refer to the How to Defer the Evaluation section below.</para>
</entry>
</row>
<row>
<entry>
<para>if</para>
</entry>
<entry>
<para>[Optional][Default: true]</para>
<para>Specifies the condition to evaluate this element.</para>
</entry>
</row>
<row>
<entry>
<para>unless</para>
</entry>
<entry>
<para>[Optional][Default: false]</para>
<para>Specifies the condition not to evaluate this element.</para>
</entry>
</row></tbody></tgroup>
</informaltable><sect3><title>How to Defer the Evaluation</title>
<para>ZK loads the interpreter before it is going to evaluate the first zscript codes. For example, the Java interpreter is loaded when the user clicks the button in the following example.</para>
<programlisting>&lt;button onClick="alert(&amp;quot;Hi&amp;quot;)"/&gt;&#13;</programlisting>
<para>On the other hand, the interpreter is loaded when loading the following ZUML page, since the zscript element needs to be evaluated when loading the page.</para>
<programlisting>&lt;window&gt;&#13;    &lt;zscript&gt;    &#13;    void add() {    &#13;    }    &#13;    &lt;/zscript&gt;    &#13;    &lt;button onClick="add()"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>If you prefer to defer the loading of the interpreter, you can specify the deferred option with true. Then, the interpreter won't be loaded, until the user clicks the button.</para>
<programlisting>&lt;window&gt;&#13;    &lt;zscript deferred="true"&gt;    &#13;    void add() {    &#13;    }    &#13;    &lt;/zscript&gt;    &#13;    &lt;button onClick="add()"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Note: The evaluation of EL expressions specified in the if, unless and src attributes are also deferred.</para>
<para>Note: If the component is detached from the page by the time the interpreter is loaded, the zscript codes are ignored. For example, if the window in the previous example no longer belongs to the page, the deferred zscript won't be interpreted.</para></sect3><sect3><title>How to Select a Different Scripting Language</title>
<para>A page could have scripts in multiple different scripting language.</para>
<programlisting>&lt;button onClick="javascript:do_something_in_js()"/&gt;&#13;&lt;zscript language="groovy"&gt;&#13;do_something_in_Groovy();&#13;&lt;/zscript&gt;&#13;</programlisting>
<para>If the scripting language is omitted, Java is assumed. If you'd like to change the default scripting language, use the page directive as follows.</para>
<programlisting>&lt;?page zscriptLanguage="Groovy"?&gt;&#13;&#13;&lt;zscript&gt;&#13;def name = "Hello World!";&#13;&lt;/zscript&gt;&#13;</programlisting></sect3><sect3><title>How to Support More Scripting Languages</title>
<para>Currently ZK supports Java, JavaScript, Ruby and Groovy. However, it is easy to extend:</para>
<orderedlist>
<listitem>
<para>Provides a class that implements the org.zkoss.zk.scripting.Interpreter interface. Instead of implementing it directly, you can derive from the org.zkoss.zk.scripting.util.GenericInterpreter class, if you'd like to handle namespaces directly. Or, you can derive from the org.zkoss.scripting.bsh.BSFInterpreter class, if the interpreter supports BSF (Bean Scripting Framework).</para>
</listitem>
<listitem>
<para>Declares the scripting language in either WEB-INF/zk.xml, or zk/config.xml.</para>
</listitem>
</orderedlist>
<programlisting>&lt;zscript-config&gt;&#13;        &lt;language-name&gt;SuperJava&lt;/language-name&gt;&lt;!-- case insensitive --&gt;        &#13;</programlisting>
<para>&lt;interpreter-class&gt;my.MySuperJavaInterpreter&lt;/interpreter-class&gt;</para>
<programlisting>&lt;/zscript-config&gt;&#13;</programlisting>
<para>Refer to the Developer's Reference for the details about WEB-INF/zk.xml. Refer to the Component Development Guide for the details about zk/config.xml.</para></sect3></sect2><sect2><title>The attribute Element</title>
<para>It defines a XML attribute of the enclosing element. The content of the element is the attribute value, while the name attribute specifies the attribute name. It is useful if the value of an attribute is sophisticated, or the attribute is conditional.</para>
<programlisting>&lt;window&gt;&#13;    &lt;attribute name="title" if="${new}"&gt;Untitled&lt;/attribute&gt;    &#13;    &lt;attribute name="title" unless="${new}"&gt;${title}&lt;/attribute&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>In addition, you can specify a XML fragment as the value of the attribute. The XML fragment is so-called the native content.</para>
<programlisting>&lt;html&gt;&#13;    &lt;attribute name="content"&gt;    &#13;        &lt;ol&gt;        &#13;            &lt;li forEach="${values}"&gt;${each}&lt;/li&gt;            &#13;</programlisting>
<para>&lt;/ol&gt;</para>
<para>&lt;/attribute&gt;</para>
<para>&lt;/html&gt;</para>
<para>where ol and li are part of the native content. They are not ZK components. They will be eventually converted to a String instance and assigned to the specified attribute. If values has three elements, the above example is equivalent to the following:</para>
<programlisting>&lt;html&gt;&#13;    &lt;attribute name="content"&gt;&lt;![CDATA[    &#13;        &lt;ol&gt;        &#13;            &lt;li&gt;${values[0]}&lt;/li&gt;            &#13;            &lt;li&gt;${values[1]}&lt;/li&gt;            &#13;            &lt;li&gt;${values[2]}&lt;/li&gt;            &#13;        &lt;/ol&gt;        &#13;    ]]&gt;&lt;/attribute&gt;    &#13;&lt;/html&gt;&#13;</programlisting>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Attribute Name</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>name</para>
</entry>
<entry>
<para>[Required]</para>
<para>Specifies the attribute name.</para>
</entry>
</row>
<row>
<entry>
<para>trim</para>
</entry>
<entry>
<para>[Optional][Default: false]</para>
<para>Specifies whether to omit the leading and trailing whitespaces of the attribute value.</para>
</entry>
</row>
<row>
<entry>
<para>if</para>
</entry>
<entry>
<para>[Optional][Default: none]</para>
<para>Specifies the condition to evaluate this element.</para>
</entry>
</row>
<row>
<entry>
<para>unless</para>
</entry>
<entry>
<para>[Optional][Default: none]</para>
<para>Specifies the condition not to evaluate this element.</para>
</entry>
</row></tbody></tgroup>
</informaltable></sect2><sect2><title>The variables element</title>
<para>It defines a set of variables. It is equivalent to the setVariable method of Component, if it has a parent component, and Page, if it is declared at the page level.</para>
<para>As depicted below, variables is convenient to assign variables without programming.</para>
<programlisting>&lt;window&gt;&#13;    &lt;variables rich="simple" simple="intuitive"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>It is equivalent to</para>
<programlisting>&lt;window&gt;&#13;    &lt;zscript&gt;    &#13;        self.setVariable("rich", "simple", false);        &#13;        self.setVariable("simple", "intuitive", false);        &#13;    &lt;/zscript&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Of course, you can specify EL expressions for the values.</para>
<programlisting>&lt;window&gt;&#13;    &lt;window id="w" title="Test"&gt;    &#13;        &lt;variables title="${w.title}"/&gt;        <inlinegraphic fileref="images/10000000000000550000003D3AB123E7.png" align="right"/>&#13;        1: ${title}        &#13;    &lt;/window&gt;    &#13;    2: ${title}    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Like Component's setVariable, you can control whether to declare variables local to the current ID space as follows. If not specified, local="false" is assumed.</para>
<programlisting>&lt;variables simple="rich" local="true"/&gt;&#13;</programlisting><sect3><title>The List and Map Values with the composite Attribute</title>
<para>By default, the value is assigned to the variable directly after evaluating EL expressions, if any. For example, "apple, ${more}" is evaluated to "apple, orange", if more is "orange", and assigned to the variable.</para>
<para>If you want to specify a list of values, you can specify the composite attribute with list as follows.</para>
<programlisting>&lt;variables simple="apple, ${more}" composite="list"/&gt;&#13;</programlisting>
<para>Then, it is converted to a list with two elements. The first element is "apple" and the second "orange".</para>
<para>If you want to specify a map of values, you can specify the composite attribute with map as follows.</para>
<programlisting>&lt;variables simple="juice=apple, flavor=${more}" composite="map"/&gt;&#13;</programlisting>
<para>Then, it is converted to a map with two entries. The first entry is ("juice", "apple") and the second ("flavor", "orange").</para></sect3><sect3><title>The null Value</title>
<para>In the following example, var is an empty string.</para>
<programlisting>&lt;variables var=""/&gt;&#13;</programlisting>
<para>To define a variable with the null value, use the following statement.</para>
<programlisting>&lt;variables var="${null}"/&gt;&#13;</programlisting></sect3><sect3><title>Assign a Variable with a Reserved Name</title>
<para>To assign a variable with a reserved name, say, forEach, you have to specify a namespace (which can be anything but ZK namespace) as follows.</para>
<programlisting>&lt;variables m:forEach="a value" xmlns:m="http://whatever.com"/&gt;&#13;</programlisting>
<para>Then, forEach will be considered as a variable rather than the iterative condition.</para></sect3></sect2><sect2><title>The custom-attributes element</title>
<para>It defines a set of custom attributes. Custom attributes are objects associated with a particular scope. Acceptable scopes include component, space, page, desktop, session and application.</para>
<para>As depicted below, custom-attributes is convenient to assign custom attributes without programming.</para>
<programlisting>&lt;window&gt;&#13;    &lt;custom-attributes main.rich="simple" very-simple="intuitive"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>It is equivalent to</para>
<programlisting>&lt;window&gt;&#13;    &lt;zscript&gt;    &#13;        self.setAttribute("main.rich", "simple");        &#13;        self.setAttribute("very-simple", "intuitive");        &#13;    &lt;/zscript&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Moreover, you could specify what scope to assign the custom attributes to.</para>
<programlisting>&lt;window id="main" title="Welcome"&gt;&#13;    &lt;custom-attributes scope="desktop" shared="${main.title}"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>It is equivalent to</para>
<programlisting>&lt;window id="main"&gt;&#13;    &lt;zscript&gt;    &#13;        desktop.setAttribute("shared", main.title);        &#13;    &lt;/zscript&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Notice that EL expression is evaluated against the component being created. Sometime it is subtle to notice. For example, ${componentScope.simple} is evaluated to null, in the following codes. Why? It is a shortcut of &lt;label value="${componentScope.simple}"/&gt;. In other words, the component, self, is the label rather than the window, when the EL is evaluated.</para>
<programlisting>&lt;window&gt;&#13;    &lt;custom-attributes simple="intuitive"/&gt;    &#13;    ${componentScope.simple}    &#13;&lt;/window&gt;&#13;</programlisting>
<para>is equivalent to</para>
<programlisting>&lt;window&gt;&#13;    &lt;custom-attributes simple="intuitive"/&gt;    &#13;    &lt;label value="${componentScope.simple}"/&gt;&lt;!-- self is label not window --&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Tip: Don't confuse &lt;attribute&gt; with &lt;custom-attributes&gt;. They are irrelevant. The attribute element is a way to define a XML attribute of the enclosing element, while the custom-attributes element is used to assign custom attributes to particular scopes.</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Attribute Name</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>scope</para>
</entry>
<entry>
<para>[Optional][Default: component]</para>
<para>Specifies what scope to associate the custom attributes to.</para>
</entry>
</row>
<row>
<entry>
<para>composite</para>
</entry>
<entry>
<para>[Optional][Default: none]</para>
<para>Specifies the format of the value. It could be none, list or map.</para>
<para>Refer to the variables Element section above for more information.</para>
</entry>
</row>
<row>
<entry>
<para>if</para>
</entry>
<entry>
<para>[Optional][Default: none]</para>
<para>Specifies the condition to evaluate this element.</para>
</entry>
</row>
<row>
<entry>
<para>unless</para>
</entry>
<entry>
<para>[Optional][Default: none]</para>
<para>Specifies the condition not to evaluate this element.</para>
</entry>
</row></tbody></tgroup>
</informaltable></sect2></sect1><sect1><title>Component Sets and XML Namespaces</title>
<para>To allow mix two or more component sets in the same ZUML page, ZK uses XML namespaces to distinguish different sets of components. For example, the namespace of XUL is <ulink url="http://www.potix.com/2005/zul/">http://www.zkoss.org/2005/zul</ulink>, and that of XHTML is <ulink url="http://www.w3.org/1999/xhtml">http://www.w3.org/1999/xhtml</ulink>.</para>
<para>On the other hand, most pages uses only one component set. To make such pages easier to write, ZK determines the default namespace based on the extension. For example, the xul and zul extensions imply the XUL namespace. Therefore, developers need only to associate ZUML pages with a proper extension, and then don't need to worry about XML namespace any more.</para><sect2><title>Standard Namespaces</title>
<para>As stated before, each set of components is associated with an unique namespace. However, developers might develop or use additional components from 3rd party, so here we list only the namespaces that are shipped with the ZK distribution.</para>
<informaltable frame="all">
<tgroup cols="1">
<thead>
<row>
<entry>
<para>Namespaces</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>
<ulink url="http://www.potix.com/2005/zul">http://www.zkoss.org/2005/zul</ulink>
</para>
<para>The namespace of the XUL component set.</para>
</entry>
</row>
<row>
<entry>
<para>http://www.w3.org/1999/xhtml</para>
<para>The namespace of the XHTML component set.</para>
</entry>
</row>
<row>
<entry>
<para>http://www.zkoss.org/2005/zk</para>
<para>The ZK namespace. It is the reserved namespace for specifying ZK specific elements and attributes.</para>
</entry>
</row>
<row>
<entry>
<para>http://www.zkoss.org/2005/zk/native</para>
<para>The Native namespace. It is the reserved namespace for specifying inline elements.</para>
<para>Refer to the Work with HTML Tags section for details.</para>
</entry>
</row>
<row>
<entry>
<para>native:URI-of-another-namespace</para>
<para>Alternative way to specify the Native namespace. In addition to identifying a tag belonging to the Native namespace, the namespace following native: is generated to the output sent to the client.</para>
<para>Refer to the Work with HTML Tags section for details.</para>
</entry>
</row>
<row>
<entry>
<para>http://www.zkoss.org/2005/zk/annotation</para>
<para>The Annotation namespace. It is the reserved namespace for specifying the annotations.</para>
<para>Refer to the Annotations section for details</para>
</entry>
</row></tbody></tgroup>
</informaltable>
<para>It is optional to specify namespaces in ZUML pages, until there are conflicts. ZK determined which namespace to use by examining the extension of a ZUML page. For the .zul and .xul extensions, the namespace of XUL is assumed. For html, xhtml and zhtml, the namespace of XHTML is assumed.</para>
<para>To mix with another markup language, you have to use xmlns to specify the correct namespace.</para>
<programlisting>&lt;window xmlns:h="http://www.w3.org/1999/xhtml"&gt;&#13;    &lt;h:div&gt;    &#13;        &lt;button/&gt;        &#13;    &lt;/h:div&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>For the XHTML components, the onClick and onChange attributes are conflicts with ZK's attributes. To resolve, you have to use the reserved namespace, http://www.zkoss.org/2005/zk, as follows.</para>
<programlisting>&lt;html xmlns:x="http://www.zkoss.org/2005/zul" xmlns:zk="http://www.zkoss.org/2005/zk"&gt;&#13;&lt;head&gt;&#13;&lt;title&gt;ZHTML Demo&lt;/title&gt;&#13;&lt;/head&gt;&#13;&lt;body&gt;&#13;    &lt;script type="text/javascript"&gt;    &#13;    function woo() { //running at the browser    &#13;    }    &#13;    &lt;/script&gt;    &#13;    &lt;zk:zscript&gt;    &#13;    void addItem() { //running at the server    &#13;    }    &#13;    &lt;/zk:zscript&gt;    &#13;&lt;x:window title="HTML App"&gt;&#13;     &lt;input type="button" value="Add Item"    &#13;     onClick="woo()" zk:onClick="addItem()"/&gt;    &#13;&lt;/x:window&gt;&#13;&lt;/body&gt;&#13;</programlisting>
<para>In this example, the onClick attribute is a ZHTML's attribute to specify JavaScript codes to run at the browser. On the other hand, the zk:onClick is a reserved attribute for specify a ZK event handler.</para>
<para>Notice that the namespace prefix, zk, is optional for the zscript element, because ZHTML has no such element and ZK has enough information to determine it.</para>
<para>Also notice that you have to specify the XML namespace for the window component, because it is from a different component set.</para></sect2></sect1></chapter>
<chapter>
<title>7. ZUML with the XUL Component Set</title>
<para>This chapter describes the set of XUL components. Unlike other implementation, XUL components of ZK is optimized for co-operating across Internet. Some components might not be totally compliant with XUL standards. For sake of convenience, we sometimes refer them as ZUL components.</para><sect1><title>Basic Components</title><sect2><title>Label</title>
<para>A label component represents a piece of text.</para>
<programlisting>&lt;window border="normal"&gt;<inlinegraphic fileref="images/100000000000006E00000019906EC282.png" align="right"/>&#13;    Hello World    &#13;&lt;/window&gt;&#13;</programlisting>
<para>If you want to specify attribute to a label, you have to specify &lt;label&gt; explicitly as follows.</para>
<programlisting>&lt;window border="normal"&gt;<inlinegraphic fileref="images/100000000000006E00000019F37FCFA0.png" align="right"/>&#13;    &lt;label style="color: red" value="Hello World"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Tip: ZUML is XML, not HTML, so it doesn't accept &amp;nbsp;. However, you can use &amp;#160; instead.</para><sect3><title>The pre, hyphen, maxlength and multiline Properties</title>
<para>You can control how a label is displayed with the pre, hyphen , and maxlength Properties. For example, if you specify pre to be true, all white spaces, such as new line, space and tab, are preserved.</para>
<informaltable frame="all">
<tgroup cols="4">
<thead>
<row>
<entry>
<para>hyphen</para>
</entry>
<entry>
<para>pre</para>
</entry>
<entry>
<para>maxlenth</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>false</para>
</entry>
<entry>
<para>false</para>
</entry>
<entry>
<para>positive</para>
</entry>
<entry>
<para>Truncated the characters that exceeds the specified maxlength.</para>
</entry>
</row>
<row>
<entry>
<para>true</para>
</entry>
<entry>
<para>any</para>
</entry>
<entry>
<para>positive</para>
</entry>
<entry>
<para>If the length of a line exceeds maxlength, the line is hyphenated.</para>
</entry>
</row>
<row>
<entry>
<para>false</para>
</entry>
<entry>
<para>true</para>
</entry>
<entry>
<para>any</para>
</entry>
<entry>
<para>maxlength is ignored.</para>
</entry>
</row>
<row>
<entry>
<para>any</para>
</entry>
<entry>
<para>any</para>
</entry>
<entry>
<para>0</para>
</entry>
<entry>
<para>pyphen is ignored.</para>
</entry>
</row></tbody></tgroup>
</informaltable>
<programlisting>&lt;window border="normal" width="100px"&gt;<inlinegraphic fileref="images/1000000000000066000000B1AC57C5F2.png" align="right"/>&#13;&lt;vbox id="result"&gt;&#13;&lt;/vbox&gt;&#13;    &lt;zscript&gt;&lt;![CDATA[    &#13;    String[] s = {"this is 9", "this is ten more to show",    &#13;    "this framework", "performance is everything"};    &#13;    for (int j = 0; j &lt; s.length; ++j) {    &#13;        Label l = new Label(s[j]);        &#13;        l.maxlength = 9;        &#13;        l.hyphen = true;        &#13;        l.parent = result;        &#13;    }    &#13;    ]]&gt;&lt;/zscript&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>The multiline property is similar to the pre property, except it preserves only the new lines and the white spaces at the beginning of each line.</para></sect3></sect2><sect2><title>Buttons</title>
<para>There are two types of buttons: button and toolbarbutton. They behave similar except the appearance is different. The button component uses HTML BUTTON tag, while the toolbarbutton component uses HTML A tag.</para>
<para>You could assign a label and an image to a button by the label and image properties. If both are specified, the dir property control which is displayed up front, and the orient property controls whether the layout is horizontal or vertical.</para>
<programlisting>&lt;button label="Left" image="/img/folder.gif" width="125px"/&gt;<inlinegraphic fileref="images/1000000000000080000000805ADB57EA.png" align="right"/>&#13;&lt;button label="Right" image="/img/folder.gif" dir="reverse" width="125px"/&gt;&#13;&lt;button label="Above" image="/img/folder.gif" orient="vertical" width="125px"/&gt;&#13;&lt;button label="Below" image="/img/folder.gif" orient="vertical" dir="reverse" width="125px"/&gt;&#13;</programlisting>
<para>In addition to identifying images by URL, you could assign a dynamically generated image to a button by use of the setImageContent method. Refer to the following section for details.</para>
<para>Tip: The setImageContent method is supplied by all components that has the image property. Simplicity put, setImageContent is used for dynamically generated images, while image is used for images identifiable by URL.</para><sect3><title>The onClick Event and href Property</title>
<para>There are two ways to add behaviors to button and toolbarbutton. First, you could specify a listener for the onClick event. Second, you could specify an URL for the href property. If both are specified, the href property has the higher priority, i.e., the onClick event won't be sent.</para>
<programlisting>&lt;button onClick="do_something_in_Java()"/&gt;&#13;&lt;button href="/another_page.zul"/&gt;&#13;</programlisting></sect3><sect3><title>The sendRedirect Method of the org.zkoss.zk.ui.Execution Interface</title>
<para>When processing an event, you could decide to stop processing the current desktop and redirect to anther page by use of the sendRedirect method. In other words, the following two buttons are equivalent (from user's viewpoint).</para>
<programlisting>&lt;button onClick="Executions.sendRedirect(&amp;quot;another.zul&amp;quot;)"/&gt;&#13;&lt;button href="another.zul"/&gt;&#13;</programlisting>
<para>Since the onClick event is sent to the server for processing, you could add more logic before invoking sendRedirect, such as redirecting to another page only if certain condition is satisfied.</para>
<para>On the other hand, the href property is processed completely at the client side. Your application won't be noticed, when users clicks on the button.</para></sect3></sect2><sect2><title>Radio and Radio Group</title>
<para>A radio button is a component that can be turned on and off. Radio buttons are grouped together in a group, called radiogroup. Only one radio button with the same group may be selected at a time.</para>
<programlisting>&lt;radiogroup onCheck="alert(self.selectedItem.label)"&gt;&#13;    &lt;radio label="Apple"/&gt;    &#13;    &lt;radio label="Orange"/&gt;    &#13;    &lt;radio label="Banana"/&gt;    &#13;&lt;/radiogroup&gt;&#13;</programlisting><sect3><title>Versatile Layouts</title>
<para>You can mix radiogroup and radio to have the layout you want, as illustrated below.</para>
<programlisting>&lt;radiogroup&gt;&#13;    &lt;grid&gt;    &#13;    &lt;rows&gt;    &#13;        &lt;row&gt;&lt;radio label="Apple" selected="true"/&gt; Fruit, music or computer&lt;/row&gt;        &#13;        &lt;row&gt;&lt;radio label="Orange"/&gt;&lt;textbox/&gt;&lt;/row&gt;        &#13;        &lt;row&gt;&lt;radio label="Banana"/&gt;&lt;datebox/&gt;&lt;/row&gt;        &#13;    &lt;/rows&gt;    <inlinegraphic fileref="images/10000000000001580000005515B1DDA8.png" align="right"/>&#13;    &lt;/grid&gt;    &#13;&lt;/radiogroup&gt;&#13;</programlisting>
<para>The radio button belongs to the nearest ancestor radiogroup. You can even nest one radio group to another as follow. Each of them operate independently, though there might be some sort of visual overlap.</para>
<programlisting>&lt;radiogroup&gt;&#13;    &lt;grid&gt;    &#13;    &lt;rows&gt;    &#13;        &lt;row&gt;&lt;radio label="Apple" selected="true"/&gt; Fruit, music or computer&lt;/row&gt;        &#13;        &lt;row&gt;&lt;radio label="Orange"/&gt;        &#13;            &lt;radiogroup&gt;            &#13;            &lt;radio label="Small"/&gt;            &#13;            &lt;radio label="Large" selected="true"/&gt;            &#13;            &lt;/radiogroup&gt;            &#13;        &lt;/row&gt;        &#13;        &lt;row&gt;&lt;radio label="Banana"/&gt;&lt;datebox/&gt;&lt;/row&gt;        &#13;    &lt;/rows&gt;    <inlinegraphic fileref="images/100000000000019900000056513BCA33.png" align="right"/>&#13;    &lt;/grid&gt;    &#13;&lt;/radiogroup&gt;&#13;</programlisting></sect3></sect2><sect2><title>Image</title>
<para>An image component is used to display an image at the browser. There are two ways to assign an image to an image component. First, you could use the src property to specify a URI where the image is located. This approach is similar to what HTML supports. It is useful if you want to display a static image, or any image that can be identified by URL.</para>
<programlisting>&lt;image src="/some/my.jpg"/&gt;&#13;</programlisting><sect3><title>Locale Dependent Image</title>
<para>Like using any other properties that accept an URI, you could specify "*" for identifying a Locale dependent image. For example, if you have different image for different Locales, you could use as follows.</para>
<programlisting>&lt;image src="/my*.png"&#13;</programlisting>
<para>Then, assume one of your users is visiting your page with de_DE as the preferred Locale. Zk will try to locate the image file called /my_de_DE.png. If not found, it will try /my_de.png and finally /my.png.</para>
<para>Refer to the Browser and Locale Dependent URI section in the Internationalization chapter for details.</para>
<para>Second, you could use the setContent method to assign the content of an image into an image component directly. Once assigned, the image displayed at the browser is updated automatically. This approach is useful if an image is generated dynamically.</para>
<para>For example, you could generate a map for the location specified by a user as below.</para>
<programlisting>Location: &lt;textbox onChange="updateMap(self.value)"/&gt;&#13;Map: &lt;image id="image"/&gt;&#13;&lt;zscript&gt;&#13;    void updateMap(String location) {    &#13;        if (location.length() &gt; 0)        &#13;            image.setContent(new MapImage(location));            &#13;    }    &#13;&lt;/zscript&gt;&#13;</programlisting>
<para>In the above example, we assume you have a class called MapImage for generating a map of the specified location, which is so-called business logic.</para>
<para>Notice that the image component accepts the content only in the org.zkoss.image.Image interface. If the image generated by your tool is not in this format, you could use the org.zkoss.image.AImage class to wrap a binary array of data, a file or an input stream into the Image interface.</para>
<para>In traditional Web applications, caching a dynamically generated image is complicate. With the image component, you don't need to worry about it. Once the content of an image is assigned, it belongs to the image component, and the memory it occupies will be released automatically after the image component is no long used.</para>
<para>Tip: If you want to display the contents, say PDF, other than image and audio, you could use the iframe component. Refer to the relevant section for details.</para></sect3></sect2><sect2><title>Imagemap</title>
<para>A imagemap component is a special image. It accepts whatever properties an image component accepts. However, unlike image, if a user clicks on the image, an onClick event is sent back to the server with the coordinates of the mouse position. In contrast, the onClick event sent by image doesn't contain the coordinates.</para>
<para>The coordinates of the mouse position are screen pixels counted from the upper-left corner of the image beginning with (0, 0). It is stored as instance of org.zkoss.zk.ui.event.MouseEvent. Once the application receives the onClick event, it could examine the coordinates of the mouse position from the getX and getY methods.</para>
<para>For example, if a user clicks 208 pixels over and 205 pixels down from the upper-left corner of the image displayed from the following statement.</para>
<programlisting>&lt;imagemap src="/img/sun.jpg" onClick="alert(event.x + &amp;quot;, &amp;quot; +event.y)"/&gt;&#13;</programlisting>
<para>
<graphic fileref="images/10000000000001AC00000155E1243DA6.png">2
			
		</graphic>Then, the user gets the result as depicted below.</para>
<para/>
<para>The application usually uses the coordinates to determine where a user has clicked, and then response accordingly.</para><sect3><title>Area</title>
<para>Instead of processing the coordinates by the application itself, developers could add the area components as the children of a imagemap component.</para>
<programlisting>&lt;imagemap src="/img/sun.jpg" onClick="alert(event.area)"&gt;&#13;&lt;area id="First" coords="0, 0, 100, 100"/&gt;&#13;&lt;area id="Second" shape="circle" coords="200, 200, 100"/&gt;&#13;&lt;/imagemap&gt;&#13;</programlisting>
<para>Then, the imagemap component will translate the coordinates of the mouse position to a logical name: the identifier of the area that users has clicked.</para>
<para>For example, if users clicks at (150, 150), then the user gets the result as depicted blow.</para>
<para>
<graphic fileref="images/10000000000001D200000103800B52A3.png">2
			
		</graphic>
</para></sect3><sect3><title>The shape Property</title>
<para>An area component supports three kinds of shapes: circle, polygon and rectangle. The coordinates of the mouse position are screen pixels counted from the upper-left corner of the image beginning with (0, 0).</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Shape</para>
</entry>
<entry>
<para>Coordinates / Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>circle</para>
</entry>
<entry>
<para>coords="x, y, r"</para>
<para>where x and y define the position of the center of the circle and r is its radius in pixels.</para>
</entry>
</row>
<row>
<entry>
<para>polygon</para>
</entry>
<entry>
<para>coords="x1, y1, x2, y2, x3, y3..."</para>
<para>where each pair of x and y define a vertex of the polygon. At least thee pairs of coordinates are required to defined a triangle. The polygon is automatically closed, so it is not necessary to repeat the first coordinate at the end of the list to close the region.</para>
</entry>
</row>
<row>
<entry>
<para>rectangle</para>
</entry>
<entry>
<para>coords="x1, y1, x2, y2"</para>
<para>where the first coordinate pair is one corner of the rectangle and the other pair is the corner diagonally opposite. A rectangle is just a shortened way of specifying a polygon with four vertices.</para>
</entry>
</row></tbody></tgroup>
</informaltable>
<para>If the coordinates in one area component overlap with another, the first one takes precedence.</para></sect3></sect2><sect2><title>Audio</title>
<para>An audio component is used to play the audio at the browser. Like image, you could use the src property to specify an URL of an audio resource, or the setContent method to specify a dynamically generated audio.</para>
<para>Depending on the browser and the audio plugin, developers might be able to control the play of an audio by the play, stop and pause methods. Currently, Internet Explorer with Media Player is capable of such controls.</para></sect2><sect2><title>Input Controls</title>
<para>A set of input controls are supported in the XUL component set: textbox, intbox, decimalbox, doublebox, datebox, combobox, and bandbox. They are used to let users input different types of data.</para>
<para>
<graphic fileref="images/1000000000000160000000A52BD72F03.png">2
			
		</graphic>
</para>
<programlisting>&lt;zk&gt;&#13;    &lt;textbox/&gt;    &#13;    &lt;datebox/&gt;    &#13;&lt;/zk&gt;&#13;</programlisting>
<para>Tip: combobox and bandbox are special input boxes. They shares the common properties described here. Their unique features will be discussed later in the Comboboxes and Bandboxes section.</para><sect3><title>The type Property</title>
<para>You could specify the type property with password for the textbox components, such that what user has entered won't be shown.</para>
<programlisting>Username: &lt;textbox/&gt;&#13;Password: &lt;textbox type="password"/&gt;&#13;</programlisting></sect3><sect3><title>The format Property</title>
<para>You could control the format of an input control by the format filed. The default is null. For datebox, it means yyyy/MM/dd. For intbox and decimalbox, it means no formating at all.</para>
<programlisting>&lt;datebox format="MM/dd/yyyy"/&gt;&#13;&lt;decimalbox format="#,##0.##"/&gt;&#13;</programlisting>
<para>Like any other properties, you could change the format dynamically, as depicted below.</para>
<programlisting>&lt;datebox id="db"/&gt;&lt;button label="set MM-dd-yyyy" onClick="db.setFormat(&amp;quot;MM-dd-yyyy&amp;quot;)"/&gt;&#13;</programlisting>
<para>Mouseless Entrydatebox</para>
<itemizedlist>
<listitem>
<para>Alt+DOWN to pop up the calendar.</para>
</listitem>
<listitem>
<para>LEFT, RIGHT, UP and DOWN to change the selected day from the calendar.</para>
</listitem>
<listitem>
<para>ENTER to activate the selection by copying the selected day to the datebox control.</para>
</listitem>
<listitem>
<para>Alt+UP or ESC to give up the selection and close the calendar.</para>
</listitem>
</itemizedlist></sect3><sect3><title>Constraints</title>
<para>You could specify what value to accept for input controls by use of the constraint property. It could a combination of no positive, no negative, no zero, no empty, no future, no past, no today, and a regular expression. The first three constraints are applicable only to intbox and decimalbox. The constraints of no future, no past, and no today are applicable only to datebox. The constraint of no empty is applicable to any type of components. The constraint of regular expressions is applicable only to String-type input components, such as textbox., combobox and bandbox.</para>
<para>To specify two or more constraints, use comma to separate them as follows.</para>
<programlisting>&lt;intbox constraint="no negative,no zero"/&gt;&#13;</programlisting>
<para>To specify a regular expression, you could have to use / to enclose the regular expression as follows. </para>
<programlisting>&lt;textbox constraint="/.+@.+\.[a-z]+/"/&gt;&#13;</programlisting>
<para>Notes:</para>
<itemizedlist>
<listitem>
<para>The above statement is XML, so do not use \\ to specify a backslash. On the other hand, it is necessary, if writing in Java.</para>
</listitem>
</itemizedlist>
<programlisting>new Textbox().setContraint("/.+@.+\\.[a-z]+/");&#13;</programlisting>
<itemizedlist>
<listitem>
<para>It is allowed to mix regular expression with other constraints by separating them with comma.</para>
</listitem>
</itemizedlist>
<para>You prefer to display an application dependent message instead of default one, you could append the constraint with colon and the message you want to display when failed.</para>
<programlisting>&lt;textbox constraint="/.+@.+\.[a-z]+/: e-mail address only"/&gt;&#13;</programlisting>
<para>&lt;datebox constraint="no empty, no future: now or never"/&gt;</para>
<para>Notes:</para>
<itemizedlist>
<listitem>
<para>The error message, if specified, must be the last element and start with colon.</para>
</listitem>
<listitem>
<para>To support multilingual, you could use the l function as depicted in the Internationalization chapter.</para>
</listitem>
</itemizedlist>
<programlisting>&lt;textbox constraint="/.+@.+\.[a-z]+/: ${c:l('err.email.required')}"/&gt;&#13;</programlisting></sect3><sect3><title>Constraints for Datebox</title>
<para>In addition to the constraints described in the above section (such as no future and regular expressions), datebox supports a range of dates. For example,</para>
<programlisting>&lt;datebox constraint="between 20071225 and 20071203"/&gt;&#13;&lt;datebox constraint="before 20071225"/&gt;&#13;&lt;datebox constraint="after 20071225"/&gt;&#13;</programlisting>
<para>Notices</para>
<orderedlist>
<listitem>
<para>The format of the date in the constraint is yyyMMdd. It is independent of the locale.</para>
</listitem>
<listitem>
<para>The date specified in the constraint is included. For example, "before 20071225" includes December 25, 2007 and every days before it.</para>
</listitem>
<listitem>
<para>The constraint is actually represented with an instance of the org.zkoss.zul.SimpleDateConstraint class. You can retrieve the parsed beginning and ending date with the getBeginDate and getEndDate methods.</para>
</listitem>
</orderedlist>
<para>((SimpleDateConstraint)datebox.getConstraint()).getBeginDate();</para></sect3><sect3><title>Custom Constraints</title>
<para>If you want more sophisticated constraint, you could specify an object which implements the org.zkoss.zul.Constraint interface.</para>
<programlisting>&lt;window title="Custom Constraint"&gt;&#13;    &lt;zscript&gt;&lt;![CDATA[    &#13;Constraint ctt = new Constraint() {&#13;    public void validate(Component comp, Object value) throws WrongValueException {    &#13;        if (value =e= null || ((Integer)value).intValue() &lt; 100)        &#13;            throw new WrongValueException(comp, "At least 100 must be specified");            &#13;    }    &#13;}&#13;    ]]&gt;&lt;/zscript&gt;    &#13;    &lt;intbox constraint="${ctt}"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>You could implement your constraint into a Java class, say my.EmailValidator, then:</para>
<programlisting>&lt;?taglib uri="http://www.zkoss.org/dsp/web/core" prefix="c"?&gt;&#13;&lt;textbox constraint="${c:new('my.EmailValidator')}"/&gt;&#13;</programlisting><sect4><title>org.zkoss.zk.ui.WrongValueException</title>
<para>In the above example, we use org.zkoss.zk.ui.WrongValueException to denote an error. As depicted, you have to specify the first argument with the component that causes the error, and then the second argument with the error message.</para>
<para>You could throw this exception anytime, such as when an onChange event is received as follows.</para>
<programlisting>&lt;textbox&gt;<inlinegraphic fileref="images/100000000000010500000030B13C47C7.png" align="right"/>&#13;    &lt;attribute name="onChange"&gt;    &#13;        if (!self.value.equals("good")) {        &#13;            self.value = "try again";            &#13;            throw new WrongValueException(self, "Not a good answer!");            &#13;        }        &#13;    &lt;/attribute&gt;    &#13;&lt;/textbox&gt;&#13;</programlisting></sect4><sect4><title>Custom Way to Display the Error Messages</title>
<para>Instead of the default error box as shown in the previous example, you can provide a custom look by implementing the org.zkoss.zul.CustomConstraint interface with Constraint. CustomConstraint has one method, showCustomError, which is called when an exception is thrown or when the validation is correct. Here is an example,</para>
<programlisting>&lt;window title="Custom Constraint" border="normal"&gt;&#13;    &lt;zscript&gt;&lt;![CDATA[    &#13;class MyConst implements Constraint, CustomConstraint {&#13;    //Constraint//    &#13;    public void validate(Component comp, Object value) {    &#13;        if (value == null || ((Integer)value).intValue() &lt; 100)        &#13;            throw new WrongValueException(comp, "At least 100 must be specified");            &#13;    }    &#13;    //CustomConstraint//    &#13;    public void showCustomError(Component comp, WrongValueException ex) {    &#13;        errmsg.setValue(ex != null ? ex.getMessage(): "");        &#13;    }    &#13;}&#13;Constraint ctt = new MyConst();&#13;    ]]&gt;&lt;/zscript&gt;    &#13;    &lt;hbox&gt;    &#13;        Enter a number at least 100:        &#13;        &lt;intbox constraint="${ctt}"/&gt;        &#13;        &lt;label id="errmsg"/&gt;        <inlinegraphic fileref="images/100000000000023D00000039116921E8.png" align="right"/>&#13;    &lt;/hbox&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect4><sect4><title>Improve Responsiveness</title>
<para>The responsiveness can be improved by validating more constraints at the client. To do this, you have to implement the org.zkoss.zul.ClientConstraint interface with Constraint. If you have done all validations at the client, you can return true for the isClientComplete method, and then there will be no server callback at all.</para>
<para>You can also customize the display of the error message with pure JavaScript codes a the client by providing a function called Validate_errorbox. For example,</para>
<programlisting>&lt;script type="text/javascript"&gt;&lt;![CDATA[&#13;    //Running at the browser    &#13;    window.Validate_errorbox = function (id, boxid, msg) {    &#13;        var html = '&lt;div style="display:none;position:absolute" id="'        &#13;</programlisting>
<para>+boxid+'"&gt;'+zk.encodeXML(msg, true)+'&lt;/div&gt;';</para>
<programlisting>            document.body.insertAdjacentHTML("afterbegin", html);return $e(boxid);}            &#13;]]&gt;&lt;/script&gt;&#13;</programlisting>
<para>Note: script specifies the script codes running at the browser, while zscript specifies codes running at the server.</para>
<para>Note: If CustomConstraint is also implemented, ClientConstraint will be ignored since all validations are done at the server. In other words, if you want to use ClientConstraint to improve responsiveness, overriding Validate_errorbox is the only way to customize the display of the error messsage.</para></sect4></sect3><sect3><title>The onChange Event</title>
<para>An input control notifies the application with the onChange event if its content is changed by the user.</para>
<para>Notice that, when the onChange's event listener is invoked, the value has been set. Thus, it is too late if you want to reject illegal value in the onChange's event listener, unless you restore the value properly. Rather, it is recommended to use a constraint as described in the Custom Constraints section.</para></sect3><sect3><title>The onChanging event</title>
<para>An input control also notifies the application with the onChanging event, when user is changing the content.</para>
<para>Notice that, when the onChanging's listener is invoked, the value is not set yet. In other worlds, the value property still remain in the old value. To retrieve what the user is entering, you have to access the value property of the event as follows.</para>
<programlisting>&lt;grid&gt;&#13;    &lt;rows&gt;    &#13;        &lt;row&gt;The onChanging textbox:         &#13;            &lt;textbox onChanging="copy.value = event.value"/&gt;&lt;/row&gt;            &#13;        &lt;row&gt;Instant copy:        &#13;            &lt;textbox id="copy" readonly="true"/&gt;&lt;/row&gt;            &#13;    &lt;/rows&gt;    &#13;&lt;/grid&gt;&#13;</programlisting>
<para>It is too early if you want to reject illegal value in the onChanging's event listener, because user may not complete the change yet. Rather, it is recommended to use a constraint as described in the Custom Constraints section.</para></sect3></sect2><sect2><title>Calendar</title>
<para>A calendar displays a 'flat' calendar and allows user to select a day from it.</para>
<para>
<graphic fileref="images/10000000000001310000009425D8FF0B.png">2
			
		</graphic>
</para>
<programlisting>&lt;hbox&gt;&#13;    &lt;calendar id="cal" onChange="in.value = cal.value"/&gt;    &#13;    &lt;datebox id="in" onChange="cal.value = in.value"/&gt;    &#13;&lt;/hbox&gt;&#13;</programlisting><sect3><title>The value Property and the onChange Event</title>
<para>Like input controls, calendar supports the value property to let developers set and retrieve the selected day. In addition, developers could listen to the onChange event to process it immediately, if necessary.</para></sect3><sect3><title>The compact Property</title>
<para>
<graphic fileref="images/10000000000000BC0000007A5A0A2B82.png">2
			
		</graphic>A calendar supports two different layouts and you can control it by use of the compact property.</para>
<programlisting>&lt;calendar compact="true"/&gt;&#13;</programlisting>
<para>The default value depends on the current Locale.</para></sect3></sect2><sect2><title>Progressmeter</title>
<para>A progress meter is a bar that indicates how much of a task has been completed. The value property must be in the range between 0 and 100.</para>
<programlisting>&lt;progressmeter value="10"/&gt;    <inlinegraphic fileref="images/100000000000006C0000000F34868BEC.png" align="right"/>&#13;</programlisting></sect2><sect2><title>Slider</title>
<para>A slider is used to let user specifying a value by scrolling.</para>
<programlisting>&lt;slider id="slider" onScroll="Audio.setVolume(slider.curpos)"/&gt;<inlinegraphic fileref="images/100000000000006A000000106DB6D54E.png" align="right"/>&#13;</programlisting>
<para>A slider accepts a range of value starting from 0 to 100. You could change the maximal allowed value by the maxpos property.</para></sect2><sect2><title>Timer</title>
<para>A timer is an invisible component used to send the onTimer event to the server at the specified time or period. You could control a timer by the start and stop methods.</para>
<programlisting>&lt;window title="Timer demo" border="normal"&gt;<inlinegraphic fileref="images/10000000000000E50000003490E811F6.png" align="right"/>&#13;    &lt;label id="now"/&gt;    &#13;    &lt;timer id="timer" delay="1000" repeats="true"    &#13;        onTimer="now.setValue(new Date().toString())"/&gt;        &#13;    &lt;separator bar="true"/&gt;    &#13;    &lt;button label="Stops timer" onClick="timer.stop()"/&gt;    &#13;    &lt;button label="Starts timer" onClick="timer.start()"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect2><sect2><title>Paging</title>
<para>A paging component is used to separate long content into multiple pages. For example, assume that you have 100 items and prefer to show 20 items at a time, then you can use the paging components as follows.</para>
<programlisting>&lt;paging totalSize="100" pageSize="20"/&gt;<inlinegraphic fileref="images/100000000000007A00000013F689AD21.png" align="right"/>&#13;</programlisting>
<para>Then, when a user clicks on the hyperlinks, the onPaging event is sent with an instance of org.zkoss.zul.event.PagingEvent to the paging component. To decide which portion of your 100 items are visible, you shall add a listener to the paging component.</para>
<programlisting>&lt;paging id="paging"/&gt;&lt;zscript&gt;List result = new SearchEngine().find("ZK");//assume SearchEngine.find() will return a list of items.paging.setTotalSize(result.size());paging.addEventListener("onPaging", new EventListener() {public void onEvent(Event event) {int pgno = event.getPaginal().getActivePage();int ofs = pgno * event.getPaginal().getPageSize();new Viewer().redraw(result, ofs, ofs + event.getPaginal().getPageSize() - 1);//assume redraw(List result, int b, int e) will display//from the b-th item to the e-th item}});&lt;/zscript&gt;                                                                                                    &#13;</programlisting><sect3><title>Paging with List Boxes and Grids</title>
<para>The listbox and grid component support the paging intrinsically, so you don't need to specify a paging component explicitly as above, unless you want to have different visual layout or to control multiple listbox and grid with one paging component.</para>
<para>Refer to the Grids section for more details.</para></sect3></sect2></sect1><sect1><title>Windows</title>
<para>A window is, like HTML DIV tag, used to group components. Unlike other components, a window has the following characteristics.</para>
<itemizedlist>
<listitem>
<para>A window is an owner of an ID space. Any component contained in a window, including itself, could be found by use of the getFellow method, if it is assigned with an identifier.</para>
</listitem>
<listitem>
<para>A window could be overlapped, popup, and embedded.</para>
</listitem>
<listitem>
<para>A window could be a modal dialog.</para>
</listitem>
</itemizedlist><sect2><title>Titles and Captions</title>
<para>A window might have a title, a caption and a border. The title is specified by the title property. The caption is specified by declaring a child component called caption. All children of the caption component will appear to the right side of the title.</para>
<programlisting>&lt;window title="Demo" border="normal" width="350px"&gt;&#13;    &lt;caption&gt;    &#13;        &lt;toolbarbutton label="More"/&gt;        &#13;        &lt;toolbarbutton label="Help"/&gt;        &#13;    &lt;/caption&gt;    &#13;    &lt;toolbar&gt;    &#13;        &lt;toolbarbutton label="Save"/&gt;        &#13;        &lt;toolbarbutton label="Cancel"/&gt;        &#13;    &lt;/toolbar&gt;    &#13;    What is your favorite framework?    &#13;    &lt;radiogroup&gt;    <inlinegraphic fileref="images/10000000000001640000004CEB4969A9.png" align="right"/>&#13;        &lt;radio label="ZK"/&gt;        &#13;        &lt;radio label="JSF"/&gt;        &#13;    &lt;/radiogroup&gt;    &#13;    &lt;/window&gt;    &#13;</programlisting>
<para>You could also specify a label and an image to a caption, and then the appearance is as follows.</para>
<programlisting>&lt;window id="win" title="Main" border="normal" width="200px"&gt;<inlinegraphic fileref="images/10000000000000CD00000042FABAB4CE.png" align="right"/>&#13;    &lt;caption image="/img/coffee.gif" label="Hi there!"/&gt;    &#13;    &lt;checkbox label="Hello, World!"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect2><sect2><title>The closable Property</title>
<para>By setting the closable property to true, a close button is shown for the window, such that user could close the window by clicking the button. Once user clicks on the close button, an onClose event is sent to the window. It is processed by the onClose method of Window. Then, onClose, by default, detaches the window itself.</para>
<para>You can override it to do whatever you want. Or, you registered a listener to change the default behavior. For example, you might choose to hide rather than close.</para>
<programlisting>&lt;window closable="true" title="Detach on Close" border="normal" width="200px"&#13;onClose="self.visible = false; event.stopPropagation();"&gt;&#13;    In this example, this window hides itself when the close button is clicked.    &#13;&lt;/window&gt;<inlinegraphic fileref="images/10000000000000CE000000546D42136E.png" align="right"/>&#13;</programlisting>
<para>Notice that event.stopPropagation() must be called to prevent Window.onClose() being called.</para>
<para>Tip: If the window is a popup, the onOpen event will be sent to the window with open=false, when the popup is closed due to user's clicking outside of the window, or pressing ESC.</para>
<para>It is a bit confusing but onClose is sent to ask the server to detach or to hide the window. By default, the window is detached. Of course, the application can override it and do whatever it wants as described above.</para>
<para>On the other hand, onOpen is a notification. It is sent to notify the application that the client has hidden the window. The application cannot prevent it from be hidden, or change the behavior to be detached.</para></sect2><sect2><title>The sizable Property</title>
<para>If you allow users to resize the window, you can specify true to the sizable property as follows. Once allowed, users can resize the window by dragging the borders.</para>
<programlisting>&lt;window id="win" title="Sizable Window" border="normal" width="200px" sizable="true"&gt;&#13;    This is a sizable window.    &#13;    &lt;button label="Change Sizable" onClick="win.sizable = !win.sizable"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting><sect3><title>The onSize Event</title>
<para>Once a user resizes the window, the onSize event is sent with an instance of org.zkoss.zul.event.SizeEvent. Notice that the window is resized before the onSize event is sent. In other word, the event serves as a notification that you generally ignore. Of course, you can do whatever you want in the event listener.</para>
<para>Note: If the user drags the upper or left border, the onMove event is also sent since the position is changed, too.</para></sect3></sect2><sect2><title>The Style Class (sclass)</title>
<para>ZK supports four different style classes for window: embedded, overlapped, popup and wndcyan. Of course, you can add more if you want.</para>
<para>By default, the sclass property is the same as the window mode, so windows in different modes appear differently. To change the appearance, simply assign a value to the sclass property as illustrated in the following example.</para>
<programlisting>&lt;hbox&gt;&#13;    &lt;window title="Embedded Style" border="normal" width="200px"&gt;    &#13;        Hello, Embedded!        &#13;    &lt;/window&gt;    &#13;    &lt;window title="Cyan Style" sclass="wndcyan" border="normal" width="200px"&gt;    &#13;        Hello, Cyan!        &#13;    &lt;/window&gt;    &#13;    &lt;window title="Popup Style" sclass="popup" border="normal" width="200px"&gt;    &#13;        Hello, Popup!        &#13;    &lt;/window&gt;    &#13;    &lt;window title="Modal Style" sclass="modal" border="normal" width="200px"&gt;    &#13;        Hello, Modal!        &#13;    &lt;/window&gt;    &#13;&lt;/hbox&gt;&#13;</programlisting>
<para>
<graphic fileref="images/100000000000033B0000003395A4C925.png">2
			
		</graphic>
</para></sect2><sect2><title>The contentStyle Property</title>
<para>You can customize the look and feel of the content block of the window by specifying the contentStyle property.</para>
<programlisting>&lt;window title="My Window" border="normal" width="200px" contentStyle="background:yellow"&gt;<inlinegraphic fileref="images/10000000000000CB0000003292CB8174.png" align="right"/>&#13;    Hello, World!    &#13;&lt;/window&gt;&#13;</programlisting><sect3><title>Scrollable Window</title>
<para>A typical use of contentStyle is to make a window scrollable as follows.</para>
<programlisting>&lt;window id="win" title="Hi" width="150px" height="100px" contentStyle="overflow:auto" border="normal"&gt;&#13;This is a long line to spead over several lines, and more content to display.&#13;Finally, the scrollbar becomes visible.<inlinegraphic fileref="images/100000000000009C0000006819656516.png" align="right"/>&#13;This is another line.&#13;&lt;/window&gt;&#13;&#13;</programlisting></sect3></sect2><sect2><title>Borders</title>
<para>The border property specifies whether to display a border for window. The default style sheets support only normal and none. The default value is none. </para>
<para>Of course, you can provide additional style class. For example,</para>
<programlisting>&lt;zk&gt;&#13;    &lt;style&gt;    &#13;    div.wc-embedded-dash {    &#13;    padding: 2px; border: 3px dashed #aab;    &#13;    }    &#13;    &lt;/style&gt;    &#13;    &lt;window title="My Window" border="dash" width="200px"&gt;    &#13;    Hello, World!    <inlinegraphic fileref="images/10000000000000CD000000339BF9C5F9.png" align="right"/>&#13;    &lt;/window&gt;    &#13;&lt;/zk&gt;&#13;</programlisting>
<para>where wc-embedded-dash defines the style of the inner box of the window. The style class is named by concatenating wc<footnote>
<para>wc for window content, while wt for window title.</para>
</footnote>, the sclass property and the border property together and separating them with dash (-). In this example, sclass is embedded since it is an embedded window and no explicit sclass is assigned (so the default sclass is used).</para></sect2><sect2><title>Overlapped, Popup, Modal, Highlighted and Embedded</title>
<para>A window could be in one of four different modes: overlapped, popup, modal, highlighted and embedded. By default, it is in the embedded mode. You could change the mode by use of the doOverlapped, doPopup, doModal, doHighlighted, and doEmbedded methods, depicted as follows.</para>
<programlisting>&lt;zk&gt;&#13;    &lt;window id="win" title="Hi!" border="normal" width="200px"&gt;    &#13;        &lt;caption&gt;        &#13;            &lt;toolbarbutton label="Close" onClick="win.setVisible(false)"/&gt;            &#13;        &lt;/caption&gt;        &#13;        &lt;checkbox label="Hello, Wolrd!"/&gt;        &#13;    &lt;/window&gt;    &#13;        &#13;    &lt;button label="Overlap" onClick="win.doOverlapped();"/&gt;    &#13;    &lt;button label="Popup" onClick="win.doPopup();"/&gt;    &#13;    &lt;button label="Modal" onClick="win.doModal();"/&gt;    &#13;    &lt;button label="Embed" onClick="win.doEmbedded();"/&gt;    &#13;    &lt;button label="Highlighted" onClick="win.doHighlighted();"/&gt;    &#13;&lt;/zk&gt;&#13;</programlisting><sect3><title>Embedded</title>
<para>An embedded window is placed inline with other components. In this mode, you cannot change its position, since the position is decided by the browser.</para></sect3><sect3><title>Overlapped</title>
<para>An overlapped window is overlapped with other components, such that users could drag it around and developer could set its position by the setLeft and setTop methods.</para>
<para>In addition to doOverlapped, you can use the mode property as follows.</para>
<programlisting>&lt;window title="My Overlapped" width="300px" mode="overlapped"&gt;&#13;&lt;/window&gt;&#13;</programlisting></sect3><sect3><title>Popup</title>
<para>A popup window is similar to overlapped windows, except it is automatically closed when user clicks on any component other than the popup window itself or any of its descendants. As its name suggested, it is designed to implement popup windows.</para></sect3><sect3><title>Modal</title>
<para>A modal window (aka., a modal dialog) is similar to the overlapped windows, except it suspends the execution until one of the endModal, doEmbedded, doOverlapped, doHighlighted, and doPopup methods is called.</para>
<para>In addition to suspending the execution, it disables components not belonging to the modal window.</para>
<para>A modal window is positioned automatically at the center of the browser, so you cannot control its position.</para></sect3><sect3><title>Highlighted</title>
<para>A highlighted window is similar to the overlapped windows, except the visual effect is the same as the modal windows. In other words, a highlighted window is positioned at the center of the browsers, and components not belonging to the highlighted window are disabled.</para>
<para>However, it does not suspend the execution. Like the overlapped windows, the execution continues to the next statement once the mode is changed. For example, f1() is called only after win1 is closed, while g() is called immediately after win2 becomes highlighted.</para>
<programlisting>win1.doModal(); //the execution is suspended until win1 is closed&#13;</programlisting>
<para>f1();</para>
<programlisting>&#13;win2.doHighlighted(); //the execution won't be suspended&#13;g1()&#13;</programlisting>
<para>The highlighted window is aimed to substitute the modal window, if you prefer not to use or suspend the event processing thread. Refer to the Use the Servlet Thread to Process Events section in the Advanced Features chapter.</para></sect3><sect3><title>Modal Windows and Event Listeners</title>
<para>Unlike other modes, you can only put a window into the modal mode in an event listener. In other words, you can invoke doModal() or setMode("modal") in an event listener.</para>
<programlisting>&lt;zk&gt;&#13;    &lt;window id="wnd" title="My Modal" visible="false" width="300px"&gt;    &#13;        &lt;button label="close" onClick="wnd.visible = false"/&gt;        &#13;    &lt;/window&gt;    &#13;    &lt;button label="do it" onClick="wnd.doModal()"/&gt;    &#13;&lt;/zk&gt;&#13;</programlisting>
<para>On the other hand, the following is wrong if it executes in the Component Creation Phase<footnote>
<para>Refer to the Component Lifecycle chapter.</para>
</footnote>.</para>
<programlisting>//t1.zul&#13;&lt;window title="My Modal" width="300px" closable="true" mode="modal"&gt;&#13;&lt;/window&gt;&#13;</programlisting>
<para>
<graphic fileref="images/10000000000005110000034A677D3288.png">2
			
		</graphic>It will cause the following result<footnote>
<para>Assume Tomcat is used.</para>
</footnote> if you browse it directly.</para>
<para>The following codes will cause the same result.</para>
<programlisting>//t2.zul&#13;&lt;window title="My Modal" width="300px" closable="true"&gt;&#13;    &lt;zscript&gt;    &#13;        self.doModal();        &#13;    &lt;/zscript&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>If you need to create a modal window in page loading, you can post the onModal event as follows.</para>
<programlisting>//t3.zul&#13;&lt;window title="My Modal" width="300px" closable="true"&gt;&#13;    &lt;zscript&gt;    &#13;    Events.postEvent("onModal", self, null);    &#13;    &lt;/zscript&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Note: the following codes execute correctly even if t1.zul sets the window's mode to modal directly (as shown above). Why? It executes in an event listener (for onClick).</para>
<programlisting>&lt;button label="do it"&gt;&#13;    &lt;attribute name="onClick"&gt;    &#13;    Executions.createComponents("t1.zul", null, null);    &#13;        //it loads t1.zul in this event listener for onClick        &#13;    &lt;/attribute&gt;    &#13;&lt;/button&gt;&#13;</programlisting></sect3></sect2><sect2><title>The position Property</title>
<para>In addition to the left and top properties, you can control the position of an overlapped/popup/modal window by use of the position property. For example, the following code snippet positions the window to the right-bottom corner.</para>
<programlisting>&lt;window width="300px" mode="overlapped" position="right,bottom"&gt;&#13;...&#13;</programlisting>
<para>The value of the position property can be a combination of the following constants by separating them with comma (,).</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Constant</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>center</para>
</entry>
<entry>
<para>Position the window at the center. If left or right is also specified, it means the vertical center. If top or bottom is also specified, it means the horizontal center. If none of left, right, top and bottom is specified, it means the center in both directions.</para>
<para>Both the left and top property are ignored.</para>
</entry>
</row>
<row>
<entry>
<para>left</para>
</entry>
<entry>
<para>Position the window at the left edge.</para>
<para>The left property is ignored.</para>
</entry>
</row>
<row>
<entry>
<para>right</para>
</entry>
<entry>
<para>Position the window at the right edge.</para>
<para>The left property is ignored.</para>
</entry>
</row>
<row>
<entry>
<para>top</para>
</entry>
<entry>
<para>Position the window at the top.</para>
<para>The top property is ignored.</para>
</entry>
</row>
<row>
<entry>
<para>bottom</para>
</entry>
<entry>
<para>Position the window at the bottom.</para>
<para>The top property is ignored.</para>
</entry>
</row></tbody></tgroup>
</informaltable>
<para>By default, its value is null. That is, the overlapped and popup window is positioned by the left and top properties, while the modal window is positioned at the center.</para></sect2><sect2><title>Common Dialogs</title>
<para>The XUL component set supports the following common dialogs to simplify some common tasks.</para><sect3><title>The Message Box</title>
<para>The org.zkoss.zul.Messagebox class provides a set of utilities to show message boxes. It is typically used to alert user when an error occurs, or to prompt user for an decision.</para>
<programlisting>if (Messagebox.show("Remove this file?", "Remove?", Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) == Messagebox.YES) {&#13;    ...//remove the file    &#13;</programlisting>
<para>}</para>
<para>Since it is common to alert user for an error, a global function called alert is added for zscript. The alert function is a shortcut of the show method in the Messagebox class. In other words, The following two statements are equivalent.</para>
<programlisting>alert("Wrong");&#13;Messagebox.show("Wrong");&#13;</programlisting>
<para>Notice that Messagebox is a modal window so it shares the same constraint: executable only in an event listener. Thus, the following codes will fail. Refer to the Modal Windows and Event Listeners section above for more descriptions.</para>
<programlisting>&lt;window title="Messagebox not allowed in paging loading"&gt;&#13;    &lt;zscript&gt;    &#13;    //failed since show cannot be called in paging loading    &#13;    if (Messagebox.show("Redirect?", "Redirect?",    &#13;    Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) == Messagebox.YES)    &#13;        Executions.sendRedirect("another.zul");        &#13;    &lt;/zscript&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect3><sect3><title>The File Upload Dialog</title>
<para>The org.zkoss.zul.Fileupload class provides a set of utilities to prompt a user for uploading file(s) from the client to the server. Once of the get methods is called, a file upload dialog is shown at the browser to prompt the user for specifying file(s) for uploading. It won't return until user has uploaded a file or presses the cancel button.</para>
<programlisting>&lt;window title="Fileupload Demo" border="normal"&gt;&#13;    &lt;image id="image"/&gt;    &#13;    &lt;button label="Upload"&gt;    &#13;        &lt;attribute name="onClick"&gt;{        &#13;            Object media = Fileupload.get();            &#13;            if (media instanceof org.zkoss.image.Image)            &#13;                image.setContent(media);                &#13;            else if (media != null)            &#13;                Messagebox.show("Not an image: "+media, "Error",                &#13;                    Messagebox.OK, Messagebox.ERROR);                    &#13;        }&lt;/attribute&gt;        &#13;    &lt;/button&gt;    &#13;&lt;/window&gt;<inlinegraphic fileref="images/10000000000002C800000125B9E0AAC1.png" align="right"/>&#13;</programlisting><sect4><title>Upload Multiple Files at Once</title>
<para>If you allow users to upload multiple files at once, you can specify the maximal allowed number as follows.</para>
<programlisting>&lt;window title="fileupload demo" border="normal"&gt;&#13;    &lt;button label="Upload"&gt;    &#13;        &lt;attribute name="onClick"&gt;&lt;![CDATA[{        &#13;    Object media = Fileupload.get(5);    &#13;    if (media != null)    &#13;        for (int j = 0; j &lt; media.length; ++j) {        &#13;            if (media[j] instanceof org.zkoss.image.Image) {            &#13;                Image image = new Image();                &#13;                image.setContent(media[j]);                &#13;                image.setParent(pics);                &#13;            } else if (media[j] != null) {            &#13;                Messagebox.show("Not an image: "+media[j], "Error",                &#13;                    Messagebox.OK, Messagebox.ERROR);                    <inlinegraphic fileref="images/100000000000016B000000EAA87608DF.png" align="right"/>&#13;            }            &#13;        }        &#13;        }]]&gt;&lt;/attribute&gt;        &#13;    &lt;/button&gt;    &#13;    &lt;vbox id="pics"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect4></sect3><sect3><title>The fileupload Component</title>
<para>The fileupload component is not a modal dialog. Rather, it is a component, so it is placed inline with other components.</para>
<para>Note: In addition to providing the static get methods for opening the file upload dialogs, org.zkoss.zul.Fileupload itself is a component. It is the so-called fileuplod component.</para>
<para>
<graphic fileref="images/10000000000001130000004F6BCA5979.png">2
			
		</graphic>For example,</para>
<programlisting>&lt;image id="img"/&gt;&#13;Upload your hot shot:&#13;&lt;fileupload onUpload="img.setContent(event.media)"/&gt;&#13;</programlisting><sect4><title>The onUpload Event</title>
<para>When the Upload button is pressed, the onUpload event is sent with an instance of the org.zkoss.zk.ui.event.UploadEvent event. You can then retreive the content of the upload files by use of the getMedia or getMedias methods.</para>
<para>Notice that getMedia and getMedias return null to indicate that no file is specified but the Upload button is pressed.</para></sect4><sect4><title>The onClose Event</title>
<para>In addition to onUpload, the onClose event is sent to notify that either the Upload button or the Cancel button is pressed. By default, it simply invalidates the fileupload component, i.e., all fields are cleaned up and redrawn. If you listen to this event to have the custom behavior.</para></sect4></sect3><sect3><title>The File Download Dialog</title>
<para>The org.zkoss.zul.Filedownload class provides a set of utilities to prompt a user for downloading a file from the server to the client. Unlike the iframe component that displays the file in the browser window, a file download dialog is shown at the browser if one of the save methods is called. Then, the user can specify the location in his local file system to save the file.</para>
<programlisting>&lt;button label="Download download.html"&gt;<inlinegraphic fileref="images/10000000000002AF000001BB582C2DD7.png" align="right"/>&#13;    &lt;attribute name="onClick"&gt;{    &#13;                java.io.InputStream is = desktop.getWebApp().getResourceAsStream("/test/download.html");                &#13;    if (is != null)    &#13;Filedownload.save(is, "text/html", "download.html");&#13;    else    &#13;        alert("/test/download.html not found");        &#13;    }&lt;/attribute&gt;    &#13;&lt;/button&gt;&#13;&#13;</programlisting></sect3></sect2></sect1><sect1><title/></sect1><sect1><title>The Layout Components</title>
<para>Components: <code>borderlayout</code>, <code>north</code>, <code>south</code>, <code>center</code>,<code>west</code>,<code>east</code>
</para>
<para>The layout component is a nested component. The parent component is <code>borderlayout</code>, and its children components include <code>north</code>, <code>south</code>, <code>center</code>, <code>west</code>, and <code>east</code>. The combination of children components of <code>borderlayout</code> is free. For example, if you want to divide the area into three regions (veritically), you could try the following combination,</para>
<programlisting>&lt;borderlayout height="500px"&gt;&#13;    &lt;east&gt;    &#13;         The East        &#13;    &lt;/east&gt;    &#13;    &lt;center&gt;    &#13;        The Center        &#13;    &lt;/center&gt;    &#13;    &lt;west&gt;    &#13;        The West        &#13;    &lt;/west&gt;    &#13;&lt;/borderlayout&gt;&#13;</programlisting>
<para>or, you could divide the area into three regions(horizontally) as follows,</para>
<programlisting>&lt;borderlayout height="500px"&gt;&#13;    &lt;north&gt;    &#13;        The North        &#13;    &lt;/north&gt;    &#13;    &lt;center&gt;    &#13;        The Center        &#13;    &lt;/center&gt;    &#13;    &lt;south&gt;    &#13;        The South        &#13;    &lt;/south&gt;    &#13;&lt;/borderlayout&gt;&#13;</programlisting>
<para>And you could embed any kind of ZK components into each of these regions according to your requirement.</para><sect2><title>A Nested <code>borderlayout</code> Component</title>
<para>Moreover, you could embed one layout component into another to divide the area into more regions as follows,</para>
<para/>
<programlisting>&lt;borderlayout height="500px"&gt;<inlinegraphic fileref="images/1000000000000256000001FBDC44BDAC.jpg" align="right"/>&#13;    &lt;north size="30%"&gt;    &#13;        &lt;borderlayout height="250px"&gt;        &#13;            &lt;west border="normal"&gt;            &#13;&#13;                Inner West                &#13;            &lt;/west&gt;            &#13;            &lt;center&gt;            &#13;                Inner Center                &#13;            &lt;/center&gt;            &#13;            &lt;east size="50%" border="normal"&gt;            &#13;                Inner East                &#13;            &lt;/east&gt;            &#13;        &lt;/borderlayout&gt;        &#13;    &lt;/north&gt;    &#13;    &lt;center border="normal"&gt;    &#13;        &lt;borderlayout&gt;        &#13;            &lt;west border="normal"&gt;            &#13;                Inner West                &#13;            &lt;/west&gt;            &#13;            &lt;center border="normal"&gt;            &#13;                Inner Center                &#13;            &lt;/center&gt;            &#13;            &lt;east size="30%" border="normal"&gt;            &#13;            &lt;/east&gt;            &#13;        &lt;/borderlayout&gt;        &#13;    &lt;/center&gt;    &#13;&lt;/borderlayout&gt;&#13;</programlisting></sect2><sect2><title>The <code>size </code>
<code>and</code>
<code> border </code>Properties</title>
<para>You could specify the <code>size</code> property of the following children components (<code>north</code>,<code>south</code>,<code>east</code>,<code>west</code>) to determine their sizes. However, the function of <code>size</code> property depends on the type of children components (vertically or horizontally). For horizontal components (<code>north</code>, and <code>south</code>), the <code>size</code> property determines their height. As for vertically components (<code>east</code>, and <code>west</code>), the <code>size</code> property determines their width.</para>
<para>The <code>border</code> property determines whether there exists border for these layout components, including all children components of <code>borderlayout. </code>The following table specifies values of <code>border</code> property.</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Value</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>
<code>none</code> (default)</para>
</entry>
<entry>
<para>Without border</para>
</entry>
</row>
<row>
<entry>
<para>
<code>normal</code>
</para>
</entry>
<entry>
<para>With border </para>
</entry>
</row></tbody></tgroup>
</informaltable>
<para>Here is an example.</para>
<programlisting>&lt;borderlayout height="500px"&gt;<inlinegraphic fileref="images/1000000000000254000001FA76A65140.jpg" align="right"/>&#13;    &lt;north size="30%" border="normal"&gt;    &#13;        The North        &#13;    &lt;/north&gt;    &#13;    &lt;east size="30%" border="normal"&gt;    &#13;         The East        &#13;    &lt;/east&gt;    &#13;&#13;    &lt;center border="normal"&gt;    &#13;        The Center        &#13;    &lt;/center&gt;    &#13;    &lt;west border="normal"&gt;    &#13;        The West        &#13;    &lt;/west&gt;    &#13;    &lt;south border="normal"&gt;    &#13;        The South        &#13;    &lt;/south&gt;    &#13;&lt;/borderlayout&gt;&#13;</programlisting></sect2><sect2><title>The <code>splittable</code> and <code>collapsible</code> Properties</title>
<para>If you would like to make your layout components splittable, you could assign the <code>splittable</code> property to be <code>true</code>.</para>
<para>In addition, you could make a layout component collapsible by specifying the <code>collapsible</code> property to be <code>true</code>.</para>
<para>
<graphic fileref="images/1000000000000177000001FCE0049437.jpg">2
			
		</graphic>
</para>
<programlisting>&lt;borderlayout height="500px"&gt;&#13;    &lt;north size="20%" splittable="true" collapsible="true"/&gt;    &#13;&lt;east size="20%" splittable="true" collapsible="true"/&gt;&#13;    &lt;center border="normal"/&gt;    &#13;&lt;west size="20%" splittable="true" collapsible="true"/&gt;&#13;&lt;south size="30%" border="normal" splittable="true" collapsible="true"/&gt;&#13;&lt;/borderlayout&gt;&#13;</programlisting><sect3><title>The <code>maxsize</code> and <code>minisize</code> Properties</title>
<para>When you make a layout component splittable, <code>maxsize</code> and <code>minisize</code> are two properties to determine the re-resizing range of it. </para>
<programlisting>&lt;north splittable="true" maxsize="500" minisize="200"/&gt;&#13;</programlisting></sect3></sect2><sect2><title>The <code>flex</code> property</title>
<para>If the size of browser has been changed, the layout components will re-size themselves automatically to fit the size of the browser. If you would like those ZK components embedded within these layout components to be auto-resized also, you could specify the <code>flex</code> property of the layout component to be <code>true</code>.</para></sect2><sect2><title>The open Property</title>
<para>To know whether a layout is collapsed, you can check the value of the open property (i.e., the isOpen method). To open or collapse programmingly, you can set the value of the open property (i.e., the setOpen method).</para></sect2><sect2><title>The onOpen Event</title>
<para>When a layout is collapsed or opened by a user, the onOpen event is sent to the application.</para></sect2></sect1><sect1><title>The Box Model</title>
<para>Components: vbox, hbox and box.</para>
<para>The box model of XUL is used to divide a portion of the display into a series of boxes. Components inside of a box will orient themselves horizontally or vertically. By combining a series of boxes and separators, you can control the layout of the visual presentation.</para>
<para>A box can lay out its children in one of two orientations, either horizontally or vertically. A horizontal box lines up its components horizontally and a vertical box orients its components vertically. You can think of a box as one row or one column from an HTML table.</para>
<para>Some examples are shown as follows.</para>
<programlisting>&lt;zk&gt;<inlinegraphic fileref="images/10000000000000A700000055120D8AF5.png" align="right"/>&#13;    &lt;vbox&gt;    &#13;        &lt;button label="Button 1"/&gt;        &#13;        &lt;button label="Button 2"/&gt;        &#13;    &lt;/vbox&gt;    &#13;    &lt;hbox&gt;    &#13;        &lt;button label="Button 3"/&gt;        &#13;        &lt;button label="Button 4"/&gt;        &#13;    &lt;/hbox&gt;    &#13;&lt;/zk&gt;&#13;</programlisting>
<para>The hbox component is used to create a horizontally oriented box. Each component placed in the hbox will be placed horizontally in a row. The vbox component is used to create a vertically oriented box. Added components will be placed underneath each other in a column.</para>
<para>There is also a generic box component which defaults to horizontal orientation, meaning that it is equivalent to the hbox. However, you can use the orient property to control the orientation of the box. You can set this property to the value horizontal to create a horizontal box and vertical to create a vertical box.</para>
<para>Thus, the two lines below are equivalent:</para>
<programlisting>&lt;vbox&gt;&#13;&lt;box orient="vertical"&gt;&#13;</programlisting>
<para>You can add as many components as you want inside a box, including other boxes. In the case of a horizontal box, each additional component will be placed to the right of the previous one. The components will not wrap at all so the more components you add, the wider the window will be. Similarly, each element added to a vertical box will be placed underneath the previous one.</para><sect2><title>The spacing Property</title>
<para>You could control the spacing among children of the box control. For example, the following example puts 5em at both the upper margin and the lower margin. Notice: the total space between two input fields is 10em.</para>
<programlisting>&lt;vbox spacing="5em"&gt;&#13;    &lt;textbox/&gt;    &#13;    &lt;datebox/&gt;    &#13;&lt;/vbox&gt;&#13;</programlisting>
<para>Another example illustrated an interesting layout by use of zero spacing.</para>
<programlisting>&lt;window title="Box Layout Demo" border="normal"&gt;&#13;    &lt;hbox spacing="0"&gt;    <inlinegraphic fileref="images/100000000000009300000077C9A14E08.png" align="right"/>&#13;        &lt;window border="normal"&gt;0&lt;/window&gt;        &#13;        &lt;vbox spacing="0"&gt;        &#13;            &lt;hbox spacing="0"&gt;            &#13;                &lt;window border="normal"&gt;1&lt;/window&gt;                &#13;                &lt;window border="normal"&gt;2&lt;/window&gt;                &#13;                &lt;vbox spacing="0"&gt;                &#13;                    &lt;window border="normal"&gt;3&lt;/window&gt;                    &#13;                    &lt;window border="normal"&gt;4&lt;/window&gt;                    &#13;                &lt;/vbox&gt;                &#13;            &lt;/hbox&gt;            &#13;            &lt;hbox spacing="0"&gt;            &#13;                &lt;vbox spacing="0"&gt;                &#13;                    &lt;window border="normal"&gt;5&lt;/window&gt;                     &#13;                    &lt;window border="normal"&gt;6&lt;/window&gt;                    &#13;                &lt;/vbox&gt;                &#13;                &lt;window border="normal"&gt;7&lt;/window&gt;                &#13;                &lt;window border="normal"&gt;8&lt;/window&gt;                &#13;                &lt;window border="normal"&gt;9&lt;/window&gt;                &#13;            &lt;/hbox&gt;            &#13;        &lt;/vbox&gt;        &#13;    &lt;/hbox&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect2><sect2><title>The widths and heights Properties</title>
<para>You can specify the width for each cell of hbox with the widths property as follows.</para>
<programlisting>&lt;hbox width="100%" widths="10%,20%,30%,40%"&gt;&lt;label value="10%"/&gt;&lt;label value="20%"/&gt;&lt;label value="30%"/&gt;&lt;label value="40%"/&gt;&lt;/hbox&gt;                &#13;</programlisting>
<para>The value is a list of widths separated by comma. If any value is missed, no width is generated for the corresponding cell and the real width is up to the browser.</para>
<para>Similarly, you can specify the heights for each cell of vbox with the heights property. Actually, these two properties are the same since the orientation of a box can be horizontal or vertical depending on the orient property.</para></sect2><sect2><title>Splitters</title>
<para>Components: splitter.</para>
<para>There may be times when you want to have two sections of a window where the user can resize the sections. This feature is accomplished by using a component called a <ulink url="http://xulplanet.com/references/elemref/ref_splitter.html">splitter</ulink>. It creates a skinny bar between two sections which allows either side to be resized. </para>
<para>A splitter must be put inside a box. When a splitter is placed inside a horizontal box (hbox), it will allow resizing horizontally. When a splitter is placed inside a vertical box (vbox), it will allow resizing vertically. For example,</para>
<para>
<graphic fileref="images/splitter.jpg">2
			
		</graphic>
</para>
<para>Note: If you would like to use the original âosâ CSS, you could specify the class name of</para>
<para>splitter with âsplitter-osâ.</para>
<para>And, the codes are as follows.</para>
<programlisting>&lt;hbox spacing="0" style="border: 1px solid grey" width="100%"&gt;&#13;    &lt;vbox height="200px"&gt;    &#13;        Column 1-1: The left-top box. To know whether a splitter        &#13;        is collapsed, you can listen to the onOpen event.        &#13;        &lt;splitter collapse="after"/&gt;        &#13;        Column 1-2: You can enforce to open or collapse programming        &#13;        by calling setOpen method.        &#13;    &lt;/vbox&gt;    &#13;    &lt;splitter collapse="before"/&gt;    &#13;    Column 2: Whether a splitter allows users to open or collapse    &#13;    depending on the collapse attribue.    &#13;&lt;/hbox&gt;&#13;</programlisting><sect3><title>The collapse Property</title>
<para>It specifies which side of the splitter is collapsed when its grippy (aka., button) is clicked. If this property is not specified, the splitter will not cause a collapse (and the grippy won't appear).</para>
<para>Allowed values and their meaning are as follows.</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Value</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>none</para>
</entry>
<entry>
<para>No collpasing occurs.</para>
</entry>
</row>
<row>
<entry>
<para>before</para>
</entry>
<entry>
<para>When the grippy is clicked, the element immediately before the splitter in the same parent is collapsed so that its width or height is 0.</para>
</entry>
</row>
<row>
<entry>
<para>after</para>
</entry>
<entry>
<para>When the grippy is clicked, the element immediately after the splitter in the same parent is collapsed so that its width or height is 0.</para>
</entry>
</row></tbody></tgroup>
</informaltable></sect3><sect3><title>The open Property</title>
<para>To know whether a splitter is collapsed, you can check the value of the open property (i.e., the isOpen method). To open or collapse programmingly, you can set the value of the open property (i.e., the setOpen method).</para></sect3><sect3><title>The onOpen Event</title>
<para>When a splitter is collapsed or opened by a user, the onOpen event is sent to the application.</para></sect3></sect2></sect1><sect1><title>Tab Boxes</title>
<para>Components: tabbox, tabs, tab, tabpanels and tabpanel.</para>
<para>A tab box allows developers to separate a large number of components into several groups, and show one group each time, such that the user interface won't be too complicate to read. There is only one group (aka., a panel) is visible at the same time. Once the tab of an invisible group is clicked, it becomes visible and the previous visible group becomes invisible.</para>
<para>The generic syntax of tab boxes is as follows.</para>
<programlisting>&lt;tabbox&gt;<inlinegraphic fileref="images/10000000000000750000003EB9D9EBDA.png" align="right"/>&#13;    &lt;tabs&gt;    &#13;        &lt;tab label="First"/&gt;        &#13;        &lt;tab label="Second"/&gt;        &#13;    &lt;/tabs&gt;    &#13;    &lt;tabpanels&gt;    &#13;        &lt;tabpanel&gt;The first panel.&lt;/tabpanel&gt;        &#13;        &lt;tabpanel&gt;The second panel&lt;/tabpanel&gt;        &#13;    &lt;/tabpanels&gt;    &#13;&lt;/tabbox&gt;&#13;</programlisting>
<itemizedlist>
<listitem>
<para>tabbox: The outer box that contains the tabs and tab panels. </para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem>
<para>tabs: The container for the tabs, i.e., a collection of tab components.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem>
<para>tab: A specific tab. Clicking on the tab brings the tab panel to the front. You could put a label and an image on it.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem>
<para>tabpanels: The container for the tab panels, i.e., a collection of tabpanel components.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem>
<para>tabpanel: The body of a single tab panel. You would place the content for a group of components within a tab panel. The first tabpanel corresponds to the first tab, the second tabpanel corresponds to the second tab and so on. </para>
</listitem>
</itemizedlist>
<para>The currently selected tab component is given an additional selected property which is set to true. This is used to give the currently selected tab a different appearance so that it will look selected. Only one tab will have a true value for this property at a time.</para>
<para>There are two way to change the selected tab by Java codes. They are equivalent as shown below.</para>
<programlisting>tab1.setSelected(true);&#13;tabbox.setSelectedTab(tab1);&#13;</programlisting>
<para>Of course, you can assign true to the selected property directly.</para>
<programlisting>&lt;tab label="My Tab" selected="true"/&gt;&#13;</programlisting>
<para>If none of tabs are selected, the first one is selected automatically.</para><sect2><title>Nested Tab Boxes</title>
<para>A tab panel could contain anything including another tab boxes.</para>
<programlisting>&lt;tabbox&gt;<inlinegraphic fileref="images/10000000000000BF000000771BCF5F3B.png" align="right"/>&#13;    &lt;tabs&gt;    &#13;        &lt;tab label="First"/&gt;        &#13;        &lt;tab label="Second"/&gt;        &#13;    &lt;/tabs&gt;    &#13;    &lt;tabpanels&gt;    &#13;        &lt;tabpanel&gt;        &#13;        The first panel.        &#13;        &lt;tabbox&gt;        &#13;            &lt;tabs&gt;            &#13;                &lt;tab label="Nested 1"/&gt;                &#13;                &lt;tab label="Nested 2"/&gt;                &#13;                &lt;tab label="Nested 3"/&gt;                &#13;            &lt;/tabs&gt;            &#13;            &lt;tabpanels&gt;            &#13;                &lt;tabpanel&gt;The first nested panel&lt;/tabpanel&gt;                &#13;                &lt;tabpanel&gt;The second nested panel&lt;/tabpanel&gt;                &#13;                &lt;tabpanel&gt;The third nested panel&lt;/tabpanel&gt;                &#13;            &lt;/tabpanels&gt;            &#13;        &lt;/tabbox&gt;        &#13;        &lt;/tabpanel&gt;        &#13;        &lt;tabpanel&gt;The second panel&lt;/tabpanel&gt;        &#13;    &lt;/tabpanels&gt;    &#13;&lt;/tabbox&gt;&#13;</programlisting></sect2><sect2><title>The Accordion Tab Boxes</title>
<para>Tab boxes supports two molds: default and accordion. The effect of the accordion mold is as follows.</para>
<programlisting>&lt;tabbox mold="accordion"&gt;<inlinegraphic fileref="images/100000000000007800000057AB443B27.png" align="right"/>&#13;    &lt;tabs&gt;    &#13;        &lt;tab label="First"/&gt;        &#13;        &lt;tab label="Second"/&gt;        &#13;    &lt;/tabs&gt;    &#13;    &lt;tabpanels&gt;    &#13;        &lt;tabpanel&gt;The first panel.&lt;/tabpanel&gt;        &#13;        &lt;tabpanel&gt;The second panel&lt;/tabpanel&gt;        &#13;    &lt;/tabpanels&gt;    &#13;&lt;/tabbox&gt;&#13;</programlisting></sect2><sect2><title>The orient Property</title>
<para>Developers can control whether the tabs are located by use of the orient property. By default, it is horizontal. You can change it to vertical, and the effect is as follows.</para>
<programlisting>&lt;tabbox width="400px" orient="vertical"&gt;&#13;    &lt;tabs&gt;    <inlinegraphic fileref="images/1000000000000167000000AD8ECB7048.png" align="right"/>&#13;        &lt;tab label="A"/&gt;        &#13;        &lt;tab label="B"/&gt;        &#13;        &lt;tab label="C"/&gt;        &#13;        &lt;tab label="D"/&gt;        &#13;        &lt;tab label="E"/&gt;        &#13;    &lt;/tabs&gt;    &#13;    &lt;tabpanels&gt;    &#13;        &lt;tabpanel&gt;This is panel A&lt;/tabpanel&gt;        &#13;        &lt;tabpanel&gt;This is panel B&lt;/tabpanel&gt;        &#13;        &lt;tabpanel&gt;This is panel C&lt;/tabpanel&gt;        &#13;        &lt;tabpanel&gt;This is panel D&lt;/tabpanel&gt;        &#13;        &lt;tabpanel&gt;This is panel E&lt;/tabpanel&gt;        &#13;    &lt;/tabpanels&gt;    &#13;&lt;/tabbox&gt;&#13;</programlisting></sect2><sect2><title>The align Property of Tabs</title>
<para>Developers can control the alignment of tab by use the align property of tabs. By default, it is start (leftmost or uppermost). You can change it to center or end (rightmost or bottommost), and the effect is as follows.</para>
<programlisting>&lt;tabbox width="250px"&gt;<inlinegraphic fileref="images/10000000000001000000003F85AAC9C2.png" align="right"/>&#13;    &lt;tabs align="end"&gt;    &#13;        &lt;tab label="Tab 1"/&gt;        &#13;        &lt;tab label="Tab 2"/&gt;        &#13;    &lt;/tabs&gt;    &#13;    &lt;tabpanels&gt;    &#13;        &lt;tabpanel&gt;This is panel 1&lt;/tabpanel&gt;        &#13;        &lt;tabpanel&gt;This is panel 2&lt;/tabpanel&gt;        &#13;    &lt;/tabpanels&gt;    &#13;&lt;/tabbox&gt;&#13;</programlisting></sect2><sect2><title>The closable Property</title>
<para>By setting the <code>closable</code> property to true, a close button is shown for the tab, such that user could close the tab and the corresponding tab panel by clicking the button. Once user clicks on the close button, an onClose event is sent to the tab. It is processed by the onClose method of Tab. Then, onClose, by default, detaches the tab itself and the corresponding tab panel.</para>
<para>See also window's closable property.</para></sect2><sect2><title>The disabled Property</title>
<para>By setting the disabled property of tab to be true, the user could not select or close the corresponding tab by clicking the tab or close button. But, Developers can still control the selection or close of tab by program.</para>
<programlisting>&lt;tabbox width="300px" id="tbx"&gt;<inlinegraphic fileref="images/100000000000013500000041BBCFC9F8.png" align="right"/>&#13;    &lt;tabs&gt;    &#13;        &lt;tab label="Step 1" id="tb1" disabled="true"/&gt;        &#13;        &lt;tab label="Step 2" id="tb2" disabled="true"/&gt;        &#13;        &lt;tab label="Step 3" id="tb3" disabled="true"/&gt;        &#13;    &lt;/tabs&gt;    &#13;    &lt;tabpanels&gt;    &#13;        &lt;tabpanel&gt;&lt;button label="to Step2" onClick="tbx.selectedTab=tb2"/&gt;&lt;/tabpanel&gt;        &#13;        &lt;tabpanel&gt;&lt;button label="to Step3" onClick="tbx.selectedTab=tb3"/&gt;&lt;/tabpanel&gt;        &#13;        &lt;tabpanel&gt;This is panel 3&lt;/tabpanel&gt;        &#13;    &lt;/tabpanels&gt;    &#13;&lt;/tabbox&gt;&#13;</programlisting></sect2><sect2><title>Load-on-Demand for Tab Panels</title>
<para>Like many other components, you can load the content of the tab panel only when it becomes visible. The simplest way is to use the fulfill attribute to defer the creation of the children of a tab panel.</para>
<programlisting>&lt;tabbox&gt;&#13;    &lt;tabs&gt;    &#13;        &lt;tab label="Preload" selected="true"/&gt;        &#13;        &lt;tab id="tab2" label="OnDemand"/&gt;        &#13;    &lt;/tabs&gt;    &#13;    &lt;tabpanels&gt;    &#13;        &lt;tabpanel&gt;        &#13;    This panel is pre-loaded since no fulfill specified    &#13;        &lt;/tabpanel&gt;        &#13;        &lt;tabpanel fulfill="tab2.onSelect"&gt;        &#13;    This panel is loaded only tab2 receives the onSelect event    &#13;        &lt;/tabpanel&gt;        &#13;    &lt;/tabpanels&gt;    &#13;&lt;/tabbox&gt;&#13;</programlisting>
<para>If you prefer to create the children manually or manipulate the panel dynamically, you could listen to the onSelect event, and then fulfill the content of the panel when it is selected, as depicted below.</para>
<programlisting>&lt;tabbox id="tabbox" width="400" mold="accordion"&gt;&#13;    &lt;tabs&gt;    &#13;        &lt;tab label="Preload"/&gt;        &#13;        &lt;tab label="OnDemand" onSelect="load(self.linkedPanel)"/&gt;        &#13;    &lt;/tabs&gt;    &#13;    &lt;tabpanels&gt;    &#13;        &lt;tabpanel&gt;        &#13;    This panel is pre-loaded.    &#13;        &lt;/tabpanel&gt;        &#13;        &lt;tabpanel&gt;        &#13;        &lt;/tabpanel&gt;        &#13;    &lt;/tabpanels&gt;    &#13;    &lt;zscript&gt;&lt;![CDATA[    &#13;    void load(Tabpanel panel) {    &#13;        if (panel != null &amp;&amp; panel.getChildren().isEmpty())        &#13;            new Label("Second panel is loaded").setParent(panel);            &#13;    }    &#13;    ]]&gt;&lt;/zscript&gt;    &#13;&lt;/tabbox&gt;&#13;</programlisting></sect2></sect1><sect1><title>Grids</title>
<para>Components: grid, columns, column, rows and row.</para>
<para>A grid contains components that are aligned in rows like tables. Inside a grid, you declare two things, the columns, that define the header and column attributes, and the rows, that provide the content.</para>
<para>To declare a set of rows, use the rows component, which should be a child element of grid. Inside that you should add row components, which are used for each row. Inside the row element, you should place the content that you want inside that row. Each child is a column of the specific row.</para>
<para>Similarly, the columns are declared with the columns component, which should be placed as a child element of the grid. Unlike row is used to hold the content of each row, column declares the common attributes of each column, such as the width and alignment, and and optional headers, i.e., label and/or image.</para>
<programlisting>&lt;grid&gt;<inlinegraphic fileref="images/100000000000017D0000004DD592B1C3.png" align="right"/>&#13;    &lt;columns&gt;    &#13;        &lt;column label="Type"/&gt;        &#13;        &lt;column label="Content"/&gt;        &#13;    &lt;/columns&gt;    &#13;    &lt;rows&gt;    &#13;        &lt;row&gt;        &#13;            &lt;label value="File:"/&gt;            &#13;            &lt;textbox width="99%"/&gt;            &#13;        &lt;/row&gt;        &#13;        &lt;row&gt;        &#13;            &lt;label value="Type:"/&gt;            &#13;            &lt;hbox&gt;            &#13;                &lt;listbox rows="1" mold="select"&gt;                &#13;                    &lt;listitem label="Java Files,(*.java)"/&gt;                    &#13;                    &lt;listitem label="All Files,(*.*)"/&gt;                    &#13;                &lt;/listbox&gt;                &#13;                &lt;button label="Browse..."/&gt;                &#13;            &lt;/hbox&gt;            &#13;        &lt;/row&gt;        &#13;    &lt;/rows&gt;    &#13;&lt;/grid&gt;&#13;</programlisting><sect2><title>Scrollable Grid</title>
<para>
<graphic fileref="images/10000000000001FC0000009FFC9DC218.png">2
			
		</graphic>A grid could be scrollable if you specify the height property and there is not enough space to show all data.</para>
<programlisting>&lt;grid width="500px" height="130px"&gt;&#13;    &lt;columns&gt;    &#13;        &lt;column label="Head 1"/&gt;        &#13;        &lt;column label="Head 2" align="center"/&gt;        &#13;        &lt;column label="Head 3" align="right"/&gt;        &#13;    &lt;/columns&gt;    &#13;    &lt;rows&gt;    &#13;        &lt;row&gt;        &#13;            &lt;listbox mold="select"&gt;            &#13;                &lt;listitem label="Faster"/&gt;                &#13;                &lt;listitem label="Fast"/&gt;                &#13;                &lt;listitem label="Average"/&gt;                &#13;            &lt;/listbox&gt;            &#13;            &lt;datebox/&gt;            &#13;            &lt;textbox rows="2"/&gt;            &#13;        &lt;/row&gt;        &#13;        &lt;row&gt;        &#13;            &lt;checkbox checked="true" label="Option 1"/&gt;            &#13;            &lt;checkbox label="Option 2"/&gt;            &#13;            &lt;radiogroup&gt;            &#13;                &lt;radio label="Apple"/&gt;                &#13;                &lt;radio label="Orange" checked="true"/&gt;                &#13;                &lt;radio label="Lemon"/&gt;                &#13;            &lt;/radiogroup&gt;            &#13;        &lt;/row&gt;        &#13;        &lt;row&gt;        &#13;            &lt;checkbox checked="true" label="Option 1"/&gt;            &#13;            &lt;checkbox label="Option 2"/&gt;            &#13;            &lt;radiogroup orient="vertical"&gt;            &#13;                &lt;radio label="Apple"/&gt;                &#13;                &lt;radio label="Orange" checked="true"/&gt;                &#13;                &lt;radio label="Lemon"/&gt;                &#13;            &lt;/radiogroup&gt;            &#13;        &lt;/row&gt;        &#13;    &lt;/rows&gt;    &#13;&lt;/grid&gt;&#13;</programlisting></sect2><sect2><title>Sizable Columns</title>
<para>If you allow users to resize the widths of columns, you can specify true to the sizable property of columns as follows. Once allowed, users can resize the widths of columns by dragging the border between adjacent column components.</para>
<programlisting>&lt;window&gt;&#13;    &lt;grid&gt;    &#13;        &lt;columns id="cs" sizable="true"&gt;        &#13;            &lt;column label="AA"/&gt;            &#13;            &lt;column label="BB"/&gt;            &#13;            &lt;column label="CC"/&gt;            &#13;        &lt;/columns&gt;        &#13;        &lt;rows&gt;        &#13;            &lt;row&gt;            &#13;                &lt;label value="AA01"/&gt;                &#13;                &lt;label value="BB01"/&gt;                &#13;                &lt;label value="CC01"/&gt;                &#13;            &lt;/row&gt;            &#13;            &lt;row&gt;            &#13;                &lt;label value="AA01"/&gt;                &#13;                &lt;label value="BB01"/&gt;                &#13;                &lt;label value="CC01"/&gt;                &#13;            &lt;/row&gt;            &#13;            &lt;row&gt;            &#13;                &lt;label value="AA01"/&gt;                &#13;                &lt;label value="BB01"/&gt;                &#13;                &lt;label value="CC01"/&gt;                &#13;            &lt;/row&gt;            &#13;        &lt;/rows&gt;        &#13;    &lt;/grid&gt;    &#13;    &lt;checkbox label="sizeable" checked="true" onCheck="cs.sizeable = self.checked"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting><sect3><title>The onColSize Event</title>
<para>Once a user resizes the widths, the onColSize event is sent with an instance of org.zkoss.zul.event.ColSizeEvent. Notice that the column's width is adjusted before the onColSize event is sent. In other word, the event serves as a notification that you can ignore. Of course, you can do whatever you want in the event listener.</para></sect3></sect2><sect2><title>Grids with Paging</title>
<para>There are two ways to handle long content in a grid: scrolling and paging. The scrolling is enabled by specifying the height property as discussed in the previous section. The paging is enabled by specifying paging to the mold property. Once paging is enable, the grid separates the content into several pages and displays one page at a time as depicted below.</para>
<programlisting>&lt;grid width="300px" mold="paging" pageSize="4"&gt;<inlinegraphic fileref="images/1000000000000133000000737A37B110.png" align="right"/>&#13;    &lt;columns&gt;    &#13;        &lt;column label="Left"/&gt;        &#13;        &lt;column label="Right"/&gt;        &#13;    &lt;/columns&gt;    &#13;    &lt;rows&gt;    &#13;        &lt;row&gt;        &#13;            &lt;label value="Item 1.1"/&gt;&lt;label value="Item 1.2"/&gt;            &#13;        &lt;/row&gt;        &#13;        &lt;row&gt;        &#13;            &lt;label value="Item 2.1"/&gt;&lt;label value="Item 2.2"/&gt;            &#13;        &lt;/row&gt;        &#13;        &lt;row&gt;        &#13;            &lt;label value="Item 3.1"/&gt;&lt;label value="Item 3.2"/&gt;            &#13;        &lt;/row&gt;        &#13;        &lt;row&gt;        &#13;            &lt;label value="Item 4.1"/&gt;&lt;label value="Item 4.2"/&gt;            &#13;        &lt;/row&gt;        &#13;        &lt;row&gt;        &#13;            &lt;label value="Item 5.1"/&gt;&lt;label value="Item 5.2"/&gt;            &#13;        &lt;/row&gt;        &#13;        &lt;row&gt;        &#13;            &lt;label value="Item 6.1"/&gt;&lt;label value="Item 6.2"/&gt;            &#13;        &lt;/row&gt;        &#13;        &lt;row&gt;        &#13;            &lt;label value="Item 7.1"/&gt;&lt;label value="Item 7.2"/&gt;            &#13;        &lt;/row&gt;        &#13;    &lt;/rows&gt;    &#13;&lt;/grid&gt;&#13;</programlisting>
<para>Once the paging mold is set, the grid creates an instance of the paging component as the child of the grid. It then takes care of paging for the grid it belongs to.</para><sect3><title>The pageSize Property</title>
<para>Once setting the paging mold, you can specify how many rows are visible at a time (i.e., the page size) by use of the pageSize property. By default, it is 20.</para></sect3><sect3><title>The paginal Property</title>
<para>If you prefer to put the paging component at different location or you want to control two or more grid with the same paging component, you can assign the paginal property explicitly. Note: if it is not set explicitly, it is the same as the paging property.</para>
<programlisting>&lt;vbox&gt;<inlinegraphic fileref="images/100000000000026C00000066A82ED1BB.png" align="right"/>&#13;&lt;paging id="pg" pageSize="4"/&gt;&#13;&lt;hbox&gt;&#13;    &lt;grid width="300px" mold="paging" paginal="${pg}"&gt;    &#13;        &lt;columns&gt;        &#13;            &lt;column label="Left"/&gt;&lt;column label="Right"/&gt;            &#13;        &lt;/columns&gt;        &#13;        &lt;rows&gt;        &#13;            &lt;row&gt;            &#13;                &lt;label value="Item 1.1"/&gt;&lt;label value="Item 1.2"/&gt;                &#13;            &lt;/row&gt;            &#13;            &lt;row&gt;            &#13;                &lt;label value="Item 2.1"/&gt;&lt;label value="Item 2.2"/&gt;                &#13;            &lt;/row&gt;            &#13;            &lt;row&gt;            &#13;                &lt;label value="Item 3.1"/&gt;&lt;label value="Item 3.2"/&gt;                &#13;            &lt;/row&gt;            &#13;            &lt;row&gt;            &#13;                &lt;label value="Item 4.1"/&gt;&lt;label value="Item 4.2"/&gt;                &#13;            &lt;/row&gt;            &#13;            &lt;row&gt;            &#13;                &lt;label value="Item 5.1"/&gt;&lt;label value="Item 5.2"/&gt;                &#13;            &lt;/row&gt;            &#13;            &lt;row&gt;            &#13;                &lt;label value="Item 6.1"/&gt;&lt;label value="Item 6.2"/&gt;                &#13;            &lt;/row&gt;            &#13;            &lt;row&gt;            &#13;                &lt;label value="Item 7.1"/&gt;&lt;label value="Item 7.2"/&gt;                &#13;            &lt;/row&gt;            &#13;        &lt;/rows&gt;        &#13;    &lt;/grid&gt;    &#13;    &lt;grid width="300px" mold="paging" paginal="${pg}"&gt;    &#13;        &lt;columns&gt;        &#13;            &lt;column label="Left"/&gt;&lt;column label="Right"/&gt;            &#13;        &lt;/columns&gt;        &#13;        &lt;rows&gt;        &#13;            &lt;row&gt;            &#13;                &lt;label value="Item A.1"/&gt;&lt;label value="Item A.2"/&gt;                &#13;            &lt;/row&gt;            &#13;            &lt;row&gt;            &#13;                &lt;label value="Item B.1"/&gt;&lt;label value="Item B.2"/&gt;                &#13;            &lt;/row&gt;            &#13;            &lt;row&gt;            &#13;                &lt;label value="Item C.1"/&gt;&lt;label value="Item C.2"/&gt;                &#13;            &lt;/row&gt;            &#13;            &lt;row&gt;            &#13;                &lt;label value="Item D.1"/&gt;&lt;label value="Item D.2"/&gt;                &#13;            &lt;/row&gt;            &#13;            &lt;row&gt;            &#13;                &lt;label value="Item E.1"/&gt;&lt;label value="Item E.2"/&gt;                &#13;            &lt;/row&gt;            &#13;            &lt;row&gt;            &#13;                &lt;label value="Item F.1"/&gt;&lt;label value="Item F.2"/&gt;                &#13;            &lt;/row&gt;            &#13;        &lt;/rows&gt;        &#13;    &lt;/grid&gt;    &#13;&lt;/hbox&gt;&#13;&lt;/vbox&gt;&#13;</programlisting></sect3><sect3><title>The paging Property</title>
<para>It is a readonly property representing the child paging component that is created automatically to handling paging. It is null if you assign an external paging by the paginal property. You rarely need to access this property. Rather, use the paginal property.</para></sect3><sect3><title>The onPaging Event and Method</title>
<para>Once a user clicks the page number of the paging component, an onPaging event is sent the grid. It is then processed by the onPaging method. By default, the method invalidates, i.e., redraws, the content of rows.</para>
<para>If you want to implement "create-on-demand" feature, you can add a event listener to the grid for the onPaging event.</para>
<programlisting>grid.addEventListener(org.zkoss.zul.event.ZulEvents.ON_PAGING, new MyListener());&#13;</programlisting></sect3></sect2><sect2><title>Sorting</title>
<para>Grids support the sorting of rows directly. To enable the ascending order for a particular column, you assign a java.util.Comparator instance to the sortAscending property of the column. Similarly, you assign a comparator to the sortDescending property to enable the descending order.</para>
<para>As illustrated below, you first implement a comparator that compares any two rows of the grid, and then assign its instances to the sortAscending and sortDescending properties. Notice: the compare method is called with two org.zkoss.zul.Row instance.</para>
<programlisting>&lt;zk&gt;&#13;    &lt;zscript&gt;    &#13;        class MyRowComparator implements Comparator {        &#13;            public MyRowComparator(boolean ascending) {            &#13;            ...            &#13;            }            &#13;            public int compare(Object o1, Object o2) {            &#13;                Row r1 = (Row)o1, r2 = (Row)o2;                &#13;                ....                &#13;            }            &#13;        }        &#13;        Comparator asc = new MyRowComparator(true);        &#13;        Comparator dsc = new MyRowComparator(false);        &#13;    &lt;/zscript&gt;    &#13;    &lt;grid&gt;    &#13;        &lt;columns&gt;        &#13;            &lt;column sortAscending="${asc}" sortDescending="${dsc}"/&gt;            &#13;...&#13;</programlisting><sect3><title>The sortDirection Property</title>
<para>The sortDirection property controls whether to show an icon at the client to indicate the order of a particular column. If rows are sorted before adding to the grid, you shall set this property explicitly.</para>
<programlisting>&lt;column sortDirection="ascending"/&gt;&#13;</programlisting>
<para>Then, it is maintained automatically by grids as long as you assign the comparators to the corresponding column.</para></sect3><sect3><title>The onSort Event</title>
<para>When you assign at least one comparator to a column, an onSort event is sent to the server if user clicks on it. The column component implements a listener to automatically sort rows based on the assigned comparator.</para>
<para>If you prefer to handle it manually, you can add your own listener to the column for the onSort event. To prevent the default listener to invoke the sort method, you have to call the stopPropagation method against the event being received. Alternatively, you can override the sort method, see below.</para></sect3><sect3><title>The sort Method</title>
<para>The sort method is the underlying implementation of the default onSort event listener. It is also useful if you wan to sort the rows by Java codes. For example, you might have to call this method after adding rows (assuming not in the proper order).</para>
<programlisting>Row row = new Row();&#13;row.setParent(rows);&#13;row.appendChild(...);&#13;...&#13;if (!"natural".column.getSortDirection())&#13;    column.sort("ascending".equals(column.getSortDirection()));    &#13;</programlisting>
<para>The default sorting algorithm is quick-sort (by use of the sort method from the org.zkoss.zk.ui.Components class). You might override it with your own implementation.</para>
<para>Note: the sort method checks the sort direction (by calling getSortDirection). It sorts the rows only if the sort direction is different. To enforce the sorting, do as follows.</para>
<programlisting>column.setSortDirection("natural");&#13;sort(myorder);&#13;</programlisting>
<para>The above codes are equivalent to the following.</para>
<programlisting>sort(myorder, true);&#13;</programlisting></sect3></sect2><sect2><title>Live Data</title>
<para>Like list boxes, grids support the live data. With live data, developers could separate the data from the view. In other words, developers needs only to provide the data by implementing the org.zkoss.zul.ListModel interface. Rather than manipulating the grid directly. The benefits are two folds.</para>
<itemizedlist>
<listitem>
<para>It is easier to use different views to show the same set of data.</para>
</listitem>
<listitem>
<para>The grid sends the data to the client only if it is visible. It saves a lot of network traffic if the amount of data is huge.</para>
</listitem>
</itemizedlist>
<para>There are three steps to use the live data.</para>
<orderedlist>
<listitem>
<para>Prepare the data in the form of ListModel. ZK has a concrete implementation called org.zkoss.zul.SimpleListModel. for representing an array of objects.</para>
</listitem>
<listitem>
<para>Implement the org.zkoss.zul.RowRenderer interface for rendering a row of data into the grid.</para>
</listitem>
</orderedlist>
<itemizedlist>
<listitem>
<orderedlist>
<listitem>
<para>This is optional. If not specified, the default renderer is used to render the data into the first column.</para>
</listitem>
<listitem>
<para>You could implement different renderers for represent the same data in different views.</para>
</listitem>
</orderedlist>
</listitem>
</itemizedlist>
<orderedlist>
<listitem>
<para>Specify the data in the model property, and, optionally, the renderer in the rowRenderer property.</para>
</listitem>
</orderedlist>
<para>In the following example, we prepared a list model called strset, assigned it to a grid through the model property. Then, the grid will do the rest.</para>
<programlisting>&lt;window title="Live Grid" border="normal"&gt;<inlinegraphic fileref="images/100000000000006900000083A11BBF49.png" align="right"/>&#13;    &lt;zscript&gt;    &#13;        String[] data = new String[30];        &#13;        for(int j=0; j &amp;lt; data.length; ++j) {        &#13;            data[j] = "option "+j;            &#13;        }        &#13;        ListModel strset = new SimpleListModel(data);        &#13;    &lt;/zscript&gt;    &#13;    &lt;grid width="100px" height="100px" model="${strset}"&gt;    &#13;        &lt;columns&gt;        &#13;            &lt;column label="options"/&gt;            &#13;        &lt;/columns&gt;        &#13;    &lt;/grid&gt;    &#13;&lt;/window&gt;&#13;</programlisting><sect3><title>Sorting with Live Data</title>
<para>If you allow users to sort a grid provided with live data, you have to implement an interface, org.zkoss.zul.ListModelExt, in addition to org.zkoss.zul.ListModel.</para>
<programlisting>class MyListModel implements ListModel, ListModelExt {&#13;    public void sort(Comparator cmpr, boolean ascending) {    &#13;        //do the real sorting        &#13;        //notify the grid (or listbox) that data is changed by use of ListDataEvent        &#13;    }    &#13;}&#13;</programlisting>
<para>When a user requests the grid to sort, the grid will invoke the sort method of ListModelExt to sort the data. In other words, the sorting is done by the list model, rather than the grid.</para>
<para>After sorted, the list model shall notify the grid by invoking the onChange method of the org.zkoss.zul.event.ListDataListener instances that are registered to the grid (by the addListDataListener method). In most cases, all data are usually changed, so the list model usually sends the following event:</para>
<programlisting>new ListDataEvent(this, ListDataEvent.CONTENTS_CHANGED, -1, -1) &#13;</programlisting></sect3></sect2><sect2><title>Auxiliary Headers</title>
<para>In addition to columns, you can specify auxiliary headers with the auxhead and auxheader components as follows.</para>
<programlisting>&lt;grid&gt;&#13;    &lt;auxhead&gt;    &#13;        &lt;auxheader label="H1'07" colspan="6"/&gt;        &#13;        &lt;auxheader label="H2'07" colspan="6"/&gt;        &#13;    &lt;/auxhead&gt;    &#13;    &lt;auxhead&gt;    &#13;        &lt;auxheader label="Q1" colspan="3"/&gt;        &#13;        &lt;auxheader label="Q2" colspan="3"/&gt;        &#13;        &lt;auxheader label="Q3" colspan="3"/&gt;        &#13;        &lt;auxheader label="Q4" colspan="3"/&gt;        &#13;    &lt;/auxhead&gt;    &#13;    &lt;columns&gt;    &#13;        &lt;column label="Jan"/&gt;&lt;column label="Feb"/&gt;&lt;column label="Mar"/&gt;        &#13;        &lt;column label="Apr"/&gt;&lt;column label="May"/&gt;&lt;column label="Jun"/&gt;        &#13;        &lt;column label="Jul"/&gt;&lt;column label="Aug"/&gt;&lt;column label="Sep"/&gt;        &#13;        &lt;column label="Oct"/&gt;&lt;column label="Nov"/&gt;&lt;column label="Dec"/&gt;        &#13;    &lt;/columns&gt;    &#13;    &lt;rows&gt;    &#13;        &lt;row&gt;        &#13;        &lt;label value="1,000"/&gt;&lt;label value="1,100"/&gt;&lt;label value="1,200"/&gt;        &#13;        &lt;label value="1,300"/&gt;&lt;label value="1,400"/&gt;&lt;label value="1,500"/&gt;        &#13;        &lt;label value="1,600"/&gt;&lt;label value="1,700"/&gt;&lt;label value="1,800"/&gt;        &#13;        &lt;label value="1,900"/&gt;&lt;label value="2,000"/&gt;&lt;label value="2,100"/&gt;        &#13;        &lt;/row&gt;        &#13;    &lt;/rows&gt;    &#13;&lt;/grid&gt;&#13;</programlisting>
<para>
<graphic fileref="images/1000000000000235000000602BB4CFD2.png">2
			
		</graphic>The auxiliary headers support the colspan and rowsspan properties that the column header don't. However, as its name suggested, the auxiliary headers must be used with column.</para>
<para>Unlike column/columns, which can used only with grid, auhead/auxheader can be used with grid, listbox and tree.</para></sect2><sect2><title>Special Properties</title><sect3><title>The spans Property</title>
<para>It is a list of integers, separated by coma, to control whether to span a cell over several columns. The first number in the list denotes the number of columns the first cell shall span. The second number denotes that of the second cell and so on. If the number is omitted, 1 is assumed.</para>
<para>For example,</para>
<programlisting>&lt;grid&gt;&#13;    &lt;columns&gt;    &#13;        &lt;column label="Left" align="left"/&gt;&lt;column label="Center" align="center"/&gt;        &#13;        &lt;column label="Right" align="right"/&gt;&lt;column label="Column 4"/&gt;        &#13;        &lt;column label="Column 5"/&gt;&lt;column label="Column 6"/&gt;        &#13;    &lt;/columns&gt;    &#13;    &lt;rows&gt;    &#13;        &lt;row&gt;        &#13;            &lt;label value="Item A.1"/&gt;&lt;label value="Item A.2"/&gt;            &#13;            &lt;label value="Item A.3"/&gt;&lt;label value="Item A.4"/&gt;            &#13;            &lt;label value="Item A.5"/&gt;&lt;label value="Item A.6"/&gt;            &#13;        &lt;/row&gt;        &#13;        &lt;row spans="1,2,2"&gt;        &#13;            &lt;label value="Item B.1"/&gt;&lt;label value="Item B.2"/&gt;            &#13;            &lt;label value="Item B.4"/&gt;&lt;label value="Item B.6"/&gt;            &#13;        &lt;/row&gt;        &#13;        &lt;row spans="3"&gt;        &#13;            &lt;label value="Item C.1"/&gt;&lt;label value="Item C.4"/&gt;            &#13;            &lt;label value="Item C.5"/&gt;&lt;label value="Item C.6"/&gt;            &#13;        &lt;/row&gt;        &#13;        &lt;row spans=",,2,2"&gt;        &#13;            &lt;label value="Item D.1"/&gt;&lt;label value="Item D.2"/&gt;            &#13;            &lt;label value="Item D.3"/&gt;&lt;label value="Item D.5"/&gt;            &#13;        &lt;/row&gt;        &#13;    &lt;/rows&gt;    &#13;&lt;/grid&gt;&#13;</programlisting>
<para>
<graphic fileref="images/100000000000031500000070C388AAA9.png">2
			
		</graphic>
</para></sect3></sect2></sect1><sect1><title>More Layout Components</title><sect2><title>Separators and Spaces</title>
<para>Components: separator and space.</para>
<para>A separator is used to insert a space between two components. There are several ways to customize the separator.</para>
<orderedlist>
<listitem>
<para>By use of the orient property, you could specify a vertical separator or a horizontal separator. By default, it is a horizontal separator, which inserts a line break. On the other hand, a vertical separator inserts a white space. In addition, space is a variant of separator whose default orientation is vertical.</para>
</listitem>
<listitem>
<para>By use of the bar property, you could control whether to show a horizontal or vertical line between component.</para>
</listitem>
<listitem>
<para>
<graphic fileref="images/10000000000001170000007AB8B71E54.png">2
			
		</graphic>By use of the spacing property, you could control the size of spacing.</para>
</listitem>
</orderedlist>
<programlisting>&lt;window&gt;&#13;    line 1 by separator    &#13;    &lt;separator/&gt;    &#13;    line 2 by separator    &#13;    &lt;separator/&gt;    &#13;    line 3 by separator&lt;space bar="true"/&gt;another piece    &#13;    &lt;separator spacing="20px"/&gt;    &#13;    line 4 by separator&lt;space bar="true" spacing="20px"/&gt;another piece    &#13;&lt;/window&gt;&#13;</programlisting></sect2><sect2><title>Group boxes</title>
<para>Components: groupbox.</para>
<para>A group box is used to group components together. A border is typically drawn around the components to show that they are related.</para>
<para>The label across the top of the group box can be created by using the caption component. It works much like the HTML legend element.</para>
<para>Unlike windows, a group box is not an owner of the ID space. It cannot be overlapped or popup.</para>
<programlisting>&lt;groupbox width="250px"&gt;<inlinegraphic fileref="images/100000000000015B000000394024E796.png" align="right"/>&#13;    &lt;caption label="Fruits"/&gt;    &#13;    &lt;radiogroup&gt;    &#13;        &lt;radio label="Apple"/&gt;        &#13;        &lt;radio label="Orange"/&gt;        &#13;        &lt;radio label="Banana"/&gt;        &#13;    &lt;/radiogroup&gt;    &#13;&lt;/groupbox&gt;&#13;</programlisting>
<para>In addition to the default mold, the group box also supports the 3d mold. If the 3d mold is used, it works similar to a simple-tab tab box. First, you could control whether its content is visible by the open property. Similarly, you could create the content of a group box when the onOpen event is received.</para>
<programlisting>&lt;groupbox mold="3d" open="true" width="250px"&gt;&#13;    &lt;caption label="fruits"/&gt;    <inlinegraphic fileref="images/10000000000000FA000000416860D242.png" align="right"/>&#13;    &lt;radiogroup&gt;    &#13;        &lt;radio label="Apple"/&gt;        &#13;        &lt;radio label="Orange"/&gt;        &#13;        &lt;radio label="Banana"/&gt;        &#13;    &lt;/radiogroup&gt;    &#13;&lt;/groupbox&gt;&#13;</programlisting><sect3><title>The contentStyle Property and Scrollable Groupbox</title>
<para>The contentStyle property is used to specify the CSS style for the content block of the groupbox. Thus, you can make a groupbox scrollable by specify overflow:auto (or overflow:scroll) as follows.</para>
<programlisting>&lt;groupbox mold="3d" width="150px" contentStyle="height:50px;overflow:auto"&gt;&#13;    &lt;caption label="fruits"/&gt;    &#13;    &lt;radiogroup onCheck="fruit.value = self.selectedItem.label" orient="vertical"&gt;    &#13;        &lt;radio label="Apple"/&gt;        <inlinegraphic fileref="images/10000000000000960000005F20FC9CD7.png" align="right"/>&#13;        &lt;radio label="Orange"/&gt;        &#13;        &lt;radio label="Banana"/&gt;        &#13;    &lt;/radiogroup&gt;    &#13;&lt;/groupbox&gt;&#13;</programlisting>
<para>Note: The contentStyle property is ignored if the default mold is used.</para>
<para>The height specified in the contentStyle property means the height of the content block, excluding the caption. Thus, if the groupbox is dismissed (i.e., the content block is not visible), the height of the whole groupbox will be shrinked to contain only the caption. On the other hand, if you specify the height for the whole groupbox (by use of the height property), only the content block disappears and the whole height remains intact, when dismissing the groupbox.</para></sect3></sect2><sect2><title>Toolbars</title>
<para>Components: toolbar and toolbarbutton.</para>
<para>A toolbar is used to place a series of buttons, such as toolbar buttons. The toolbar buttons could be used without toolbars, so a toolbar could be used without tool buttons. However, tool buttons change their appearance if they are placed inside a toolbar.</para>
<para>The toolbar has two orientation: horizontal and vertical. It controls how the buttons are placed.</para>
<programlisting>&lt;toolbar&gt;<inlinegraphic fileref="images/100000000000011100000014F49FBE5E.png" align="right"/>&#13;    &lt;toolbarbutton label="button1"/&gt;    &#13;    &lt;toolbarbutton label="button2"/&gt;    &#13;&lt;/toolbar&gt;&#13;</programlisting></sect2></sect1><sect1><title>Menu bars</title>
<para>Components: menubar, menupopup, menu, menuitem and menuseparator.</para>
<para>A menu bar contains a collection of menu items and sub menus. A sub menu contains a collection of menu items and other sub menus. They, therefore, constructs a tree of menu items that user could select to execute.</para>
<para>An example of menu bars is as follows.</para>
<programlisting>&lt;menubar&gt;<inlinegraphic fileref="images/10000000000001570000003F0A980060.png" align="right"/>&#13;    &lt;menu label="File"&gt;    &#13;        &lt;menupopup&gt;        &#13;            &lt;menuitem label="New"/&gt;            &#13;            &lt;menuitem label="Open"/&gt;            &#13;            &lt;menuseparator/&gt;            &#13;            &lt;menuitem label="Exit"/&gt;            &#13;        &lt;/menupopup&gt;        &#13;    &lt;/menu&gt;    &#13;    &lt;menu label="Help"&gt;    &#13;        &lt;menupopup&gt;        &#13;            &lt;menuitem label="Index"/&gt;            &#13;            &lt;menu label="About"&gt;            &#13;                &lt;menupopup&gt;                &#13;                    &lt;menuitem label="About ZK"/&gt;                    &#13;                    &lt;menuitem label="About Potix"/&gt;                    &#13;                &lt;/menupopup&gt;                &#13;            &lt;/menu&gt;            &#13;        &lt;/menupopup&gt;        &#13;    &lt;/menu&gt;    &#13;&lt;/menubar&gt;&#13;</programlisting>
<itemizedlist>
<listitem>
<para>menubar: The topmost container for a collection of menu items (menuitem) and menus (menu). </para>
</listitem>
<listitem>
<para>menu: The container of a popup menu. It also defines the label to be displayed at part of its parent. When user clicks on the label, the popup menu appears.</para>
</listitem>
<listitem>
<para>menupopup: A container for a collection of menu items (menuitem) and menus (menu). It is a child of menu and appears when the label of menu is clicked.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem>
<para>menuitem: An individual command on a menu. This could be placed in a menu bar, or a popup menu. </para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem>
<para>menuseparator: A separator bar on a menu. This would be placed in a popup menu.</para>
</listitem>
</itemizedlist><sect2><title>Execute a Menu Command</title>
<para>A menu command is associated with a menu item. There are two ways to associate a command to it: the onClick event and the href property. If a event listener is added for a menu item for the onClick event, the listener is invoked when the item is clicked.</para>
<programlisting>&lt;menuitem onClick="draft.save()"/&gt;&#13;</programlisting>
<para>On the other hand, you could specify the href property to hyperlink to the specified URL when a menu item is clicked.</para>
<programlisting>&lt;menuitem href="/edit"/&gt;&#13;&lt;menuitem href="http://zk1.sourceforge.net"/&gt;&#13;</programlisting>
<para>If both of the event listener and href are specified, they will be executed. However, when the event listener get executed in the server, the browser might already change the current URL to the specified one. Thus, all responses generated by the event listener will be ignored.</para></sect2><sect2><title>Use Menu Items as Check Boxes</title>
<para>A menu item could be used as a check box. The checked property denotes whether this menu item is checked. If checked, a check icon is appeared in front of the menu item.</para>
<para>In addition to programming the checked property, you could specify the autocheck property to be true, such that the checked property is toggled automatically when user clicks the menu item.</para>
<programlisting>&lt;menuitem label="" autocheck="true"/&gt;&#13;</programlisting></sect2><sect2><title>The autodrop Property</title>
<para>By default, the popup menu is opened when user clicks on it. You might change this to automatically popup menu when the mouse moves over it. This is done by setting the autodrop property to true.</para>
<programlisting>&lt;menubar autodrop="true"&gt;&#13;    ...    &#13;&lt;/menubar&gt;&#13;</programlisting></sect2><sect2><title>The onOpen Event</title>
<para>When a menupopup is going to appear (or hide), an onOpen event is sent to the menupopup for notification. For sophisticated applications, you can defer the creation of the content of the menupopup or manipulate the content dynamically, until the onOpen event is received. Refer to the Load on Demand section in th ZK User Interface Markup Language chapter for details.</para></sect2><sect2><title>More Menu Features</title>
<para>Like box, you could control the orientation of a menu by use of the orient property. By default, the orientation is horizontal.</para>
<para>Like other components, you could change the menu dynamically, including properties and creating sub menus. Refer to menu.zul under the test directory in zkdemo.</para></sect2></sect1><sect1><title>Context Menus</title>
<para>Components: popup and menupopup.</para>
<para>You can assign the ID of a popup or menupopup component to the context property of any XUL component, such that the popup or menupopup component is opened when a user right-clicks on it.</para>
<para>As depicted below, a context menu is enabled by simply assigning the ID to the context property. Of course, you can assign the same ID to multiple components.</para>
<programlisting>&lt;label value="Right Click Me!" context="editPopup"/&gt;&#13;&lt;separator bar="true"/&gt;&lt;label value="Right Click Me!" onRightClick="alert(self.value)"/&gt;&#13;&lt;menupopup id="editPopup"&gt;<inlinegraphic fileref="images/100000000000017500000052E60F488A.png" align="right"/>&#13;&lt;menuitem label="Undo"/&gt;&#13;&lt;menuitem label="Redo"/&gt;&#13;&lt;menu label="Sort"&gt;&#13;        &lt;menupopup&gt;        &#13;     &lt;menuitem label="Sort by Name" autocheck="true"/&gt;    &#13;     &lt;menuitem label="Sort by Date" autocheck="true"/&gt;    &#13;        &lt;/menupopup&gt;        &#13;&lt;/menu&gt;&#13;&lt;/menupopup&gt;&#13;</programlisting>
<para>Notice that menupopup is not visible until a user right-clicks on a component associated with its ID.</para>
<para>Trick: If you just want to disable browser's default context menu, you can specify non-existent ID to the context property.</para>
<para>The popup component is a more generic popup than menupopup. You can place any kind of components inside of popup. For example,</para>
<programlisting>&lt;label value="Right Click Me!" context="any"/&gt;&#13;&#13;&lt;popup id="any" width="300px"&gt;&#13;    &lt;vbox&gt;    &#13;        It can be anything.        &#13;        &lt;toolbarbutton label="ZK" href="http://zk1.sourceforge.net"/&gt;        &#13;    &lt;/vbox&gt;    &#13;&lt;/popup&gt;&#13;</programlisting><sect2><title>Customizable Tooltip and Popup Menus</title>
<para>In addition to open a popup when user right-clicks a component, ZK can open a popup under other circumstances.</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Property</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>context</para>
</entry>
<entry>
<para>When user right clicks a component with the context property, the popup or menupopup component with the specified id is shown.</para>
</entry>
</row>
<row>
<entry>
<para>tooltip</para>
</entry>
<entry>
<para>When user move the mouse pointer over a component with the tooltip property, the popup or menupopup component with the specified id is shown.</para>
</entry>
</row>
<row>
<entry>
<para>popup</para>
</entry>
<entry>
<para>When user clicks a component with the popup property, the popup or menupopup component with the specified id is shown.</para>
</entry>
</row></tbody></tgroup>
</informaltable>
<para>For example,</para>
<programlisting>&lt;window title="Context Menu and Right Click" border="normal" width="360px"&gt;&#13;    &lt;label value="Move Mouse Over Me!" tooltip="editPopup"/&gt;    &#13;    &lt;separator bar="true"/&gt;    &#13;    &lt;label value="Tooptip for Another Popup" tooltip="any"/&gt;    &#13;    &lt;separator bar="true"/&gt;    &#13;    &lt;label value="Click Me!" popup="editPopup"/&gt;    &#13;&#13;    &lt;menupopup id="editPopup"&gt;    &#13;            &lt;menuitem label="Undo"/&gt;            &#13;            &lt;menuitem label="Redo"/&gt;            &#13;            &lt;menu label="Sort"&gt;            &#13;        &lt;menupopup&gt;        &#13;            &lt;menuitem label="Sort by Name" autocheck="true"/&gt;            &#13;            &lt;menuitem label="Sort by Date" autocheck="true"/&gt;            &#13;        &lt;/menupopup&gt;        &#13;            &lt;/menu&gt;            &#13;    &lt;/menupopup&gt;    &#13;    &lt;popup id="any" width="300px"&gt;    &#13;        &lt;vbox&gt;        &#13;            ZK simply rich.            &#13;                                    &lt;toolbarbutton label="ZK your killer Web application now!"href="http://zk1.sourceforge.net"/&gt;                                    &#13;        &lt;/vbox&gt;        &#13;&lt;/popup&gt;&#13;&lt;/window&gt;&#13;</programlisting>
<para>Notice that you can specify any identifier in the popup, tooltip and context properties, as long as they are in the same page. In other words, it is not confined by the ID space.</para></sect2><sect2><title>The onOpen Event</title>
<para>When a context menu, a tooltip or a popup is going to appear (or hide), an onOpen event is sent to the context, tooltip or poup menu for notification. The event is an instance of the org.zkoss.zk.ui.event.OpenEvent class, and you can retrieve the component that causes the context menu, tooltip or popup to appear by calling the getReference method.</para>
<para>To improve the performance, you defer the creation of the content until it becomes visible â i.e., until the onOpen event is received.</para>
<para>The simplest way to defer the creation of the content is to use the fulfill attribute as shown below.</para>
<programlisting>&lt;popup id="any" width="300px" fulfill="onOpen"&gt;&#13;&lt;button label="Hi"/&gt;&lt;!-- whatever content --&gt;&#13;&lt;/popup&gt;&#13;</programlisting>
<para>Then, the content (the Hi button) won't be created when the page is loaded. Rather, the content is created when the onOpen event is received at the first time.</para>
<para>If you prefer to dynamically manipulate the content in Java, you can listen to the onOpen event as depicted below.</para>
<programlisting>&lt;popup id="any" width="300px"&gt;&#13;    &lt;attribute name="onOpen"&gt;    &#13;    if (event.isOpen()) {    &#13;        if (self.getChildren().isEmpty()) {        &#13;            new Button("Hi").seParent(self);            &#13;            ...            &#13;        }        &#13;        if (event.getReference() instanceof Textbox) {        &#13;            //you can do component-dependent manipulation here            &#13;            ...            &#13;        }        &#13;    }    &#13;    &lt;/attribute&gt;&lt;/popup&gt;    &#13;</programlisting></sect2></sect1><sect1><title>List Boxes</title>
<para>Components: listbox, listitem, listcell, listhead and listheader.</para>
<para>A list box is used to display a number of items in a list. The user may select an item from the list.</para>
<para>The simplest format is as follows. It is a single-column and single-selection list box.</para>
<programlisting>&lt;listbox&gt;<inlinegraphic fileref="images/100000000000007A0000002F3C489432.png" align="right"/>&#13;    &lt;listitem label="Butter Pecan"/&gt;    &#13;    &lt;listitem label="Chocolate Chip"/&gt;    &#13;    &lt;listitem label="Raspberry Ripple"/&gt;    &#13;&lt;/listbox&gt;&#13;</programlisting>
<para>Listbox has two molds: default and select. If the select mold is used, the HTML's SELECT tag is generated instead.</para>
<programlisting>&lt;listbox mold="select"&gt;...&lt;/listbox&gt;<inlinegraphic fileref="images/1000000000000085000000343B08C7D1.png" align="right"/>&#13;</programlisting>
<para>Notice: if mold is "select", rows is "1", and none of items is marked as selected, the browser displays the listbox as if the first item is selected. Worse of all, if user selects the first item in this case, no onSelect event is sent. To avoid this confusion, developers shall select at least one item for mold="select" and rows="1".</para>
<para>In addition to label, you can assign an application-specific value to each item using the setValue method.</para>
<para>Mouseless Entry listbox</para>
<itemizedlist>
<listitem>
<para>UP and DOWN to move the selection up and down one list item.</para>
</listitem>
<listitem>
<para>PgUp and PgDn to move the selection up and down in a step of one page.</para>
</listitem>
<listitem>
<para>HOME to move the selection to the first item, and END to the last item.</para>
</listitem>
<listitem>
<para>Ctrl+UP and Ctrl+DOWN to move the focus up and down one list item without changing the selection.</para>
</listitem>
<listitem>
<para>SPACE to select the item of the focus.</para>
</listitem>
</itemizedlist><sect2><title>Multi-Column List Boxes</title>
<para>The list box also supports multiple columns. When user selects an item, the entire row is selected.</para>
<para>To specify a multi-column list, you need to specify the listcell components as collumns of each listitem (as a row).</para>
<programlisting>&lt;listbox width="200px"&gt;&#13;    &lt;listitem&gt;    <inlinegraphic fileref="images/10000000000000D10000002C2459185A.png" align="right"/>&#13;        &lt;listcell label="George"/&gt;        &#13;        &lt;listcell label="House Painter"/&gt;        &#13;    &lt;/listitem&gt;    &#13;    &lt;listitem&gt;    &#13;        &lt;listcell label="Mary Ellen"/&gt;        &#13;        &lt;listcell label="Candle Maker"/&gt;        &#13;    &lt;/listitem&gt;    &#13;    &lt;listitem&gt;    &#13;        &lt;listcell label="Roger"/&gt;        &#13;        &lt;listcell label="Swashbuckler"/&gt;        &#13;    &lt;/listitem&gt;    &#13;&lt;/listbox&gt;&#13;</programlisting></sect2><sect2><title>Column Headers</title>
<para>You could specify the column headers by use of listhead and listheader as follows<footnote>
<para>This feature is a bit different from XUL, where listhead and listheader are used.</para>
</footnote>. In addition to label, you could specify an image as the header by use of the image property.</para>
<programlisting>&lt;listbox width="200px"&gt;<inlinegraphic fileref="images/10000000000000D00000003725942D16.png" align="right"/>&#13;    &lt;listhead&gt;    &#13;        &lt;listheader label="Name"/&gt;        &#13;        &lt;listheader label="Occupation"/&gt;        &#13;    &lt;/listhead&gt;    &#13;...&#13;&lt;/listbox&gt;&#13;</programlisting></sect2><sect2><title>Column Footers</title>
<para>You could specify the column footers by use of listfoot and listfooter as follows. Notice that the order of listhead and listfoot doesn't matter. Each time a listhead instance is added to a list box, it must be the first child, and a listfoot instance the last child.</para>
<programlisting>&lt;listbox width="200px"&gt;<inlinegraphic fileref="images/10000000000000D00000006D18232918.png" align="right"/>&#13;    &lt;listhead&gt;    &#13;        &lt;listheader label="Population"/&gt;        &#13;        &lt;listheader align="right" label="%"/&gt;        &#13;    &lt;/listhead&gt;    &#13;    &lt;listitem id="a" value="A"&gt;    &#13;        &lt;listcell label="A. Graduate"/&gt;        &#13;        &lt;listcell label="20%"/&gt;        &#13;    &lt;/listitem&gt;    &#13;    &lt;listitem id="b" value="B"&gt;    &#13;        &lt;listcell label="B. College"/&gt;        &#13;        &lt;listcell label="23%"/&gt;        &#13;    &lt;/listitem&gt;    &#13;    &lt;listitem id="c" value="C"&gt;    &#13;        &lt;listcell label="C. High School"/&gt;        &#13;        &lt;listcell label="40%"/&gt;        &#13;    &lt;/listitem&gt;    &#13;    &lt;listitem id="d" value="D"&gt;    &#13;        &lt;listcell label="D. Others"/&gt;        &#13;        &lt;listcell label="17%"/&gt;        &#13;    &lt;/listitem&gt;    &#13;    &lt;listfoot&gt;    &#13;        &lt;listfooter label="More or less"/&gt;        &#13;        &lt;listfooter label="100%"/&gt;        &#13;    &lt;/listfoot&gt;    &#13;&lt;/listbox&gt;&#13;</programlisting></sect2><sect2><title>Drop-Down List</title>
<para>You could create a drop-down list by specifying the select mold and single row. Notice you cannot use multi-column for the drop-down list.</para>
<programlisting>&lt;listbox mold="select" rows="1"&gt;<inlinegraphic fileref="images/1000000000000049000000488DCF4463.png" align="right"/>&#13;    &lt;listitem label="Car"/&gt;    &#13;    &lt;listitem label="Taxi"/&gt;    &#13;    &lt;listitem label="Bus" selected="true"/&gt;    &#13;    &lt;listitem label="Train"/&gt;    &#13;&lt;/listbox&gt;&#13;</programlisting>
<para/></sect2><sect2><title>Multiple Selection</title>
<para>When user clicks on a list item, the whole item is selected and the onSelect event is sent back to the server to notify the application. You could control whether a list box allows multiple selections by setting the multiple property to true. The default value is false.</para></sect2><sect2><title>Scrollable List Boxes</title>
<para>A list box is scrollable if you specify the rows property or the height property, and there is no enough to show all list items.</para>
<programlisting>&lt;listbox width="250px" rows="4"&gt;<inlinegraphic fileref="images/10000000000001010000005ED2DEF030.png" align="right"/>&#13;    &lt;listhead&gt;    &#13;        &lt;listheader label="Name" sort="auto"/&gt;        &#13;        &lt;listheader label="Gender" sort="auto"/&gt;        &#13;    &lt;/listhead&gt;    &#13;    &lt;listitem&gt;    &#13;        &lt;listcell label="Mary"/&gt;        &#13;        &lt;listcell label="FEMALE"/&gt;        &#13;    &lt;/listitem&gt;    &#13;    &lt;listitem&gt;    &#13;        &lt;listcell label="John"/&gt;        &#13;        &lt;listcell label="MALE"/&gt;        &#13;    &lt;/listitem&gt;    &#13;    &lt;listitem&gt;    &#13;        &lt;listcell label="Jane"/&gt;        &#13;        &lt;listcell label="FEMALE"/&gt;        &#13;    &lt;/listitem&gt;    &#13;    &lt;listitem&gt;    &#13;        &lt;listcell label="Henry"/&gt;        &#13;        &lt;listcell label="MALE"/&gt;        &#13;    &lt;/listitem&gt;    &#13;    &lt;listitem&gt;    &#13;        &lt;listcell label="Michelle"/&gt;        &#13;        &lt;listcell label="FEMALE"/&gt;        &#13;    &lt;/listitem&gt;    &#13;&lt;/listbox&gt;&#13;</programlisting><sect3><title>The rows Property</title>
<para>The rows property is used to control how many rows are visible. By setting it to zero, the list box will resize itself to hold as many as items if possible.</para></sect3></sect2><sect2><title>Sizable List Headers</title>
<para>Like columns, you can set the sizable property of listhead to true to allow users to resize the width of list headers. Similarly, the onColSize event is sent when a user resized the widths.</para></sect2><sect2><title>List Boxes with Paging</title>
<para>Like grids, you can use multiple pages to represent long content for list boxes by specifying the paging mold. Similarly, you can control how many items for each page to display, whether to use an external paging component and whether to customize the behavior when a page is selected. Refer to the Grids section for more details.</para></sect2><sect2><title>Sorting</title>
<para>List boxes support sorting of list items directly. There are a few ways to enable the sorting of a particular column. The simplest way is to set the sort property of the list header to auto as follows. Then, the column that the list header is associated with is sortable based on the label of each list cell of the specified column.</para>
<programlisting>&lt;zk&gt;<inlinegraphic fileref="images/10000000000000CF0000005D419F9D95.png" align="right"/>&#13;    &lt;listbox width="200px"&gt;    &#13;        &lt;listhead&gt;        &#13;            &lt;listheader label="name" sort="auto"/&gt;            &#13;            &lt;listheader label="gender" sort="auto"/&gt;            &#13;        &lt;/listhead&gt;        &#13;        &lt;listitem&gt;        &#13;            &lt;listcell label="Mary"/&gt;            &#13;            &lt;listcell label="FEMALE"/&gt;            &#13;        &lt;/listitem&gt;        &#13;        &lt;listitem&gt;        &#13;            &lt;listcell label="John"/&gt;            &#13;            &lt;listcell label="MALE"/&gt;            &#13;        &lt;/listitem&gt;        &#13;        &lt;listitem&gt;        &#13;            &lt;listcell label="Jane"/&gt;            &#13;            &lt;listcell label="FEMALE"/&gt;            &#13;        &lt;/listitem&gt;        &#13;        &lt;listitem&gt;        &#13;            &lt;listcell label="Henry"/&gt;            &#13;            &lt;listcell label="MALE"/&gt;            &#13;        &lt;/listitem&gt;        &#13;            &lt;/listbox&gt;            &#13;&lt;/zk&gt;&#13;</programlisting><sect3><title>The sortAscending and sortDescending Properties</title>
<para>If you prefer to sort list items in different ways, you can assign a java.util.Comparator instance to the sortAscending and/or sortDescending property. Once assigned, the list items can be sorted in the ascending and/or descending order with the comparator you assigned.</para>
<para>The invocation of the sort property with auto actually assign two comparators to the sortAsceding and sortDescending automatically. You can override any of them by assigning another comparator to it.</para>
<para>For example, assume you want to sort based on the value of list items, rather than list cell's label, then you assign an instance of ListitemComparator to these properties as follows.</para>
<programlisting>&lt;zscript&gt;&#13;    Comparator asc = new ListitemComarator(-1, true, true);    &#13;    Comparator dsc = new ListitemComarator(-1, false, true);    &#13;&lt;/zscript&gt;&#13;&lt;listbox&gt;&#13;    &lt;listhead&gt;    &#13;        &lt;listheader sortAscending="${asc}" sortDescending="${dsc}"/&gt;        &#13;...&#13;</programlisting></sect3><sect3><title>The sortDirection Property</title>
<para>The sortDirection property controls whether to show an icon at the client to indicate the order of the particular column. If list items are sorted before adding to the list box, you shall set this property explicitly.</para>
<programlisting>&lt;listheader sortDirection="ascending"/&gt;&#13;</programlisting>
<para>Then, it is maintained automatically by list boxes as long as you assign the comparator to the corresponding list header.</para></sect3><sect3><title>The onSort Event</title>
<para>When you assign at least one comparator to a list header, an onSort event is sent to the server if user clicks on it. The list header implements a listener to handle the sorting automatically.</para>
<para>If you prefer to handle it manually, you can add your listener to the list header for the onSort event. To prevent the default listener to invoke the sort method, you have to call the stopPropagation method against the event being received. Alternatively, you can override the sort method, see below.</para></sect3><sect3><title>The sort Method</title>
<para>The sort method is the underlying implementation of the default onSort event listener. It is also useful if you wan to sort the list items by Java codes. For example, you might have to call this method after adding items (assuming not in the proper order).</para>
<programlisting>new Listem("New Stuff").setParent(listbox);&#13;if (!"natural".header.getSortDirection())&#13;    header.sort("ascending".equals(header.getSortDirection()));    &#13;</programlisting>
<para>The default sorting algorithm is quick-sort (by use of the sort method from the org.zkoss.zk.ui.Components class). You might override it with your own implementation, or listen to the onSort event as described in the previous section.</para>
<para>Tip: Sorting huge number of live data might degrade the performance significantly. It is better to intercept the onSort event or the sort method to handle it effectively. Refer to the Sort Live Data section below.</para></sect3></sect2><sect2><title>Special Properties</title><sect3><title>The checkmark Property</title>
<para>The checkmark property controls whether to display a checkbox or a radio button in front of each list item.</para>
<para>
<graphic fileref="images/10000000000001C20000005540C9B7A9.png">2
			
		</graphic>In the following example, you will see how a checkbox is added automatically, when you move a list item from the left list box to the right one. The checkbox is removed when you move a list item from right to left.</para>
<programlisting>&lt;hbox&gt;&#13;    &lt;listbox id="src" rows="0" multiple="true" width="200px"&gt;    &#13;        &lt;listhead&gt;        &#13;            &lt;listheader label="Population"/&gt;            &#13;            &lt;listheader label="Percentage"/&gt;            &#13;        &lt;/listhead&gt;        &#13;        &lt;listitem id="a" value="A"&gt;        &#13;            &lt;listcell label="A. Graduate"/&gt;            &#13;            &lt;listcell label="20%"/&gt;            &#13;        &lt;/listitem&gt;        &#13;        &lt;listitem id="b" value="B"&gt;        &#13;            &lt;listcell label="B. College"/&gt;            &#13;            &lt;listcell label="23%"/&gt;            &#13;        &lt;/listitem&gt;        &#13;        &lt;listitem id="c" value="C"&gt;        &#13;            &lt;listcell label="C. High School"/&gt;            &#13;            &lt;listcell label="40%"/&gt;            &#13;        &lt;/listitem&gt;        &#13;        &lt;listitem id="d" value="D"&gt;        &#13;            &lt;listcell label="D. Others"/&gt;            &#13;            &lt;listcell label="17%"/&gt;            &#13;        &lt;/listitem&gt;        &#13;    &lt;/listbox&gt;    &#13;    &lt;vbox&gt;    &#13;        &lt;button label="=&amp;gt;" onClick="move(src, dst)"/&gt;        &#13;        &lt;button label="&amp;lt;=" onClick="move(dst, src)"/&gt;        &#13;    &lt;/vbox&gt;    &#13;    &lt;listbox id="dst" checkmark="true" rows="0" multiple="true" width="200px"&gt;    &#13;        &lt;listhead&gt;        &#13;            &lt;listheader label="Population"/&gt;            &#13;            &lt;listheader label="Percentage"/&gt;            &#13;        &lt;/listhead&gt;        &#13;        &lt;listitem id="e" value="E"&gt;        &#13;            &lt;listcell label="E. Supermen"/&gt;            &#13;            &lt;listcell label="21%"/&gt;            &#13;        &lt;/listitem&gt;        &#13;    &lt;/listbox&gt;    &#13;    &lt;zscript&gt;    &#13;void move(Listbox src, Listbox dst) {&#13;    Listitem s = src.getSelectedItem();    &#13;    if (s == null)    &#13;        Messagebox.show("Select an item first");        &#13;    else    &#13;        s.setParent(dst);        &#13;}&#13;    &lt;/zscript&gt;    &#13;&lt;/hbox&gt;&#13;</programlisting>
<para>
<graphic fileref="images/10000000000000CD0000006D96B78742.png">2
			
		</graphic>Notice that if the multiple property is false, the radio buttons are displayed instead, as depicted at the right.</para></sect3><sect3><title>The vflex Property</title>
<para>The vflex property controls whether to grow and shrink vertical to fit their given space. It is so-called vertical flexibility. For example, if the list is too big to fit in the browser window, it will shrink its height to make the whole list control visible in the browser window.</para>
<para>This property is ignored if the rows property is specified.</para></sect3><sect3><title>The maxlength Property</title>
<para>The maxlength property defines the maximal allowed characters being visible at the browser. By setting this property, you could make a narrower list box.</para></sect3></sect2><sect2><title>Live Data</title>
<para>Like grids<footnote>
<para>The concept is similar to Swing (javax.swing.ListModel).</para>
</footnote>, list boxes support the live data. With live data, developers could separate the data from the view. In other words, developers needs only to provide the data by implementing the org.zkoss.zul.ListModel interface. Rather than manipulating the list box directly. The benefits are two folds.</para>
<itemizedlist>
<listitem>
<para>It is easier to use different views to show the same set of data.</para>
</listitem>
<listitem>
<para>The list box sends the data to the client only if it is visible. It saves a lot of network traffic if the amount of data is huge.</para>
</listitem>
</itemizedlist>
<para>There are three steps to use the live data.</para>
<orderedlist>
<listitem>
<para>Prepare the data in the form of ListModel. ZK has a concrete implementation called org.zkoss.zul.SimpleListModel. for representing an array of objects.</para>
</listitem>
<listitem>
<para>Implement the org.zkoss.zul.ListitemRenderer interface for rendering an item of data into a list item of the list box.</para>
</listitem>
</orderedlist>
<itemizedlist>
<listitem>
<orderedlist>
<listitem>
<para>This is optional. If not specified, the default renderer is used to render the data into the first column.</para>
</listitem>
<listitem>
<para>You could implement different renderers for represent the same data in different views.</para>
</listitem>
</orderedlist>
</listitem>
</itemizedlist>
<orderedlist>
<listitem>
<para>Specify the data in the model property, and, optionally, the renderer in the itemRenderer property.</para>
</listitem>
</orderedlist>
<para>
<graphic fileref="images/1000000000000132000000E3AE1693E7.png">2
			
		</graphic>In the following example, we prepared a list model called strset, assigned it to a list box through the model property. Then, the list box will do the rest.</para>
<programlisting>&lt;window title="Livedata Demo" border="normal"&gt;&lt;zscript&gt;String[] data = new String[30];for(int j=0; j &amp;lt; data.length; ++j) {data[j] = "option "+j;}ListModel strset = new SimpleListModel(data);&lt;/zscript&gt;&lt;listbox width="200px" rows="10" model="${strset}"&gt;&lt;listhead&gt;&lt;listheader label="Load on demend"/&gt;&lt;/listhead&gt;&lt;/listbox&gt;&lt;/window&gt;                                                                                        &#13;</programlisting><sect3><title>Sorting with Live Data</title>
<para>If you allow users to sort a list box provided with live data, you have to implement an interface, org.zkoss.zul.ListModelExt, in addition to org.zkoss.zul.ListModel.</para>
<programlisting>class MyListModel implements ListModel, ListModelExt {&#13;    public void sort(Comparator cmpr, boolean ascending) {    &#13;        //do the real sorting        &#13;        //notify the listbox (or grid) that data is changed by use of ListDataEvent        &#13;    }    &#13;}&#13;</programlisting>
<para>When a user requests the list box to sort, the list box will invoke the sort method of ListModelExt to sort the data. In other words, the sorting is done by the list model, rather than the list box.</para>
<para>After sorted, the list model shall notify the list box by invoking the onChange method of the org.zkoss.zul.event.ListDataListener instances that are registered to the list box (by the addListDataListener method). In most cases, all data are usually changed, so the list model usually sends the following event:</para>
<programlisting>new ListDataEvent(this, ListDataEvent.CONTENTS_CHANGED, -1, -1)&#13;</programlisting>
<para>Note: the implementation of ListModel and ListModelExt is independent of the visual presentation. In other words, it can be used with grids, list boxes and any other components supporting ListModel.</para>
<para>In other words, to have the maximal flexibility, you shall not assume the component to used. Rather, use ListDataEvent to communicate with.</para></sect3></sect2><sect2><title>List Boxes Contain Buttons</title>
<para>In theory, a list cell could contain any other components, as depicted below.</para>
<programlisting>&lt;listbox width="250px"&gt;<inlinegraphic fileref="images/1000000000000101000000597E6A0365.png" align="right"/>&#13;    &lt;listhead&gt;    &#13;        &lt;listheader label="Population"/&gt;        &#13;        &lt;listheader label="Percentage"/&gt;        &#13;    &lt;/listhead&gt;    &#13;    &lt;listitem value="A"&gt;    &#13;        &lt;listcell&gt;&lt;textbox value="A. Graduate"/&gt;&lt;/listcell&gt;        &#13;        &lt;listcell label="20%"/&gt;        &#13;    &lt;/listitem&gt;    &#13;    &lt;listitem value="B"&gt;    &#13;        &lt;listcell&gt;&lt;checkbox label="B. College"/&gt;&lt;/listcell&gt;        &#13;        &lt;listcell&gt;&lt;button label="23%"/&gt;&lt;/listcell&gt;        &#13;    &lt;/listitem&gt;    &#13;    &lt;listitem value="C"&gt;    &#13;        &lt;listcell label="C. High School"/&gt;        &#13;        &lt;listcell&gt;&lt;textbox cols="8" value="40%"/&gt;&lt;/listcell&gt;        &#13;    &lt;/listitem&gt;    &#13;&lt;/listbox&gt;&#13;</programlisting>
<para>Notes:</para>
<orderedlist>
<listitem>
<para>Don't use a list box, when a grid is a better choice. The appearances of list boxes and grids are similar, but the list box shall be used only to represent a list of selectable items.</para>
</listitem>
<listitem>
<para>Users are usually confused if a list box contains editable components, such as textbox and checkbox. A common question is what the text, that a user entered in a unselected item, means.</para>
</listitem>
<listitem>
<para>Due to the limitation of the browsers, users cannot select a piece of characters from the text boxes.</para>
</listitem>
</orderedlist></sect2></sect1><sect1><title>Tree Controls</title>
<para>Components: tree, treechildren, treeitem, treerow, treecell, treecols and treecol.</para>
<para>A tree consists of two parts, the set of columns, and the tree body. The set of columns is defined by a number of treecol components, one for each column. Each column will appear as a header at the top of the tree. The second part, the tree body, contains the data to appear in the tree and is created with a treechildren component.</para>
<para>An example of a tree control is as follows.</para>
<programlisting>&lt;tree id="tree" rows="5"&gt;<inlinegraphic fileref="images/10000000000001E5000000727EE351E4.png" align="right"/>&#13;    &lt;treecols&gt;    &#13;        &lt;treecol label="Name"/&gt;        &#13;        &lt;treecol label="Description"/&gt;        &#13;    &lt;/treecols&gt;    &#13;    &lt;treechildren&gt;    &#13;        &lt;treeitem&gt;        &#13;            &lt;treerow&gt;            &#13;                &lt;treecell label="Item 1"/&gt;                &#13;                &lt;treecell label="Item 1 description"/&gt;                &#13;            &lt;/treerow&gt;            &#13;        &lt;/treeitem&gt;        &#13;        &lt;treeitem&gt;        &#13;            &lt;treerow&gt;            &#13;                &lt;treecell label="Item 2"/&gt;                &#13;                &lt;treecell label="Item 2 description"/&gt;                &#13;            &lt;/treerow&gt;            &#13;            &lt;treechildren&gt;            &#13;                &lt;treeitem&gt;                &#13;                    &lt;treerow&gt;                    &#13;                        &lt;treecell label="Item 2.1"/&gt;                        &#13;                    &lt;/treerow&gt;                    &#13;                    &lt;treechildren&gt;                    &#13;                        &lt;treeitem&gt;                        &#13;                            &lt;treerow&gt;                            &#13;                                &lt;treecell label="Item 2.1.1"/&gt;                                &#13;                            &lt;/treerow&gt;                            &#13;                        &lt;/treeitem&gt;                        &#13;                        &lt;treeitem&gt;                        &#13;                            &lt;treerow&gt;                            &#13;                                &lt;treecell label="Item 2.1.2"/&gt;                                &#13;                            &lt;/treerow&gt;                            &#13;                        &lt;/treeitem&gt;                        &#13;                    &lt;/treechildren&gt;                    &#13;                &lt;/treeitem&gt;                &#13;                &lt;treeitem&gt;                &#13;                    &lt;treerow&gt;                    &#13;                        &lt;treecell label="Item 2.2"/&gt;                        &#13;                        &lt;treecell label="Item 2.2 is something who cares"/&gt;                        &#13;                    &lt;/treerow&gt;                    &#13;                &lt;/treeitem&gt;                &#13;            &lt;/treechildren&gt;            &#13;        &lt;/treeitem&gt;        &#13;        &lt;treeitem label="Item 3"/&gt;        &#13;    &lt;/treechildren&gt;    &#13;&lt;/tree&gt;&#13;</programlisting>
<itemizedlist>
<listitem>
<para>tree: This is the outer component of a tree control. </para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem>
<para>treecols: This component is a placeholder for a collection of treecol components. </para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem>
<para>treecol: This is used to declare a column of the tree. By using this comlumn, you can specify additional information such as the column header. </para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem>
<para>treechildren: This contains the main body of the tree, which contain a collection of treeitem components.</para>
</listitem>
<listitem>
<para>treeitem: This component contains a row of data (treerow), and an optional treechildren.</para>
<orderedlist>
<listitem>
<para>If the component doesn't contain a treechildren, it is a leaf node that doesn't accept any child items.</para>
</listitem>
<listitem>
<para>If it contains a treechildren, it is a branch node that might contain other items.</para>
</listitem>
<listitem>
<para>For a branch node, an +/- button will appear at the beginning of the row, such that user could open and close the item by clicking on the +/- button.</para>
</listitem>
</orderedlist>
</listitem>
<listitem>
<para>treerow: A single row in the tree, which should be placed inside a treeitem component.</para>
</listitem>
<listitem>
<para>treecell: A single cell in a tree row. This element would go inside a treerow component. </para>
</listitem>
</itemizedlist>
<para>Mouseless Entry tree</para>
<itemizedlist>
<listitem>
<para>UP and DOWN to move the selection up and down one tree item.</para>
</listitem>
<listitem>
<para>PgUp and PgDn to move the selection up and down in a step of one page.</para>
</listitem>
<listitem>
<para>HOME to move the selection to the first item, and END to the last item.</para>
</listitem>
<listitem>
<para>RIGHT to open a tree item, and LEFT to close a tree item.</para>
</listitem>
<listitem>
<para>Ctrl+UP and Ctrl+DOWN to move the focus up and down one tree item without changing the selection.</para>
</listitem>
<listitem>
<para>SPACE to select the item of the focus.</para>
</listitem>
</itemizedlist><sect2><title>The open Property and the onOpen Event</title>
<para>Each tree item has the open property used to control whether to display its child items. The default value is true. By setting this property to false, you could control what part of the tree is invisible.</para>
<programlisting>&lt;treeitem open="false"&gt;&#13;</programlisting>
<para>When a user clicks on the +/- button, he opens the tree item and makes its children visible. The onOpen event is then sent to the server to notify the application.</para>
<para>For sophisticated applications, you can defer the creation of the content of the tree item or manipulate its content dynamically, until the onOpen event is received. Refer to the Load on Demand section in th ZK User Interface Markup Language chapter for details.</para></sect2><sect2><title>Multiple Selection</title>
<para>When user clicks on a tree item, the whole item is selected and the onSelect event is sent back to the server to notify the application. You could control whether a tree control allows multiple selections by setting the multiple property to true. The default value is false.</para></sect2><sect2><title>Paging</title>
<para>
<graphic fileref="images/100000000000008A000001112B40E516.png">2
			
		</graphic>The pageSize property controls the number of tree items to display at once. By default, it is 10. That is, at most 10 tree items are displayed at the client for each level as depicted in the right figure.</para>
<para>A user can click to see more tree items (i.e., enlarge pageSize), or click or to scroll up and down.</para>
<para>If you want to display all tree items, simply set pageSize to -1. However, it is not recommended if the tree control is huge, since the browser is too slow to handle a tree with huge number of items.</para>
<para>In addition to the pageSize property of a tree control, you can change the page size of each treechildren instance by modifying the pageSize property of the corresponding treechildren instance.</para><sect3><title>The onPaging and onPageSize Event</title>
<para>When a user clicks or to scroll up and down the page, the onPaging event is sent with an org.zkoss.zul.event.PagingEvent instance. Similarly, the onPageSize event is sent with an org.zkoss.zul.event.PageSize instance when a user clicks .</para></sect3></sect2><sect2><title>Special Properties</title><sect3><title>The rows Property</title>
<para>The rows property is used to control how many rows are visible. By setting it to zero, the tree control will resize itself to hold as many as items if possible.</para></sect3><sect3><title>The checkmark Property</title>
<para>
<graphic fileref="images/10000000000001980000007BBA791396.png">2
			
		</graphic>The checkmark property controls whether to display a checkbox or a radio button in front of each tree item.</para></sect3><sect3><title>The vflex Property</title>
<para>The vflex property controls whether to grow and shrink vertical to fit their given space. It is so-called vertical flexibility. For example, if the tree is too big to fit in the browser window, it will shrink the height to make the whole tree visible in the browser window.</para>
<para>This property is ignored if the rows property is specified.</para></sect3><sect3><title>The maxlength Property</title>
<para>The maxlength property defines the maximal allowed characters being visible at the browser. By setting this property, you could make a narrower tree control.</para></sect3><sect3><title>Sizable Columns</title>
<para>Like columns, you can set the sizable property of treecols to true to allow users to resize the width of tree headers. Similarly, the onColSize event is sent when a user resized the widths.</para></sect3></sect2><sect2><title>Create-on-Open for Tree Controls</title>
<para>As illustrated below, you could listen to the onOpen event, and then load the children of an tree item. Similarly, you could do create-on-open for group boxes.</para>
<programlisting>&lt;tree width="200px"&gt;&#13;    &lt;treecols&gt;    &#13;        &lt;treecol label="Subject"/&gt;        &#13;        &lt;treecol label="From"/&gt;        &#13;    &lt;/treecols&gt;    &#13;    &lt;treechildren&gt;    &#13;        &lt;treeitem open="false" onOpen="load()"&gt;        &#13;            &lt;treerow&gt;            &#13;                &lt;treecell label="Intel Snares XML"/&gt;                &#13;                &lt;treecell label="David Needle"/&gt;                &#13;            &lt;/treerow&gt;            &#13;            &lt;treechildren/&gt;            &#13;        &lt;/treeitem&gt;        &#13;    &lt;/treechildren&gt;    &#13;    &lt;zscript&gt;    &#13;    void load() {    &#13;        Treechildren tc = self.getTreechildren();        &#13;        if (tc.getChildren().isEmpty()) {        &#13;            Treeitem ti = new Treeitem();            &#13;            ti.setLabel("New added");            &#13;            ti.setParent(tc);            &#13;        }        &#13;    }    &#13;    &lt;/zscript&gt;    &#13;&lt;/tree&gt;&#13;</programlisting></sect2></sect1><sect1><title>Comboboxes</title>
<para>Components: combobox and comboitem.</para>
<para>A combobox is a special text box that embeds a drop-down list. With comboboxes, users are allowed to select from a drop-down list, in addition to entering the text manually.</para>
<programlisting>&lt;combobox&gt;<inlinegraphic fileref="images/10000000000000B50000004419304D81.png" align="right"/>&#13;    &lt;comboitem label="Simple and Rich"/&gt;    &#13;    &lt;comboitem label="Cool!"/&gt;    &#13;    &lt;comboitem label="Ajax and RIA"/&gt;    &#13;&lt;/combobox&gt;&#13;</programlisting>
<para>Mouseless Entrycombobox</para>
<itemizedlist>
<listitem>
<para>Alt+DOWN to pop up the list.</para>
</listitem>
<listitem>
<para>Alt+UP or ESC to close the list.</para>
</listitem>
<listitem>
<para>UP and DOWN to change the selection of the items from the list.</para>
</listitem>
</itemizedlist><sect2><title>The autodrop Property</title>
<para>By default, the drop-down list won't be opened until user clicks the <graphic fileref="images/100000000000000F00000015A76D2BBC.png">2
			
		</graphic> button, or press Alt+DOWN. However, you could set the autodrop property to true, such that the drop-down list is opened as soon as user types any character. This is helpful for novice users, but it might be annoying for experienced users.</para>
<programlisting>&lt;combobox autodrop="true"/&gt;&#13;</programlisting></sect2><sect2><title>The description Property</title>
<para>You could add a description to each combo item to make it more descriptive. In addition, you could assign an image to each combo item.</para>
<programlisting>&lt;combobox&gt;&#13;    &lt;comboitem label="Simple and Rich" image="/img/coffee.gif"    &#13;    description="The simplest way to make Web applications rich"/&gt;    &#13;    &lt;comboitem label="Cool!" image="/img/corner.gif"    &#13;    description="The coolest technology"/&gt;    &#13;    &lt;comboitem label="Ajax and RIA" image="/img/cubfirs.gif"    &#13;    description="Rich Internet Application by Ajax"/&gt;    &#13;&lt;/combobox&gt;&#13;</programlisting>
<para>
<graphic fileref="images/10000000000001210000007CA44D783C.png">2
			
		</graphic>Like other components that support images, you could use the setImageContent method to assign the content of a dynamically generated image to the comboitem component. Refer to the Image section for details.</para></sect2><sect2><title>The onOpen Event</title>
<para>The onOpen event is sent to the application, when user opens the drop-down list. To defer the creation of combo items, you can use the fulfill attribute as shown below.</para>
<programlisting>&lt;combobox fulfill="onOpen"&gt;<inlinegraphic fileref="images/10000000000000B50000004419304D81.png" align="right"/>&#13;    &lt;comboitem label="Simple and Rich"/&gt;    &#13;    &lt;comboitem label="Cool!"/&gt;    &#13;    &lt;comboitem label="Ajax and RIA"/&gt;    &#13;&lt;/combobox&gt;&#13;</programlisting>
<para>Alternatively, you can listen to the onOpen event, and then prepare the drop-down list or change it dynamically in the listener as shown below. </para>
<programlisting>&lt;combobox id="combo" onOpen="prepare()"/&gt;&#13;&lt;zscript&gt;&#13;    void prepare() {    &#13;        if (event.isOpen() &amp;amp;&amp;amp; combo.getItemCount() == 0) {        &#13;            combo.appendItem("Simple and Rich");            &#13;            combo.appendItem("Cool!");            &#13;            combo.appendItem("Ajax and RIA");            &#13;        }        &#13;    }    &#13;&lt;/zscript&gt;&#13;</programlisting>
<para>The appendItem method is equivalent to create a combo item and then assign its parent to the comobox.</para></sect2><sect2><title>The onChanging Event</title>
<para>Since a combobox is also a text box, the onChanging event will be sent if you add a listener for it. By listening to this event, you could manipulate the drop-down list as the Google Suggests<footnote>
<para>http://www.google.com/webhp?complete=1&amp;hl=en</para>
</footnote> does. This feature is sometimes called autocomplete.</para>
<para>As illustrated below, you could fill the drop-down list based on what user is entering.</para>
<programlisting>&lt;combobox id="combo" autodrop="true" onChanging="suggest()"/&gt;&#13;&lt;zscript&gt;&#13;    void suggest() {    &#13;        combo.getItems().clear();        &#13;        if (event.value.startsWith("A")) {        &#13;            combo.appendItem("Ace");            &#13;            combo.appendItem("Ajax");            &#13;            combo.appendItem("Apple");            &#13;        } else if (event.value.startsWith("B")) {        &#13;            combo.appendItem("Best");            &#13;            combo.appendItem("Blog");            &#13;        }        &#13;    }    &#13;&lt;/zscript&gt;&#13;</programlisting>
<para>Notice that, when the onChanging event is received, the content of the combobox is not changed yet. Thus, you cannot use the value property of the combobox. Rather, you shall use the value property of the event (org.zkoss.zk.ui.event.InputEvent).</para></sect2></sect1><sect1><title>Bandboxes</title>
<para>Components: bandbox and bandpopup.</para>
<para>A bandbox is a special text box that embeds a customizable popup window (aka., a dropdown window). Like comboboxes, a bandbox consists of an input box and a popup window. The popup window is opened automatically, when users presses Alt+DOWN or clicks the <graphic fileref="images/10000000000000150000001699487861.png">2
			
		</graphic> button.</para>
<para>Unlike comboboxes, the popup window of a bandbox could be anything. It is designed to give developers the maximal flexibility. A typical use is to represent the popup window as a search dialog.</para>
<programlisting>        &lt;bandboxid="bd"&gt;        <inlinegraphic fileref="images/10000000000000E80000008E1E66A663.png" align="right"/>&#13;        &lt;bandpopup&gt;        &#13;                &lt;vbox&gt;                &#13;            &lt;hbox&gt;Search&lt;textbox/&gt;&lt;/hbox&gt;            &#13;            &lt;listboxwidth="200px"            &#13;            onSelect="bd.value=self.selectedItem.label;bd.closeDropdown();"&gt;            &#13;            &lt;listhead&gt;            &#13;                    &lt;listheaderlabel="Name"/&gt;                    &#13;                    &lt;listheaderlabel="Description"/&gt;                    &#13;            &lt;/listhead&gt;            &#13;            &lt;listitem&gt;            &#13;                    &lt;listcelllabel="John"/&gt;                    &#13;                    &lt;listcelllabel="CEO"/&gt;                    &#13;            &lt;/listitem&gt;            &#13;            &lt;listitem&gt;            &#13;                    &lt;listcelllabel="Joe"/&gt;                    &#13;                    &lt;listcelllabel="Engineer"/&gt;                    &#13;            &lt;/listitem&gt;            &#13;            &lt;listitem&gt;            &#13;                    &lt;listcelllabel="Mary"/&gt;                    &#13;                    &lt;listcelllabel="Supervisor"/&gt;                    &#13;            &lt;/listitem&gt;            &#13;        &lt;/listbox&gt;        &#13;        &lt;/vbox&gt;        &#13;        &lt;/bandpopup&gt;        &#13;    &lt;/bandbox&gt;    &#13;</programlisting>
<para>Mouseless Entrybandbox</para>
<itemizedlist>
<listitem>
<para>Alt+DOWN to pop up the list.</para>
</listitem>
<listitem>
<para>Alt+UP or ESC to close the list.</para>
</listitem>
<listitem>
<para>UP and DOWN to change the selection of the items from the list.</para>
</listitem>
</itemizedlist><sect2><title>The closeDropdown Method</title>
<para>A popup window could contain any kind of components, so it is developer's job to copy the value from and close the popup if one of item is selected.</para>
<para>In the above example, we copy the selected item's label to the bandbox, and then close the popup by the following statement.</para>
<programlisting>&lt;listbox width="200px" onSelect="bd.value=self.selectedItem.label; bd.closeDropdown();"&gt;&#13;</programlisting></sect2><sect2><title>The autodrop Property</title>
<para>By default, the popup window won't be opened until user clicks the <graphic fileref="images/10000000000000150000001699487861.png">2
			
		</graphic> button, or press Alt+DOWN. However, you could set the autodrop property to true, such that the popup is opened as soon as user types any character. This is helpful for novice users, but it might be annoying for experienced users.</para>
<programlisting>&lt;bandbox autodrop="true"/&gt;&#13;</programlisting></sect2><sect2><title>The onOpen Event</title>
<para>The onOpen event is sent to the application if the user opens the popup window. By use of the fulfill attribute with the onOpen value as shown below, you can defer the creation of the popup window.</para>
<programlisting>&lt;bandbox fulfill="onOpen"&gt;&#13;    &lt;bandpopup&gt;    &#13;    ...    &#13;    &lt;/bandpopup&gt;    &#13;&lt;/bandbox&gt;&#13;</programlisting>
<para>Alternatively, you could prepare the popup window in Java by listening to the onOpen event, as depicted below. </para>
<programlisting>&lt;bandbox id="band" onOpen="prepare()"/&gt;&#13;&lt;zscript&gt;&#13;    void prepare() {    &#13;        if (event.isOpen() &amp;amp;&amp;amp; band.getPopup() == null) {        &#13;            ...//create child elements            &#13;        }        &#13;    }    &#13;&lt;/zscript&gt;&#13;</programlisting></sect2><sect2><title>The onChanging Event</title>
<para>Since a bandbox is also a text box, the onChanging event will be sent if you add a listener for it. By listening to this event, you could manipulate the popup window any way you like.</para>
<para>As illustrated below, you could fill the drop-down list based on what user is entering.</para>
<programlisting>&lt;bandbox id="band" autodrop="true" onChanging="suggest()"/&gt;&#13;&lt;zscript&gt;&#13;    void suggest() {    &#13;        if (event.value.startsWith("A")) {        &#13;            ...//do something            &#13;        } else if (event.value.startsWith("B")) {        &#13;            ...//do another            &#13;        }        &#13;    }    &#13;&lt;/zscript&gt;&#13;</programlisting>
<para>Notice that, when the onChanging event is received, the content of the bandbox is not changed yet. Thus, you cannot use the value property of the bandbox. Rather, you shall use the value property of the event (org.zkoss.zk.ui.event.InputEvent).</para></sect2></sect1><sect1><title>Chart</title>
<para>Components: chart</para>
<para>A chart is used to show a set of data as a graph. It helps users to judge things with a snapshot. </para>
<para>The usage of chart component is straightforward. Prepare suitable data model and feed it into the chart . The following is an example of pie chart.</para>
<para/>
<programlisting>&lt;chart id="mychart" type="pie" width="400" height="200" threeD="true" fgAlpha="128"&gt;&#13;&lt;zscript&gt;&lt;![CDATA[&#13; PieModel model = new SimplePieModel();<inlinegraphic fileref="images/10000000000001370000005ED5356D68.png" align="right"/>&#13;model.setValue("C/C++", new Double(17.5));&#13;model.setValue("PHP", new Double(32.5));&#13;model.setValue("Java", new Double(43.2));&#13;model.setValue("VB", new Double(10.0));&#13;mychart.setModel(model);&#13;]]&gt;&lt;/zscript&gt;&#13;&lt;/chart&gt;&#13;</programlisting>
<para>Different kind of chart is used to demonstrate different kind of data; therefore, chart has to be provided suitable data model. For a pie chart, developers must provide PieModel as their data model while bar chart, line chart, area chart, and waterfall chart needs CategoryModel and XYModel.</para><sect2><title>Live Data</title>
<para>The above example is somehow a little bit misleading. In fact, developers don't have to prepare the real data before feed it into a chart because chart components support live data mechanism. With live data, developers could separate the data from the view. In other words, developer can add, change, and remove data from the data model and the chart would be redrawn accordingly. For some advanced implementation, developers can even provide their own chart model by implementing the org.zkoss.zul.ChartModel interface. </para></sect2><sect2><title>Drill Down (The onClick Event)</title>
<para>When a user views a chart and finds something interesting, it is natural that the user would like to see the detail information regarding that interesting point. It is usually a pie in a pie chart, a bar in a bar chart or a point in a line chart. Chart components support such drill down facility by automatically cutting a chart into area components and users can then click on the chart to fire an onClick MouseEvent. Developers then locate the area component and do whatever appropriate drill down.</para>
<para>In the area component's componentScope there are some useful information that developers can use them.</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>name</para>
</entry>
<entry>
<para>description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>entity</para>
</entry>
<entry>
<para>Entity type of the area. (e.g. TITLE, DATA, CATEGORY, LEGEND)</para>
</entry>
</row>
<row>
<entry>
<para>series</para>
</entry>
<entry>
<para>Series name of the associated data (CategoryModel, XYModel, or HiLoModel). </para>
</entry>
</row>
<row>
<entry>
<para>category</para>
</entry>
<entry>
<para>Category name of the associated data (PieModel or CategoryModel).</para>
</entry>
</row>
<row>
<entry>
<para>url</para>
</entry>
<entry>
<para>An url in string that can be used to drill down to a legacy page.</para>
</entry>
</row>
<row>
<entry>
<para>value</para>
</entry>
<entry>
<para>Numeric value of the associated data ( PieModel or CategoryModel).</para>
</entry>
</row>
<row>
<entry>
<para>x</para>
</entry>
<entry>
<para>x value of the associated data (XYModel).</para>
</entry>
</row>
<row>
<entry>
<para>y</para>
</entry>
<entry>
<para>y value of the associated data (XYModel).</para>
</entry>
</row>
<row>
<entry>
<para>date</para>
</entry>
<entry>
<para>date value of the associated data (HiLoModel).</para>
</entry>
</row>
<row>
<entry>
<para>open</para>
</entry>
<entry>
<para>open value of the associated data (HiLoModel).</para>
</entry>
</row>
<row>
<entry>
<para>high</para>
</entry>
<entry>
<para>high value of the associated data (HiLoModel).</para>
</entry>
</row>
<row>
<entry>
<para>low</para>
</entry>
<entry>
<para>low value of the associated data (HiLoModel).</para>
</entry>
</row>
<row>
<entry>
<para>close</para>
</entry>
<entry>
<para>close value of the associated data (HiLoModel).</para>
</entry>
</row>
<row>
<entry>
<para>volume</para>
</entry>
<entry>
<para>volume value of the associated data (HiLoModel).</para>
</entry>
</row></tbody></tgroup>
</informaltable>
<para>In the following example, we provide an onClick event listener on the chart. It locates the associated area component and show the category of that area (i.e. the pie).</para>
<programlisting>&lt;chart id="mychart" type="pie" width="400" height="250"&gt;&#13;&lt;attribute name="onClick"&gt;&#13;alert(self.getFellow(event.getArea()).getAttribute("category"));&#13;&lt;/attribute&gt;&#13;&lt;zscript&gt;&lt;![CDATA[&#13;PieModel model = new PieModel();&#13;model.setValue("C/C++", new Double(17.5));&#13;model.setValue("PHP", new Double(32.5));&#13;model.setValue("Java", new Double(43.2));&#13;model.setValue("VB", new Double(10.0));&#13;mychart.setModel(model);&#13;]]&gt;&lt;/zscript&gt;&#13;&lt;/chart&gt;&#13;</programlisting></sect2><sect2><title>Manipulate Areas</title>
<para>Chart components also provide a area renderer mechanism that developers can manipulate the cutting area components of the chart. </para>
<para>Only two steps needed to use the area renderer.</para>
<orderedlist>
<listitem>
<para>Implement the org.zkoss.zul.event.ChartAreaListener interface for manipulating the area components. e.g. Change the tooltiptext of the area.</para>
</listitem>
<listitem>
<para>Set the listener object or listener class name to the chart's areaListener property.</para>
</listitem>
</orderedlist>
<para>So developers get a chance to change the area component's properties or insert more information into the area component's componentScope property and thus be passed through to the onClick event listener.</para></sect2></sect1><sect1><title>Drag and Drop</title>
<para>ZK allows a user to drag particular components around within the user interface. For example, dragging files to other directories, or dragging an item to the shopping cart to purchase. </para>
<para>A component is draggable if it can be dragged around. A component is droppable, if a user could drop a draggable component to it.</para>
<para>Note: ZK does not assume any behavior about what shall take place after dropping. It is up to application developers by writing the onDrop event listener.</para>
<para>If an application doesn't nothing, the dragged component is simply moved back where it is originated from.</para><sect2><title>The draggable and droppable Properties</title>
<para>With ZK, you could make a component draggable by assigning any value, other than "false", to the draggable property. To disable it, assign it with "false".</para>
<programlisting>&lt;image draggable="true"/&gt;&#13;</programlisting>
<para>Similarly, you could make a component droppable by assigning "true" to the droppable property.</para>
<programlisting>&lt;hbox droppable="true"/&gt;&#13;</programlisting>
<para>Then, user could drag a draggable component, and then drop it to a droppable component.</para></sect2><sect2><title>The onDrop Event</title>
<para>Once user has dragged a component and dropped it to another component, the component that the user dropped the component to will be notified by the onDrop event. The onDrop event is an instance of org.zkoss.ui.event.DropEvent. By calling the getDragged method, you could retrieve what has been dragged (and dropped).</para>
<para>Notice that the target of the onDrop event is the droppable component, not the component being dragged.</para>
<para>The following is a simple example that allows users to reorder list items by drag-and-drop.</para>
<para>
<graphic fileref="images/1000000000000213000000B4ADEE091E.png">2
			
		</graphic>
</para>
<programlisting>&lt;window title="Reorder by Drag-and-Drop" border="normal"&gt;&#13;    Unique Visitors of ZK:    &#13;    &lt;listbox id="src" multiple="true" width="300px"&gt;    &#13;        &lt;listhead&gt;        &#13;            &lt;listheader label="Country/Area"/&gt;            &#13;            &lt;listheader align="right" label="Visits"/&gt;            &#13;            &lt;listheader align="right" label="%"/&gt;            &#13;        &lt;/listhead&gt;        &#13;        &lt;listitem draggable="true" droppable="true" onDrop="move(event.dragged)"&gt;        &#13;            &lt;listcell label="United States"/&gt;            &#13;            &lt;listcell label="5,093"/&gt;            &#13;            &lt;listcell label="19.39%"/&gt;            &#13;        &lt;/listitem&gt;        &#13;        &lt;listitem draggable="true" droppable="true" onDrop="move(event.dragged)"&gt;        &#13;            &lt;listcell label="China"/&gt;            &#13;            &lt;listcell label="4,274"/&gt;            &#13;            &lt;listcell label="16.27%"/&gt;            &#13;        &lt;/listitem&gt;        &#13;        &lt;listitem draggable="true" droppable="true" onDrop="move(event.dragged)"&gt;        &#13;            &lt;listcell label="France"/&gt;            &#13;            &lt;listcell label="1,892"/&gt;            &#13;            &lt;listcell label="7.20%"/&gt;            &#13;        &lt;/listitem&gt;        &#13;        &lt;listitem draggable="true" droppable="true" onDrop="move(event.dragged)"&gt;        &#13;            &lt;listcell label="Germany"/&gt;            &#13;            &lt;listcell label="1,846"/&gt;            &#13;            &lt;listcell label="7.03%"/&gt;            &#13;        &lt;/listitem&gt;        &#13;        &lt;listitem draggable="true" droppable="true" onDrop="move(event.dragged)"&gt;        &#13;            &lt;listcell label="(other)"/&gt;            &#13;            &lt;listcell label="13,162"/&gt;            &#13;            &lt;listcell label="50.01%"/&gt;            &#13;        &lt;/listitem&gt;        &#13;        &lt;listfoot&gt;        &#13;            &lt;listfooter label="Total 132"/&gt;            &#13;            &lt;listfooter label="26,267"/&gt;            &#13;            &lt;listfooter label="100.00%"/&gt;            &#13;        &lt;/listfoot&gt;        &#13;    &lt;/listbox&gt;    &#13;    &lt;zscript&gt;    &#13;    void move(Component dragged) {    &#13;        self.parent.insertBefore(dragged, self);        &#13;    }    &#13;    &lt;/zscript&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect2><sect2><title>Dragging with Multiple Selections</title>
<para>When a user drag-and-drops a list item or a tree item, the selection status of these items won't be changed. Visually only the dragged item is moved, but you can handle all selected items at once by looking up the set of all selected items as depicted below.</para>
<programlisting>public void onDrop(DropEvent evt) {&#13;    Set selected = ((Listitem)evt.getDragged()).getListbox().getSelectedItems();    &#13;    //then, you can handle the whole set at once    &#13;}&#13;</programlisting>
<para>Notice that the dragged item may not be selected. Thus, you may prefer to change the selection to the dragged item for this case, as shown below.</para>
<programlisting>Listitem li = (Listitem)evt.getDragged();&#13;if (li.isSelected()) {&#13;    Set selected = ((Listitem)evt.getDragged()).getListbox().getSelectedItems();    &#13;    //then, you can handle the whole set at once    &#13;} else {&#13;    li.setSelected(true);    &#13;    //handle li only    &#13;}&#13;</programlisting></sect2><sect2><title>Multiple Types of Draggable Components</title>
<para>It is common that a droppable component doesn't accept all draggable components. For example, an e-mail folder accepts only e-mails and it rejects contacts or others. You could silently ignore non-acceptable components or alert an message, when onDrop is invoked.</para>
<para>To have better visual effect, you could identify each type of draggable components with an identifier, and then assign the identifier to the draggable property.</para>
<programlisting>&lt;listitem draggable="email"/&gt;&#13;...&#13;&lt;listitem draggable="contact"/&gt;&#13;</programlisting>
<para>Then, you could specify a list of identifiers to the droppable property to limit what can be dropped. For example, the following image accepts only email and contact.</para>
<programlisting>&lt;image src="/img/send.png" droppable="email, contact" onDrop="send(event.dragged)"/&gt;&#13;</programlisting>
<para>To accept any kind of draggable components, you could specify "true" to the droppable property. For example, the following image accepts any kind of draggable components.</para>
<programlisting>&lt;image src="/img/trash.png" droppable="true" onDrop="remove(event.dragged)"/&gt;&#13;</programlisting>
<para>On the other hand, if the draggable property is "true", it means the component belongs to anonymous type. Furthermore, only components with the droppable property assigned to "true" could accept it.</para></sect2></sect1><sect1><title>Work with HTML Tags</title>
<para>There are several ways to use HTML tags with XUL components in the same ZUML page. You can chose any of them based on your requirement.</para>
<para>First, you can use the html component to embed HTML tags. With this approach, the HTML tags are simply the content of the html component. They are sent to the client directly. They don't have any specify meaning to ZK.</para>
<para>Second, you can use the XHTML namespace (<ulink url="http://www.w3.org/1999/xhtml">http://www.w3.org/1999/xhtml</ulink>
<ulink url="http://www.w3.org/1999/xhtml">) </ulink>to specify a component from the XHTML component set. In othere words, the XHTML namespace denotes the associate XML element is a component from the XHTML component set. Like the ZUL component set (http://www.zkoss.org/2005/zul), ZK creates an instance for each XML element in a ZUML page.</para>
<para>Third, you can use the Native namespace <ulink url="http://www.w3.org/1999/xhtml">(</ulink>
<ulink url="http://www.zkoss.org/2005/zk/inline">http://www.zkoss.org/2005/zk/native</ulink>) to represent a HTML tag that shall be sent directly to the client instead of creating a ZK component for each of them. When It is more efficient, but not dynamically changeable.</para>
<para>Last but not least, you can use inclusion (include) and inline frames (iframe) to embed another into a ZUL page with, theoretically, any kind of content (not limited to HTML tags</para><sect2><title>The html Component</title>
<para>The simplest way is to use a XUL component called html<footnote>
<para>The text within the html element is actually assigned to the html component's content property (rather than becoming a label child).</para>
</footnote> to embed whatever HTML tags you want to send directly to the browser. To avoid ZK from interpreting the HTML tags, you usually enclose them with &lt;![CDATA[ and ]]&gt;. In other words, they are not the child component. Rather, they are stored in the content property<footnote>
<para>Refer to the XML section in the ZK User Interface Markup Language chapter if you are not familiar with XML.</para>
</footnote>. Notice you can use EL expressions in it.</para>
<programlisting>&lt;window title="Html Demo"&gt;&#13;    &lt;html&gt;&lt;![CDATA[    &#13;        &lt;h4&gt;Hi, ${parent.title}&lt;/h4&gt;        &#13;        &lt;p&gt;It is the content of the html component.&lt;/p&gt;        &#13;    ]]&gt;&lt;/html&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>where &lt;h4&gt;...&lt;/p&gt; will become the content of the html element (see also the getContent method of the org.zkoss.zul.Html class).</para>
<para>Tip: You can use the attribute element to specify the XHTML fragment instead of CDATA as follows.</para>
<para>&lt;html&gt; &lt;attribute name="content"&gt; &lt;h4&gt;Hi, ${parent.title}&lt;/h4&gt; &lt;p&gt;It is the content of the html component.&lt;/p&gt;</para>
<para>&lt;/attribute&gt;&lt;/html&gt;</para>
<para>Refer to the attribute Element section in the ZK User Interface Markup Language chpater..</para>
<para>The html component generates the HTML SPAN tag to enclose the content. In other words, it generates the following HTML tags when rendered to the browser.</para>
<programlisting>&lt;span id="z_4a_3"&gt;&#13;    &lt;h4&gt;Hi, Html Demo&lt;/h4&gt;    &#13;    &lt;p&gt;It is the content of the html component.&lt;/p&gt;    &#13;&lt;/span&gt;&#13;</programlisting>
<para>The html component is no different to other XUL components. For example, you specify the CSS style and change its content dynamically.</para>
<programlisting>&lt;html id="h" style="border: 1px solid blue;background: yellow"&gt;&lt;![CDATA[&#13;    &lt;ul&gt;    &#13;        &lt;li&gt;Native browser content&lt;/li&gt;        &#13;    &lt;/ul&gt;    &#13;]]&gt;&lt;/html&gt;&#13;&lt;button label="change" onClick="l.setContent(&amp;quot;Hi, Update&amp;quot;)"/&gt;&#13;</programlisting>
<para>Notice that, since SPAN is used to enclose the embedded HTML tags, the following code snippet is incorrect.</para>
<programlisting>&lt;html&gt;&lt;![CDATA[&#13;    &lt;ul&gt;    &#13;        &lt;li&gt; &lt;!-- incorrect since &lt;ul&gt;&lt;li&gt; is inside &lt;span&gt; --&gt;        &#13;]]&gt;&lt;/html&gt;&#13;&#13;&lt;textbox/&gt;&#13;&#13;&lt;html&gt;&lt;![CDATA[&#13;        &lt;/li&gt;        &#13;    &lt;/ul&gt;    &#13;]]&lt;/html&gt;&#13;</programlisting>
<para>If you need to generate the embedded HTML tags directly without the enclosing SPAN tag, you can use the Native namespace as described in the following section.</para></sect2><sect2><title>The Native Namespace, <ulink url="http://www.zkoss.org/2007/inline">http://www.zkoss.org/2005/zk/native</ulink>
</title>
<ulink url="http://www.zkoss.org/2007/inline">http://www.zkoss.org/2005/zk/native</ulink>
<para>With the Native namespace, a XML element in a ZUML page denotes that it shall be sent to the browser directly rather than becoming a ZK component. For example,</para>
<programlisting>&lt;n:ul xmlns:n="http://www.zkoss.org/2005/zk/native"&gt;&#13;    &lt;n:li&gt;    &#13;    &lt;textbox/&gt;    &#13;    &lt;/n:li&gt;    &#13;    &lt;n:li&gt;    &#13;    &lt;textbox/&gt;    &#13;    &lt;/n:li&gt;    &#13;&lt;/n:ul&gt;&#13;</programlisting>
<para>will generate the following HTML tags to the browser:</para>
<programlisting>&lt;ul&gt;&#13;    &lt;li&gt;    &#13;    &lt;input id="z_a3_2"/&gt;    &#13;    &lt;/li&gt;    &#13;    &lt;li&gt;    &#13;    &lt;input id="z_a3_5"/&gt;    &#13;    &lt;/li&gt;    &#13;&lt;/ul&#13;</programlisting>
<para>where &lt;input&gt; is the HTML tag(s) generated by the textbox component. Unlike textbox in the example above, ZK Loader doesn't really create a component for each of ul and li.<footnote>
<para>ZK ZK actually creates a special component to represent as many XML elements with the Native namespace as possible.</para>
</footnote> Rather, they are sent to the client directly. Of course, they must be recognizable by the client. For HTML browsers, they must be the valid HTML tags.</para>
<para>Since the elements associated with the Native namespace are sent directly to the client, they are not ZK components, and they don't have the counterpart at the client. The advantage is the better performance in term of both memory and processing time. On the other hand, the disadvantage is you cannot access or change them dynamically. For example, the following code snippet is incorrect, since there is no component called x.</para>
<programlisting>&lt;n:ul id="x" xmlns:n="http://www.zkoss.org/2005/zk/native"/&gt;&#13;&lt;button label="add" onClick="new Li().setParent(x)"/&gt;&#13;</programlisting>
<para>If you want to change them dynamically, you can specify the XHTML namespace as described in the following section.</para><sect3><title>Output Another Namespace with the Native Namespace</title>
<para>If you want to generate another namespace to the output, you can use another format as the URI of the Native namespace:</para>
<programlisting>native:URI-of-another-namespace&#13;</programlisting>
<para>For example, if you want to output the SVG tags directly to the client, you can specify native:native:http://www.w3.org/2000/svg as follows.</para>
<programlisting>&lt;window&gt;&#13;    &lt;svg width="100%" height="100%" version="1.1"    &#13;xmlns="native:http://www.w3.org/2000/svg"&gt;&#13;        &lt;ellipse cx="240" cy="100" rx="220" ry="30" style="fill:purple"/&gt;        &#13;    &lt;/svg&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Then, the client will receive the following:</para>
<programlisting>&lt;div id="z_lx_0c" z.type="zul.wnd.Wnd"&gt;46The real HTML output of window depends on its implementation. Here is only a simplified version.&#13;    &lt;svg width="100%" height="100%" version="1.1"    &#13;xmlns="http://www.w3.org/2000/svg"&gt;&#13;        &lt;ellipse cx="240" cy="100" rx="220" ry="30" style="fill:purple"/&gt;        &#13;    &lt;/svg&gt;    &#13;&lt;/div&gt;&#13;</programlisting></sect3></sect2><sect2><title>The XHTML Namespace, <ulink url="http://www/">http://www.</ulink>w3.org/1999/xhtml</title>
<ulink url="http://www/">http://www.</ulink>
<para>The XHTML namespace represents the XHTML component set, just like the ZUL namespace (<ulink url="http://www/">http://www.</ulink>zkoss.org/2005/zul) represents the ZUL component set. Thus, a XML element specified with the XHTML namespace simply denotes a component that shall be created based on the component definition from the XHTML component set. For example, the statement blow specifies a component that shall be created as an instance of the component definition called ul, and ul belongs to the XHTML component set:</para>
<programlisting>&lt;h:ul xmlns:h="http://www.w3.org/1999/xhtml"&gt;&#13;</programlisting>
<para>In other words, ZK loader will search the XHTML component set for the component definition called ul , and then create an instance based on it.</para>
<para>The following is another yet more complete example.</para>
<programlisting>&lt;window title="mix HTML demo" xmlns:h="http://www.w3.org/1999/xhtml"&gt;&#13;    &lt;h:table border="1"&gt;    &#13;        &lt;h:tr id="row1"&gt;        <inlinegraphic fileref="images/10000000000000B7000000350D72C956.png" align="right"/>&#13;            &lt;h:td&gt;column 1&lt;/h:td&gt;            &#13;            &lt;h:td&gt;            &#13;                &lt;listbox id="list" mold="select"&gt;                &#13;                    &lt;listitem label="AA"/&gt;                    &#13;                    &lt;listitem label="BB"/&gt;                    &#13;                &lt;/listbox&gt;                &#13;            &lt;/h:td&gt;            &#13;        &lt;/h:tr&gt;        &#13;    &lt;/h:table&gt;    &#13;    &lt;button label="add" onClick="new org.zkoss.zhtml.Td().append(row1)"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Unlike the html components, where HTML tags are stored in the content property, ZK loader creates one component for each of them. The advantage is that you can manipulate each individual HTML tag dynamically, as depicted in the above example (the add button). The disadvantage is that they take longer to process and more space to maintain.</para>
<para>Tip: Unlike the XHTML namespace, the Native namespace doesn't represent another component set. It is a reserved namespace to tell ZK Loader to send them directly to the client for better performance.</para></sect2><sect2><title>The include Component</title>
<para>The include component is used to include the output generated by another servlet. The servlet could be anything including JSF, JSP and even another ZUML page.</para>
<programlisting>&lt;window title="include demo" border="normal" width="300px"&gt;&#13;    Hello, World!    &#13;    &lt;include src="/userguide/misc/includedHello.zul"/&gt;    &#13;    &lt;include src="/html/frag.html"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Like all other properties, you could dynamically change the src attribute to include the output from a different servlet at the run time.</para>
<para>If the included output is another ZUML, developers are allowed to access components in the included page as if they are part of the containing page.</para><sect3><title>Pass Values to the Included Page</title>
<para>There are two ways to pass values to the included page. First, you can pass them with the query string.</para>
<programlisting>&lt;include src="mypage?some=something"/&gt;&#13;</programlisting>
<para>Then, in the included page, you can access them with the getParameter method of the Execution interface or the ServletRequest interface. In EL expressions (of the included page), you can use the param variable to access them. However, you can only pass String-typed values with the query string.</para>
<programlisting>${param.some}&#13;</programlisting>
<para>Alternatively, we can pass any kind of values with the so-called dynamic properties by use of the setDynamicProperty method or, in ZUL, a dynamic property as follows:</para>
<programlisting>&lt;include src="mypage" some="something" another="${expr}"/&gt;&#13;</programlisting>
<para>With the dynamic properties, you can pass non-String-typed values. In the included page, you can access them with the getAttribute method of the Execution interface or the ServletRequest interface. In EL expressions (of the included page), you can use the requestScope variable to access them.</para>
<programlisting>${requestScope.some}&#13;</programlisting></sect3><sect3><title>Including ZUML Pages</title>
<para>If the include component is used to include a ZUML page, the included page will become part of the desktop. However, the included page is not visible until the request is processed completely. In other words, it is visible only in the following events, triggered by user or timer.</para>
<para>The reason is that the include component includes a page as late as the Rendering phase<footnote>
<para>Refer to the Component Lifecycle chapter for more details.</para>
</footnote>. On the other hand, zscript takes place at the Component Creation phase, and onCreate takes place at the Event Processing Phase. They both execute before the inclusion.</para>
<programlisting>&lt;window onCreate="desktop.getPages()"&gt; &lt;!-- the included page not available --&gt;&#13;    &lt;include src="/my.zul"/&gt;    &#13;    &lt;zscript&gt;    &#13;        desktop.getPages(); //the included page not available yet        &#13;    &lt;/zscript&gt;    &#13;    &lt;button label="Hit" onClick="desktop.getPages()"/&gt;    &#13;        &lt;!-- Yes, the included page is available when onClick is received --&gt;        &#13;&lt;/window&gt;&#13;</programlisting>
<para>If you want to look into the component of an included page, macro components are usually a better option. Refer to the Macro Components section in the ZK User Interface Markup Language chapter.</para></sect3></sect2><sect2><title>The style Component</title>
<para>The style component is used to specify CSS styles in a ZUML page. The simplest format is as follows.</para>
<programlisting>&lt;style&gt;<inlinegraphic fileref="images/100000000000002900000018A07459D1.png" align="right"/>&#13;.blue {&#13;color: white; background-color: blue;&#13;}&#13;&lt;/style&gt;&#13;&lt;button label="OK" sclass="blue"/&gt;&#13;</programlisting>
<para>Tip: To configure a style sheet for the whole application, specify theme-uri in zk.xml, refer to the Themes section in the Internationalization chpater, or Appendix B in the Developer's Reference for details. To configure a style sheet for a language, use the language addon, refer to the Component Development Guide.</para>
<para>Sometimes it is better to store all CSS definitions in an independent file, say my.css. Then, we could reference it by use of the style component as follows.</para>
<programlisting>&lt;style src="/my.css"/&gt;&#13;</programlisting>
<para>The above statement actually sends the following HTML tags<footnote>
<para>The real result depends on how your Web application is configured.</para>
</footnote> to the browser, so the specified file must be accessible by the browser.</para>
<programlisting>&lt;link rel="stylesheet" href="/css/mystyles.css"/&gt;&#13;</programlisting>
<para>In other words, you cannot specify "/WEB-INF/xx" or "<link linkend="">C:/xx/yy</link>".</para>
<para>Like other URI, it accepts "*" for loading browser and Locale dependent style sheet. Refer to the Browser and Locale Dependent URI section in the Internationalization chapter for details.</para></sect2><sect2><title>The script Component</title>
<para>The script component is used to specify the script codes running at the browser. Notice that, unlike zscript, the script codes are running at the browser. They are usually written in JavaScript which is supported by the most of browsers. The simplest format is as follows.</para>
<programlisting>&lt;script type="text/javascript"&gt;&#13;function myfunc() {&#13;    $e("${win.uuid}").style.backgroundColor = "blue";    &#13;}&#13;&lt;/script&gt;&#13;</programlisting>
<para>As shown above, you can use EL expressions (${win.uuid}) in script codes.</para>
<para>Of course, you can reference to an external JavaScript file with the src property as follows.</para>
<programlisting>&lt;script src="/js/super.js" type="text/javascript"/&gt;&#13;</programlisting>
<para>With ZK, developers rarely need to specify JavaScript codes to execute, since the ZK applications are running at the server (and execute in your favorite language). They are usually to customize the behavior of ZK Client Engine, or to run the legacy JavaScript libraries.</para></sect2><sect2><title>The iframe Component</title>
<para>The iframe component uses the HTML IFRAME tag to delegate a portion of the display to another URL. Though the appearance looks similar to the include component. The concept and meaning of the iframe component is different.</para>
<para>The content included by the include component is a fragment of the whole HTML page. Because the content is part of the HTML page, the content is part of the desktop and you could access any components, if any, inside of the include component. The inclusion is done at the server, and the browser knows nothing about it. It means the URL specified by the src property could be any internal resource.</para>
<para>The content of the iframe component is loaded by the browser as a separate page. Because it is loaded as a separate page, the format of the content could be different from HTML. For example, you could embed an PDF file.</para>
<programlisting>&lt;iframe src="/my.pdf"/&gt;&#13;...other HTML content&#13;</programlisting>
<para>Tip: By default, there is no border. To enable it, use the style attribute to specify it. For example,&lt;iframe style="border:1px inset" src="http://www.zkoss.org"/&gt;</para>
<para>The embedding is done by the browser, when it interprets the HTML page containing the IFRAME tag. It also implies that the URL must be a resource that you can access from the browser.</para>
<para>Like the image and audio components<footnote>
<para>In many ways, iframe is much similar to image and audio. You might consider it as a component for arbitrary content.</para>
</footnote>, you could specify the dynamically generated content. A typical example is you could use JasperReport<footnote>
<para>http://jasperreports.sourceforge.net</para>
</footnote> to generate a PDF report in a binary array or stream, and then pass the report to an iframe component by wrapping the result with the org.zkoss.util.media.AMedia class.</para>
<para>In the following example, we illustrate that you could embed any content by use of iframe, as long as the client supports its format.</para>
<programlisting>&lt;window title="iframe demo" border="normal"&gt;&#13;    &lt;iframe id="iframe" width="95%"/&gt;    &#13;    &lt;separator bar="true"/&gt;    &#13;    &lt;button label="Upload"&gt;    &#13;        &lt;attribute name="onClick"&gt;{        &#13;            Object media = Fileupload.get();            &#13;            if (media != null)            &#13;                iframe.setContent(media);                &#13;        }&lt;/attribute&gt;        &#13;    &lt;/button&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<informaltable frame="all">
<tgroup cols="2"><tbody>
<row>
<entry>
<para>
<graphic fileref="images/1000000000000275000001275F0B1F07.png">2
			
		</graphic>
</para>
</entry>
<entry>
<para>This picture depicted the appearance after user uploaded an Microsoft PowerPoint file.</para>
</entry>
</row></tbody></tgroup>
</informaltable><sect3><title>The onURIChange Event</title>
<para>When the user navigates the iframe component to another URL (or bookmark), an object of the org.zkoss.zk.ui.event.URIEvent class is sent to the iframe component. This event is usually used to bookmark the status of the iframe component, such that the right content can be restored later.</para></sect3><sect3><title>Integrate with Other Technologies</title>
<para>The onURIChange event won't be sent if the iframe component contains a non-ZK page. For example, it won't be sent if it contains a PDF page.</para>
<para>On the other hand, if you use other technologies to put a ZK page in an iframe, you can monitor the URL by writing a JavaScript method called onIframeChange as follows.</para>
<programlisting>//Part of your, say, PHP page&#13;&lt;script type="text/script"&gt;&#13;function onIframeChange(uuid, url) {&#13;    do_whatever_you_need_in_the_technology_you_use(uuid, url);    &#13;}&#13;&lt;/script&gt;&#13;</programlisting>
<para>where uuid is the ID of the element that you can retrieve by document.getElementById, and url is the new URL that the iframe is navigated to. Notice that url includes the context path, while URIEvent.getURI() does not.</para></sect3></sect2></sect1><sect1><title>Work with HTML FORM and Java Servlets</title>
<para>The event-driven model is simple and powerful, but it might not be practical to rewrite all servlets to replace with event listeners.</para><sect2><title>The name Property</title>
<para>To work with legacy Web applications, you could specify the name property as you did for HTML pages. For example,</para>
<programlisting>&lt;window xmlns:h="http://www.w3.org/1999/xhtml"&gt;<inlinegraphic fileref="images/10000000000002F70000003EBB733BC1.png" align="right"/>&#13;&lt;h:form method="post" action="/my-old-servlet"&gt;&#13;&lt;grid&gt;&#13;&lt;rows&gt;&#13;&lt;row&gt;When &lt;datebox name="when"/&gt; Name &lt;textbox name="name"/&gt; Department&#13;&lt;combobox name="department"&gt;&#13;&lt;comboitem label="RD"/&gt;&#13;&lt;comboitem label="Manufactory"/&gt;&#13;&lt;comboitem label="Logistics"/&gt;&#13;&lt;/combobox&gt;&#13;&lt;/row&gt;&#13;&lt;row&gt;&#13;&lt;h:input type="submit" value="Submit"/&gt;&#13;&lt;/row&gt;&#13;&lt;/rows&gt;&#13;&lt;/grid&gt;&#13;&lt;/h:form&gt;&#13;&lt;/window&gt;&#13;</programlisting>
<para>Once users press the submit button, a request is posted to the my-old-servlet servlet with the query string as follows.</para>
<programlisting>/my-old-servlet?when=2006%2F03%2F01&amp;name=Bill+Gates&amp;department=Manufactory&#13;</programlisting>
<para>Thus, as long as you maintain the proper associations between name and value, your servlet could work as usual without any modification.</para></sect2><sect2><title>Components that Support the name Property</title>
<para>All input-types components support the name property, such as textbox, datebox, decimalbox, intbox, combobox, bandbox, slider and calendar.</para>
<para>In addition, list boxes and tree controls are also support the name property. If the multiple property is true and users select multiple items, then multiple name/value pairs are posted.</para>
<programlisting>&lt;listbox name="who" multiple="true" width="200px"&gt;&#13;    &lt;listhead&gt;    &#13;        &lt;listheader label="name"/&gt;        &#13;        &lt;listheader label="gender"/&gt;        &#13;    &lt;/listhead&gt;    &#13;    &lt;listitem value="mary&gt;    &#13;        &lt;listcell label="Mary"/&gt;        &#13;        &lt;listcell label="FEMALE"/&gt;        &#13;    &lt;/listitem&gt;    &#13;    &lt;listitem value="john"&gt;    &#13;        &lt;listcell label="John"/&gt;        &#13;        &lt;listcell label="MALE"/&gt;        &#13;    &lt;/listitem&gt;    &#13;    &lt;listitem value="jane"&gt;    &#13;        &lt;listcell label="Jane"/&gt;        &#13;        &lt;listcell label="FEMALE"/&gt;        &#13;    &lt;/listitem&gt;    &#13;    &lt;listitem value="henry"&gt;    <inlinegraphic fileref="images/10000000000000D10000005D4B19ECE7.png" align="right"/>&#13;        &lt;listcell label="Henry"/&gt;        &#13;        &lt;listcell label="MALE"/&gt;        &#13;    &lt;/listitem&gt;    &#13;&lt;/listbox&gt;&#13;</programlisting>
<para>If both John and Henry are selected, then the query string will contain:</para>
<programlisting>who=john&amp;who=henry&#13;</programlisting>
<para>Notice that, to use list boxes and tree controls with the name property, you have to specify the value property for listitem and treeitem, respectively. They are the values being posted to the servlets.</para></sect2><sect2><title>Rich User Interfaces</title>
<para>Because a form component could contain any kind of components, the rich user interfaces could be implemented independent of the existent servlets. For example, you could listen to the onOpen event and fulfill a tab panel as illustrated in the previous sections. Yet another example, you could dynamically add more rows to a grid control, where each row might control input boxes with the name property. Once user submits the form, the most updated content will be posted to the servlet.</para></sect2></sect1><sect1><title>Client Side Actions</title>
<para>Some behaviors are better to be done at the client side with JavaScript codes, such as animations and image rollovers. In order to execute JavaScript codes at the client, ZK introduces the concept of Client Side Actions (CSA). With CSA, developers could listen to any JavaScript event and executes JavaScript codes at the client.</para>
<para>A CSA is similar to an event listener, except an action is is written in JavaScript and executes at the client. ZK allows developers to specify actions for any JavaScript events, such as onfocus, onblur, onmouseover and onmouseout, as long as your targeting browsers support them.</para>
<para>The syntax of a client-side action is as follows.</para>
<programlisting>action="[onfocus|onblur|onmouseover|onmouseout|onclick|onshow|onhide...]: javascript;"&#13;</programlisting>
<para>Notice that CSA is totally independent of ZK event listeners, though they might have the same name, such as onFocus. The differences include:</para>
<itemizedlist>
<listitem>
<para>CSA executes at the client side and takes place, before ZK event listener is called at the server.</para>
</listitem>
<listitem>
<para>CSA codes are written in JavaScript, while ZK event listeners are written in Java.</para>
</listitem>
<listitem>
<para>CSA could register to any event that your targeting browsers allow, while ZK supports events only list in the Events section.</para>
</listitem>
</itemizedlist><sect2><title>Reference to a Component</title>
<para>In the JavaScript codes, you can reference to a component or other objects with the late-binding EL expression. The late-binding EL expression starts with #{ and ending with } as depicted below.</para>
<programlisting>&lt;button action="onmouseover: action.show(#{parent.tip})"/&gt;&#13;</programlisting>
<para>The late-binding EL expressions are evaluated as late as the Rendering Phase. On the other hand, if you assign an EL expression starting with ${, it will be evaluated at the Component Creation Phase, before assigning to the action property. For example,</para>
<programlisting>&lt;button action="onfocus: action.show(${tip}); onblur: action.hide(${tip})"/&gt;&#13;&lt;div id="tip" visible="false"&gt;...&lt;/div&gt;&#13;</programlisting>
<para>will be evaluated to</para>
<programlisting>&lt;button action="onfocus: action.show(); onblur: action.hide()"/&gt;&#13;&lt;div id="tip" visible="false"&gt;...&lt;/div&gt;&#13;</programlisting>
<para>since the tip component is not created when assigning the action property.</para>
<para>Even if the referenced component was created before action is assigned, it is still incorrect, since the ZUML loader has no knowledge of CSA, and it converts the component to a string by invoking the toString method.</para>
<para>Of course, it doesn't prevent you from using ${} in an action, as depicted below. Just remember it is evaluated before assigning the action property.</para>
<programlisting>&lt;variables myaction="onfocus: action.show(#{tip}); onblur: action.hide(#{tip});"&#13;&lt;button action="${myaction} onmouseover: action.show(#{parent.parent.tip})"/&gt;&#13;</programlisting><sect3><title>An onfocus and onblur Example</title>
<para>In the following example, we demonstrated how to use client-side actions to provide on-line help. When user change the focus to any of the text boxes, a help message is displayed accordingly.</para>
<programlisting>&lt;grid&gt;&#13;    &lt;columns&gt;    <inlinegraphic fileref="images/1000000000000164000000379E269FE3.png" align="right"/>&#13;        &lt;column/&gt;        &#13;        &lt;column/&gt;        &#13;        &lt;column/&gt;        &#13;    &lt;/columns&gt;    &#13;    &lt;rows&gt;    &#13;        &lt;row&gt;        &#13;&lt;label value="text1: "/&gt;&#13;&lt;textbox action="onfocus: action.show(#{help1}); onblur: action.hide(#{help1})"/&gt;&#13;&lt;label id="help1" visible="false" value="This is help for text1."/&gt;&#13;        &lt;/row&gt;        &#13;        &lt;row&gt;        &#13;&lt;label value="text2: "/&gt;&#13;&lt;textbox action="onfocus: action.show(#{help2}); onblur: action.hide(#{help2})"/&gt;&#13;&lt;label id="help2" visible="false" value="This is help for text2."/&gt;&#13;        &lt;/row&gt;        &#13;    &lt;/rows&gt;    &#13;&lt;/grid&gt;&#13;</programlisting></sect3><sect3><title>Coercion Rules</title>
<para>A ZUL component actually converts an EL expression (#{}) to proper JavaScript codes based on the class of the result object.</para>
<orderedlist>
<listitem>
<para>If result is null, it is replaced with null.</para>
</listitem>
<listitem>
<para>If result is a component, it is replaced with $e('uuid'), where $e is a JavaScript function to return a reference to a HTML tag and uuid is the component's UUID.</para>
</listitem>
<listitem>
<para>If result is a Date object, it is replaced with new Date(milliseconds).</para>
</listitem>
<listitem>
<para>Otherwise, the result is converted to a string by calling the toString method, and then replaced with 'result in string'.</para>
</listitem>
</orderedlist></sect3></sect2><sect2><title>The onshow and onhide Actions</title>
<para>The onshow and onhide actions are used to control the visual effect of displaying and hiding a component.</para><sect3><title>An Example to Change How a Window Appears</title>
<programlisting>&lt;zk&gt;&#13;    &lt;button label="Show Overlapped" onClick="win.doOverlapped();"/&gt;    &#13;    &lt;window id="win" border="normal" width="200px" mode="overlapped"    &#13;action="onshow:anima.appear(#{self});onhide:anima.fade(#{self})" visible="false"&gt;&#13;        &lt;caption image="/img/inet.png" label="Hi there!"/&gt;        &#13;        &lt;checkbox label="Hello, Effect!"/&gt;        &#13;    &lt;/window&gt;    &#13;&lt;/zk&gt;&#13;</programlisting></sect3></sect2><sect2><title>CSA JavaScript Utilities</title>
<para>To simplify the CSA programming, ZK provides a few utilities objects that you can utilize.</para><sect3><title>The action Object</title>
<para>Basic utilities that can be applied to any object.</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Function</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>action.show(cmp)</para>
</entry>
<entry>
<para>Make a component visible.</para>
<para>cmp â the component. Use #{EL-expr} to identify it.</para>
</entry>
</row>
<row>
<entry>
<para>action.hide(cmp)</para>
</entry>
<entry>
<para>Make a component invisible.</para>
<para>cmp â the component. Use #{EL-expr} to identify it.</para>
</entry>
</row></tbody></tgroup>
</informaltable>
<para>Tip: For JavaScript programmers, it is common to manipulate style.display directly for visibility. However, it is not a good idea. Rather, use action.show and action.hide instead, since ZK Client Engine has to handle visual effects, bug workaround, and so on.</para></sect3><sect3><title>The comm Object</title>
<para>Utilities to communicate with the server.</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Function</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>comm.onClick(cmp, info)</para>
</entry>
<entry>
<para>Sends the onClick event to the server.</para>
<para>cmp â the component. Use #{EL-expr} or this to identify it.</para>
<para>info â a string or null to provide extra information. It will become the return value of MouseEvent's getArea.</para>
</entry>
</row>
<row>
<entry>
<para>comm.onUser(cmp, ...)</para>
</entry>
<entry>
<para>Sends the onUser event to the server</para>
<para>cmp â the component. Use #{EL-expr} or this to identify it.</para>
<para>other â you can provide any number of arguments.</para>
</entry>
</row>
<row>
<entry>
<para>comm.onEvent(cmp, evt, ...)</para>
</entry>
<entry>
<para>Sends the specified event to the server</para>
<para>cmp â the component. Use #{EL-expr} or this to identify it.</para>
<para>evt â the event name, e.g., onUser.</para>
<para>other â you can provide any number of arguments.</para>
</entry>
</row></tbody></tgroup>
</informaltable>
<para>For example,</para>
<programlisting>&lt;window title="Test of JavaScript Utilities"&gt;&#13;    &lt;html onClick='l.value = "onClick "+event.area'    &#13;        onUser='l.value ="onUser " +org.zkoss.lang.Objects.toString(event.data)'&gt;&lt;![CDATA[        &#13;        &lt;a href="javascript:;" onclick="comm.sendClick(this, 'Hi')"&gt;onClick with Hi&lt;/a&gt;        &#13;        &lt;a href="javascript:;" onclick="comm.sendClick(this)"&gt;onClick with null&lt;/a&gt;        &#13;        &lt;a href="javascript:;" onclick="comm.sendUser(this)"&gt;onUser with null&lt;/a&gt;        &#13;        &lt;a href="javascript:;" onclick="comm.sendUser(this, 'One')"&gt;onUser with One&lt;/a&gt;        &#13;        &lt;a href="javascript:;" onclick="comm.sendUser(this, 'One', 'Two')"&gt;onUser with [One, Two]&lt;/a&gt;        &#13;        &lt;a href="javascript:;" onclick="comm.sendEvent(this, 'onUser', 'XYZ')"&gt;onUser with XYZ&lt;/a&gt;        &#13;    ]]&gt;&lt;/html&gt;    &#13;    &lt;separator/&gt;    &#13;    &lt;label id="l"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect3><sect3><title>The anima Object</title>
<para>Animation-like visual effects. It is based on the <ulink url="http://wiki.script.aculo.us/scriptaculous/show/VisualEffects">Effect</ulink> class provided by <ulink url="http://script.aculo.us/">script.aculo.us</ulink>
<ulink url="http://script.aculo.us/">
<footnote>
<para>
<ulink url="http://script.aculo.us/">http://script.aculo.us</ulink> provides easy-to-use, cross-browser user interface JavaScript libraries </para>
</footnote>
</ulink>. The API is simplified. If you'd like more visual effects or controls, you can access <ulink url="http://wiki.script.aculo.us/scriptaculous/show/VisualEffects">Effect</ulink> directly.</para>
<para>Note: <ulink url="http://wiki.script.aculo.us/scriptaculous/show/VisualEffects">Effect</ulink> requires the component to be enclosed with the DIV tag. Not all ZUL components are implemented in this way. If you have any doubt, you can nest it with the div component as follows.</para>
<programlisting>&lt;window&gt;&#13;    &lt;div id="t" visible="false"    &#13;    action="onshow: anima.slideDown(#{self}); onhide: anima.slideUp(#{self})"&gt;    &#13;        &lt;div&gt;&lt;!-- the 2nd div is optional but sometimes it looks better with it --&gt;        &#13;            &lt;groupbox&gt;            &#13;                &lt;caption label="slide down"/&gt;                &#13;                Hi &lt;textbox/&gt;                &#13;            &lt;/groupbox&gt;            &#13;            When? &lt;datebox/&gt;            &#13;        &lt;/div&gt;        &#13;    &lt;/div&gt;    &#13;    &lt;button label="toggle" onClick="t.visible = !t.visible"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Of course, you load other libraries that do not have this limitation.</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Function</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>anima.appear(cmp)anima.appear(cmp, dur)</para>
</entry>
<entry>
<para>Make a component visible by increasing the opacity.</para>
<para>cmp â the component. Use #{EL-expr} to identify it.</para>
<para>dur â the duration in milliseconds. Default: 800.</para>
</entry>
</row>
<row>
<entry>
<para>anima.slideDown(cmp)anima.slideDown(cmp, dur)</para>
</entry>
<entry>
<para>Make a component visible with the slide-down effect.</para>
<para>cmp â the component. Use #{EL-expr} to identify it.</para>
<para>dur â the duration in milliseconds. Default: 400.</para>
</entry>
</row>
<row>
<entry>
<para>anima.slideUp(cmp)anima.slideUp(cmp, dur)</para>
</entry>
<entry>
<para>Make a component invisible with the slide-up effect.</para>
<para>cmp â the component. Use #{EL-expr} to identify it.</para>
<para>dur â the duration in milliseconds. Default: 400.</para>
</entry>
</row>
<row>
<entry>
<para>anima.fade(cmp)anima.fade(cmp, dur)</para>
</entry>
<entry>
<para>Make a component invisible by fading it out.</para>
<para>cmp â the component. Use #{EL-expr} to identify it.</para>
<para>dur â the duration in milliseconds. Default: 550.</para>
</entry>
</row>
<row>
<entry>
<para>anima.puff(cmp)anima.puff(cmp, dur)</para>
</entry>
<entry>
<para>Make a component invisible by puffing it out.</para>
<para>cmp â the component. Use #{EL-expr} to identify it.</para>
<para>dur â the duration in milliseconds. Default: 700.</para>
</entry>
</row>
<row>
<entry>
<para>anima.dropOut(cmp)anima.dropOut(cmp, dur)</para>
</entry>
<entry>
<para>Make a component invisible by fading and dropping it out.</para>
<para>cmp â the component. Use #{EL-expr} to identify it.</para>
<para>dur â the duration in milliseconds. Default: 700.</para>
</entry>
</row></tbody></tgroup>
</informaltable>
<para>For example,</para>
<programlisting>&lt;window title="Animation Effects"&gt;&#13;    &lt;style&gt;    &#13;    .ctl{    &#13;                border: 1pxoutset#777; background:#ddeecc;                &#13;                        margin: 2px;margin-right:10px;padding-left: 2px; padding-right: 2px;                        &#13;    }    &#13;    &lt;/style&gt;    &#13;&#13;            &lt;labelvalue="Slide" sclass="ctl" action="onmouseover:anima.slideDown(#{t});onmouseout:anima.slideUp(#{t})"/&gt;            &#13;                &lt;labelvalue="Fade" sclass="ctl" action="onmouseover:anima.appear(#{t});onmouseout:anima.fade(#{t})"/&gt;                &#13;                &lt;labelvalue="Puff" sclass="ctl" action="onmouseover:anima.appear(#{t});onmouseout:anima.puff(#{t})"/&gt;                &#13;                            &lt;labelvalue="Drop Out"sclass="ctl" action="onmouseover:anima.appear(#{t});onmouseout:anima.dropOut(#{t})"/&gt;                            &#13;&#13;        &lt;div id="t"visible="false"&gt;        &#13;        &lt;div&gt;        &#13;        &lt;groupbox&gt;        &#13;                &lt;captionlabel="Dynamic Content"/&gt;                &#13;            Content to show and hide dynamically.            &#13;            &lt;datebox/&gt;            &#13;        &lt;/groupbox&gt;        &#13;            Description&lt;textbox/&gt;            &#13;        &lt;/div&gt;        &#13;    &lt;/div&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect3></sect2></sect1><sect1><title>Events</title>
<para>Notice that whether an event is supported depends on a component. In addition, an event is sent after the component's content is updated.</para><sect2><title>Mouse Events</title>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Event Name</para>
</entry>
<entry>
<para>Components / Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>onClick</para>
</entry>
<entry>
<para>button caption column div groupbox image imagemap label listcell listfooter listheader menuitem tab tabpanel toolbar toolbarbutton treecell treecol window </para>
<para>Event: org.zkoss.zk.ui.event.MouseEvent</para>
<para>Denotes user has clicked the component.</para>
</entry>
</row>
<row>
<entry>
<para>onRightClick</para>
</entry>
<entry>
<para>button caption checkbox column div groupbox image imagemap label listcell listfooter listheader listitem radio slider tab tabbox tabpanel toolbar toolbarbutton treecell treecol treeitem window </para>
<para>Event: org.zkoss.zk.ui.event.MouseEvent</para>
<para>Denotes user has right-clicked the component.</para>
</entry>
</row>
<row>
<entry>
<para>onDoubleClick</para>
</entry>
<entry>
<para>button caption checkbox column div groupbox image label listcell listfooter listheader listitem tab tabpanel toolbar treecell treecol treerow window </para>
<para>Event: org.zkoss.zk.ui.event.MouseEvent</para>
<para>Denotes user has double-clicked the component.</para>
</entry>
</row></tbody></tgroup>
</informaltable></sect2><sect2><title>Keystroke Events</title>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Event Name</para>
</entry>
<entry>
<para>Components / Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>onOK</para>
</entry>
<entry>
<para>window textbox intbox longbox doublebox decimalbox datebox timebox combobox bandbox</para>
<para>Event: org.zkoss.zk.ui.event.KeyEvent</para>
<para>Denotes user has pressed the ENTER key.</para>
</entry>
</row>
<row>
<entry>
<para>onCancel</para>
</entry>
<entry>
<para>window textbox intbox longbox doublebox decimalbox datebox timebox combobox bandbox</para>
<para>Event: org.zkoss.zk.ui.event.KeyEvent</para>
<para>Denotes user has pressed the ESC key.</para>
</entry>
</row>
<row>
<entry>
<para>onCtrlKey</para>
</entry>
<entry>
<para>window</para>
<para>Event: org.zkoss.zk.ui.event.KeyEvent</para>
<para>Denotes user has pressed a special key, such as PgUp, Home and a key combined with the Ctrl or Alt key. Refer to the ctrlKeys Property section below for details.</para>
</entry>
</row></tbody></tgroup>
</informaltable>
<para>The keystroke events are sent to the nearest window that has registered an event listener for the specified events. It is designed to implement the submit, cancel and shortcut functions.</para>
<para>As illustrated below, doA() is invoked if user pressed ENTER when T1 got the focus, and doB() is invoked if user pressed ENTER when T2 got the focus.</para>
<programlisting>&lt;window id="A" onOK="doA()"&gt;&#13;    &lt;window id="B" onOK="doB()"&gt;    &#13;        &lt;textbox id="T1"/&gt;        &#13;    &lt;/window&gt;    &#13;    &lt;textbox id="T2"/&gt;    &#13;&lt;/window&#13;</programlisting>
<para>Notice that a window doesn't receive the keystroke events that are sent for the inner window, unless you post them manually. In the above example, the event won't be sent to window A, if T1 got the focus, no matter whether the onOK handler is declared for window B or not.</para><sect3><title>The ctrlKeys Property</title>
<para>To receive the onCtrlKey event, you must specify what key strokes to intercept by the ctrlKeys property. In other words, only key strokes specified in the ctrlKeys property is sent back to the server. For example, the onCtrlKey event is sent if a user clicks Alt+C, Ctrl+A, F10, or Ctrl+F3.</para>
<programlisting>&lt;window ctrlKeys="@c^a#10^#3"&gt;&#13;...&#13;</programlisting>
<para>The following is the syntax of th ctrlKeys property.</para>
<informaltable frame="all">
<tgroup cols="3.6"><tbody>
<row>
<entry>
<para>Key</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
<row>
<entry>
<para>^k</para>
</entry>
<entry>
<para>A control key, i.e., Ctrl+k, where k could be a~z, 0~9, #n and ~n.</para>
</entry>
</row>
<row>
<entry>
<para>@k</para>
</entry>
<entry>
<para>A alt key, i.e., Alt+k, where k could be a~z, 0~9, #n and ~n.</para>
</entry>
</row>
<row>
<entry>
<para>$k</para>
</entry>
<entry>
<para>A shift key, i.e., Shift+k, where k could be #n and ~n.</para>
</entry>
</row>
<row>
<entry>
<para>#n</para>
</entry>
<entry>
<para>A special key as follows.</para>
<informaltable frame="all">
<tgroup cols="6">
<colspec colnum="1" colname="c1"/>
<colspec colnum="2" colname="c2"/>
<colspec colnum="3" colname="c3"/>
<colspec colnum="4" colname="c4"/>
<colspec colnum="5" colname="c5"/>
<colspec colnum="6" colname="c6"/><tbody>
<row>
<entry>
<para>#home</para>
</entry>
<entry>
<para>Home</para>
</entry>
<entry>
<para>#end</para>
</entry>
<entry>
<para>End</para>
</entry>
<entry>
<para>#ins</para>
</entry>
<entry>
<para>Insert</para>
</entry>
</row>
<row>
<entry>
<para>#del</para>
</entry>
<entry>
<para>Delete</para>
</entry>
<entry>
<para>#left</para>
</entry>
<entry>
<para>â</para>
</entry>
<entry>
<para>#right</para>
</entry>
<entry>
<para>â</para>
</entry>
</row>
<row>
<entry>
<para>#up</para>
</entry>
<entry>
<para>â</para>
</entry>
<entry>
<para>#down</para>
</entry>
<entry>
<para>â</para>
</entry>
<entry>
<para>#pgup</para>
</entry>
<entry>
<para>PgUp</para>
</entry>
</row>
<row>
<entry>
<para>#pgdn</para>
</entry>
<entry>
<para>PgDn</para>
</entry>
<entry>
<para/>
</entry>
<entry>
<para/>
</entry>
<entry>
<para/>
</entry>
<entry>
<para/>
</entry>
</row>
<row>
<entry>
<para>#fn</para>
</entry>
<entry namest="c2" nameend="c6">
<para>A function key. #f1, #f2, ... #f12 for F1, F2,... F12.</para>
</entry>
</row></tbody></tgroup>
</informaltable>
<para/>
</entry>
</row></tbody></tgroup>
</informaltable></sect3></sect2><sect2><title>Input Events</title>
<informaltable frame="all">
<tgroup cols="3">
<thead>
<row>
<entry>
<para>Event Name</para>
</entry>
<entry>
<para>Components</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>onChange</para>
</entry>
<entry>
<para>textbox datebox decimalboxdoublebox intbox combobox bandbox</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.InputEvent</para>
<para>Denotes the content of an input component has been modified by the user.</para>
</entry>
</row>
<row>
<entry>
<para>onChanging</para>
</entry>
<entry>
<para>textbox datebox decimalboxdoubleboxintbox combobox bandbox</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.InputEvent</para>
<para>Denotes that user is changing the content of an input component. Notice that the component's content (at the server) won't be changed until onChange is received. Thus, you have to invoke the getValue method in the InputEvent class to retrieve the temporary value.</para>
</entry>
</row>
<row>
<entry>
<para>onSelection</para>
</entry>
<entry>
<para>textbox datebox decimalbox doublebox intbox combobox bandbox</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.SelectionEvent</para>
<para>Denotes that user is selecting a portion of the text of an input component. You can retrieve the start and end position of the selected text by use of the getStart and getEnd methods.</para>
</entry>
</row>
<row>
<entry>
<para>onFocus</para>
</entry>
<entry>
<para>textbox datebox decimalbox doublebox intbox combobox bandboxbutton toolbarbutton checkboxradio</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.Event</para>
<para>Denotes when a component gets the focus.</para>
<para>Remember event listeners execute at the server, so the focus at the client might be changed when the event listener for onFocus got executed.</para>
</entry>
</row>
<row>
<entry>
<para>onBlur</para>
</entry>
<entry>
<para>textbox datebox decimalbox doublebox intbox combobox bandboxbutton toolbarbutton checkboxradio</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.Event</para>
<para>Denotes when a component loses the focus.</para>
<para>Remember event listeners execute at the server, so the focus at the client might be changed when the event listener for onBlur got executed.</para>
</entry>
</row></tbody></tgroup>
</informaltable></sect2><sect2><title>List and Tree Events</title>
<informaltable frame="all">
<tgroup cols="3">
<thead>
<row>
<entry>
<para>Event Name</para>
</entry>
<entry>
<para>Components</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>onSelect</para>
</entry>
<entry>
<para>listboxtabboxtabtreecombobox</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.SelectEvent</para>
<para>Denotes user has selected one or multiple child components. For listbox, it is a set of listitem. For tree, it is a set of treeitem. For tabbox, it is a tab.</para>
<para>Note: onSelect is sent to both tab and tabbox.</para>
</entry>
</row>
<row>
<entry>
<para>onOpen</para>
</entry>
<entry>
<para>north</para>
<para>east</para>
<para>west</para>
<para>south</para>
<para>groupbox treeitem combobox bandboxmenupopupwindow</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.OpenEvent</para>
<para>Denotes user has opened or closed a component. Note: unlike onClose, this event is only a notification. The client sends this event after opening or closing the component.</para>
<para>It is useful to implement load-on-demand by listening to the onOpen event, and creating components when the first time the component is opened.</para>
</entry>
</row></tbody></tgroup>
</informaltable></sect2><sect2><title>Slider and Scroll Events</title>
<informaltable frame="all">
<tgroup cols="3">
<thead>
<row>
<entry>
<para>Event Name</para>
</entry>
<entry>
<para>Components</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>onScroll</para>
</entry>
<entry>
<para>slider</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.ScrollEvent</para>
<para>Denotes the content of a scrollable component has been scrolled by the user.</para>
</entry>
</row>
<row>
<entry>
<para>onScrolling</para>
</entry>
<entry>
<para>slider</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.ScrollEvent</para>
<para>Denotes that user is scrolling a scrollable component. Notice that the component's content (at the server) won't be changed until onScroll is received. Thus, you have to invoke the getPos method in the ScrollEvent class to retrieve the temporary position.</para>
</entry>
</row></tbody></tgroup>
</informaltable></sect2><sect2><title>Other Events</title>
<informaltable frame="all">
<tgroup cols="3">
<thead>
<row>
<entry>
<para>Event Name</para>
</entry>
<entry>
<para>Components</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>onCreate</para>
</entry>
<entry>
<para>all</para>
</entry>
<entry>
<para>Event: org.zkoss.ui.zk.ui.event.CreateEvent</para>
<para>Denotes a component is created when rendering a ZUML page. Refer to the Component Lifecycle chapter.</para>
</entry>
</row>
<row>
<entry>
<para>onClose</para>
</entry>
<entry>
<para>windowtabfileupload</para>
</entry>
<entry>
<para>Event: org.zkoss.ui.zk.ui.event.Event</para>
<para>Denotes the close button is pressed by a user, and the component shall detach itself.</para>
</entry>
</row>
<row>
<entry>
<para>onDrop</para>
</entry>
<entry>
<para>all</para>
</entry>
<entry>
<para>Event: org.zkoss.ui.zk.ui.event.DropEvent</para>
<para>Denotes another component is dropped to the component that receives this event. Refer to the Drag and Drop section.</para>
</entry>
</row>
<row>
<entry>
<para>onCheck</para>
</entry>
<entry>
<para>checkboxradio radiogroup</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.CheckEvent</para>
<para>Denotes the state of a component has been changed by the user.</para>
<para>Note: onCheck is sent to both radio and radiogroup.</para>
</entry>
</row>
<row>
<entry>
<para>onMove</para>
</entry>
<entry>
<para>window</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.MoveEvent</para>
<para>Denotes a component has been moved by the user.</para>
</entry>
</row>
<row>
<entry>
<para>onSize</para>
</entry>
<entry>
<para>window</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.SizeEvent</para>
<para>Denotes a component has been resized by the user.</para>
</entry>
</row>
<row>
<entry>
<para>onZIndex</para>
</entry>
<entry>
<para>window</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.ZIndexEvent</para>
<para>Denotes the z-index of a component has been changed by the user.</para>
</entry>
</row>
<row>
<entry>
<para>onTimer</para>
</entry>
<entry>
<para>timer</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.Event</para>
<para>Denotes the timer you specified has triggered an event. To know which timer, invoke the getTarget method in the Event class.</para>
</entry>
</row>
<row>
<entry>
<para>onNotify</para>
</entry>
<entry>
<para>any</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.Event</para>
<para>Denotes a application-dependent event. Its meaning depends on applications. Currently, no component will send this event.</para>
</entry>
</row>
<row>
<entry>
<para>onClientInfo</para>
</entry>
<entry>
<para>root</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.ClientInfoEvent</para>
<para>Notifies a root component about the client's information, such as time zone and resolutions.</para>
</entry>
</row>
<row>
<entry>
<para>onPiggyback</para>
</entry>
<entry>
<para>root</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.Event</para>
<para>Notifies a root component that the client has sent a request to the server. It is usually used to piggyback non-emergent UI updates to the client.</para>
</entry>
</row>
<row>
<entry>
<para>onBookmarkChange</para>
</entry>
<entry>
<para>root</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.BookmarkEvent</para>
<para>Notifies that the user pressed BACK, FORWARD or others that causes the bookmark changed.</para>
</entry>
</row>
<row>
<entry>
<para>onColSize</para>
</entry>
<entry>
<para>columns listhead treecols</para>
</entry>
<entry>
<para>Event: org.zkoss.zul.event.ColSizeEvent</para>
<para>Notifies the parent of a group of headers that the widths of two of its children are changed by the user.</para>
</entry>
</row>
<row>
<entry>
<para>onPaging</para>
</entry>
<entry>
<para>gridlistboxpaging</para>
</entry>
<entry>
<para>Event: org.zkoss.zul.event.PagingEvent</para>
<para>Notifies one of the pages of a multi-page component is selected by the user.</para>
</entry>
</row>
<row>
<entry>
<para>onUpload</para>
</entry>
<entry>
<para>fileupload</para>
</entry>
<entry>
<para>Event: org.zkoss.zul.event.UploadEvent</para>
<para>Notifies that file(s) is uploaded, and the application can retrieve the uploaded files(s) by use of the getMedia or getMedias methods.</para>
</entry>
</row>
<row>
<entry>
<para>onFulfill</para>
</entry>
<entry>
<para>all</para>
</entry>
<entry>
<para>Event: org.zkoss.zul.event.FulfillEvent</para>
<para>Notifies that the fulfill condition has been applied to the target component. It is posted after all descendant components have been created.</para>
</entry>
</row></tbody></tgroup>
</informaltable><sect3><title>The Event Flow of radio and radiogroup</title>
<para>For developer's convenience, the onCheck event is sent to raido first and then to radiogroup<footnote>
<para>The internal implementation is done by adding a listener when a radio is added to a radiogroup.</para>
</footnote>. Thus, you could add listener either to the radio group or to each radio button.</para>
<programlisting>&lt;radiogroup onCheck="fruit.value = self.selectedItem.label"&gt;&#13;    &lt;radio label="Apple"/&gt;    &#13;    &lt;radio label="Orange"/&gt;    &#13;&lt;/radiogroup&gt;&#13;You have selected : &lt;label id="fruit"/&gt;&#13;</programlisting>
<para>The above sample has the same effect as follows.</para>
<programlisting>&lt;radiogroup&gt;&#13;    &lt;radio label="Apple" onCheck="fruit.value = self.label"/&gt;    &#13;    &lt;radio label="Orange" onCheck="fruit.value = self.label"/&gt;    &#13;&lt;/radiogroup&gt;&#13;You have selected : &lt;label id="fruit"/&gt;&#13;</programlisting></sect3></sect2></sect1><sect1><title/></sect1></chapter>
<chapter>
<title>8. Data Binding</title><sect1><title>Basic Concept</title>
<para>Data binding is a mechanism that automates the data-copy plumbing codes between UI components and the data source. Application developers only have to tell data binding manager about the associations between UI components and the data source. Then, data -binding manager will do the loading (load data from the data source to UI components)and saving (save data from UI component into the data source) job automatically. </para></sect1><sect1><title>Adding a Data Source</title>
<para>First of all, we have to define a data source as a data bean. In this example, we use <code>Person</code> class as an example that holds the information of a person, say, first name, and last name.</para>
<programlisting>Person.java&#13;&#13;public class Person {&#13;private String _firstName="";&#13;private String _lastName="";&#13;&#13;//getter and setters&#13;public void setFirstName(String firstName) {&#13;_firstName = firstName;&#13;}&#13;public String getFirstName() {&#13;return _firstName;&#13;}&#13;public void setLastName(String lastName) {&#13;_lastName = lastName;&#13;}&#13;public String getLastName() {&#13;return _lastName;&#13;}&#13;public void setFullName(String f) {&#13;//do nothing.&#13;}&#13;public String getFullName() {&#13;return _firstName + " " + _lastName;&#13;}&#13;}&#13;</programlisting>
<para>
<code/>
</para>
<para>
<code>Then, declare a data source in the page as follows,</code>
</para>
<programlisting>&lt;zscript&gt;&#13;//prepare the example person object&#13;Person person = new Person();&#13;person.setFirstName("Tom");&#13;person.setLastName("Hanks");&#13;&lt;/zscript&gt;&#13;</programlisting></sect1><sect1><title>Activates Data Binding Manager</title>
<para>Activates Data Binding Manager by defining the page Initializer at the top of the page.</para>
<programlisting>&lt;?init class="org.zkoss.zkplus.databind.AnnotateDataBinderInit" ?&gt;&#13;</programlisting>
<para>This initiator class do following things:</para>
<orderedlist>
<listitem>
<para>Creates an <code>AnnotateDataBinder</code> instance.</para>
</listitem>
<listitem>
<para>Sets the <code>AnnotateDataBinder</code> instance as a variable with the name "binder" stored in the component as specified in <code>arg0</code> "component-path".(if arg0 is not specified, use <code>Page</code> instead.)</para>
</listitem>
<listitem>
<para>Calls <code>DataBinder.loadAll()</code> to initiate all UI components from the associated data source.</para>
</listitem>
</orderedlist></sect1><sect1><title>Associate UI Components with Data Source</title>
<para>After adding source data, activating data-binding manager, you have to define required UI objects, and associate them with the data source. Use ZUML annotation expression to tell data-binding manager the relationship between the data source and UI components. Its usage is very straightforward, simply declare the annotation into the component's attribute directly.</para>
<para>
<code>&lt;component-name </code>
<code>attribute-name="@{bean-name.attribute-name}</code>
<code>"</code>
<code>/&gt;</code>
</para>
<itemizedlist>
<listitem>
<para>
<code>component-name</code> represents a UI component</para>
</listitem>
<listitem>
<para>
<code>attribute-name</code> represents an attribute of UI component or the data source</para>
</listitem>
<listitem>
<para>
<code>bean-name </code>represents a data source</para>
</listitem>
</itemizedlist>
<para>
<code>We use </code>
<code>Grid</code>
<code> as an example, and associate it with the data source, a </code>
<code>Person</code>
<code> instance. </code>
<code>In this example, data-binding manager will automates the synchronization between UI components and the data source automatically.</code>
</para>
<programlisting>&lt;?init class="org.zkoss.zkplus.databind.AnnotateDataBinderInit" ?&gt;&#13;&#13;&lt;window&gt;&#13;&lt;zscript&gt;&#13;//prepare the example person object&#13;Person person = new Person();&#13;person.setFirstName("George");&#13;person.setLastName("Bush");&#13;&lt;/zscript&gt;&#13;&#13;&lt;grid width="400px"&gt;&#13;&lt;rows&gt;&#13;&lt;row&gt; First Name: &lt;textbox value="@{person.firstName}"/&gt;&lt;/row&gt;&#13;&lt;row&gt; Last Name: &lt;textbox value="@{person.lastName}"/&gt;&lt;/row&gt;&#13;&lt;row&gt; Full Name: &lt;label value="@{person.fullName}"/&gt;&lt;/row&gt;&#13;&lt;/rows&gt;&#13;&lt;/grid&gt;&#13;&lt;/window&gt;&#13;</programlisting></sect1><sect1><title>When to Load Data from Data Source to UI</title>
<para>
<code>Data Binding Manager is triggered by events, or users' activities. Thus,</code>
<code> </code>
<code>you must specify events in the ZUML annotation expression with </code>
<code>load-when</code>
<code> tag expression to tell Data Binding Manager when to load data from data source into the component's attribute. </code>
</para>
<para>
<code>&lt;component-name attribute-name="@{bean-name.attribute-name, </code>
</para>
<para>
<code/>
<code>load-when='component-id.event-name'}</code>
<code>"</code>
<code>/&gt;</code>
</para>
<itemizedlist>
<listitem>
<para>
<code>component-id</code> represents the ID of a UI component</para>
</listitem>
<listitem>
<para>
<code>event-name</code>
<code> represents the event name</code>
</para>
</listitem>
</itemizedlist>
<para>
<code>Multiple definition is allowed and would be called one by one. </code>
</para>
<para>
<code>In the following example, we demonstrate an example that the fullname of a Person will be updated automatically once his/her first name or last name has been modified. </code>
</para>
<para>
<code>Data Binding Manager will re-load </code>
<code>value</code>
<code> of </code>
<code>Label </code>
<code>whose id is</code>
<code> </code>
<code>fullName,</code>
<code> from </code>
<code>person.fullName</code>
<code> when the either the value of </code>
<code>Textbox</code>
<code> whose id is </code>
<code>firstName</code>
<code> or </code>
<code>lastName</code>
<code> has been changed, in other words, </code>
<code>onChange</code>
<code> event is triggered. </code>
</para>
<programlisting>&lt;?init class="org.zkoss.zkplus.databind.AnnotateDataBinderInit" ?&gt;&#13;&#13;&lt;window&gt;&#13;&lt;zscript&gt;&#13;//prepare the example person object&#13;Person person = new Person();&#13;person.setFirstName("George");&#13;person.setLastName("Bush");&#13;&lt;/zscript&gt;&#13;&#13;&lt;grid width="400px"&gt;&#13;&lt;rows&gt;&#13;&lt;row&gt; First Name: &#13;&lt;textbox id="firstName" value="@{person.firstName}"/&gt;&#13;        &lt;/row&gt;        &#13;&lt;row&gt; Last Name: &#13;&lt;textbox id="lastName" value="@{person.lastName}"/&gt;&#13;        &lt;/row&gt;        &#13;&lt;row&gt; Full Name: &#13;&lt;label id="fullName" value="@{person.fullName,&#13;load-when='firstName.onChange,lastName.onChange'}"/&gt;&#13;        &lt;/row&gt;        &#13;&lt;/rows&gt;&#13;&lt;/grid&gt;&#13;&#13;&lt;/window&gt;&#13;</programlisting></sect1><sect1><title>When to Save Data from UI Components to the Data Source</title>
<para>
<code>Data Binding Manager is triggered by events, or users' activities. Thus, you must</code>
<code> specify events in the ZUML annotation expression with </code>
<code>save-when</code>
<code> tag expression to tell Data Binding Manager when to save the attribute of the component into the data source. </code>
</para>
<para>
<code>&lt;component-name attribute-name="@{bean-name.attribute-name,</code>
<code>load-when='component-id.event-name</code>
<code>'</code>
<code>}</code>
<code>"/&gt;</code>
</para>
<para>
<code/>
</para>
<itemizedlist>
<listitem>
<para>
<code>component-id</code> represents the ID of a UI component</para>
</listitem>
<listitem>
<para>
<code>event-name</code>
<code> represents the event name</code>
</para>
</listitem>
</itemizedlist>
<para>
<code>Multiple definition is allowed and would be called one by one. </code>
</para>
<para>
<code>In the following example, Data Binding Manager will save the attribute "</code>
<code>value</code>
<code>" of </code>
<code>Textbox</code>
<code> "</code>
<code>firstName</code>
<code>" into "</code>
<code>person.firstName</code>
<code>" when the </code>
<code>Textbox</code>
<code> itself fires "</code>
<code>onChange</code>
<code>" event. </code>
</para>
<programlisting>&lt;?init class="org.zkoss.zkplus.databind.AnnotateDataBinderInit"?&gt;&#13;&#13;&lt;window width="500px"&gt;&#13;&lt;zscript&gt;&#13;    Person person = new Person();    &#13;    person.setFirstName("Bill");    &#13;    person.setLastName("Gates");    &#13;&lt;/zscript&gt;&#13;&#13;&lt;listbox&gt;&#13;    &lt;listhead&gt;    &#13;&lt;listheader label="First Name" width="100px"/&gt;&#13;&lt;listheader label="Last Name" width="100px"/&gt;&#13;&lt;listheader label="Full Name" width="100px"/&gt;&#13;&lt;/listhead&gt;&#13;&lt;listitem&gt;&#13;&lt;listcell&gt;&#13;&lt;textbox id="firstName" value="@{person.firstName, save-when='self.onChange'}"/&gt;&#13;&lt;/listcell&gt;&#13;&lt;listcell&gt;&#13;&lt;textbox id="lastName" value="@{person.lastName, save-when='self.onChange'}"/&gt;&#13;&lt;/listcell&gt;&#13;&lt;listcell label="@{person.fullName}"/&gt;&#13;&lt;/listitem&gt;&#13;&lt;/listbox&gt;&#13;&lt;/window&gt;&#13;</programlisting></sect1><sect1><title>Associate the Same Data Source with Multiple UI Components</title>
<para>
<code>One data source could be associated with multiple UI components. Once the data source had been modified, those associated UI components will be updated automatically by Data Binding Manager. </code>
</para>
<para>
<code>In the following example. we use ZUML annotation expression to associate a data source, a </code>
<code>Person</code>
<code> instance, "</code>
<code>selected</code>
<code>" with multiple UI components, including </code>
<code>Listbox</code>
<code>, and </code>
<code>Grid</code>
<code>. Once the user selects an item in the </code>
<code>Listbox</code>
<code>, the </code>
<code>Grid</code>
<code> will display information of the selected person accordingly.</code>
</para>
<programlisting>&lt;?init class="org.zkoss.zkplus.databind.AnnotateDataBinderInit"?&gt;&#13;&#13;&lt;window width="500px"&gt;&#13;&lt;zscript&gt;&#13;    //prepare the example person     &#13;Person selected = new Person();&#13;&lt;/zscript&gt;&#13;&#13;&lt;listbox rows="4" selectedItem="@{selected}"&gt;&#13;&lt;listhead&gt;&#13;&lt;listheader label="First Name" width="100px"/&gt;&#13;        &lt;listheader label="Last Name" width="100px"/&gt;        &#13;&lt;listheader label="Full Name" width="100px"/&gt;&#13;&lt;/listhead&gt;&#13;&lt;listitem&gt;&#13;&lt;listcell label="George"/&gt;&#13;&lt;listcell label="Bush"/&gt;&#13;&lt;/listitem&gt;&#13;&lt;listitem&gt;&#13;&lt;listcell label="Bill"/&gt;&#13;&lt;listcell label="Gates"/&gt;&#13;&lt;/listitem&gt;&#13;&lt;/listbox&gt;&#13;&lt;!-- show the detail of the selected person --&gt;&#13;&lt;grid&gt;&#13;&lt;rows&gt;&#13;&lt;row&gt;First Name: &lt;textbox value="@{selected.firstName}"/&gt;&lt;/row&gt;&#13;&lt;row&gt;Last Name: &lt;textbox value="@{selected.lastName}"/&gt;&lt;/row&gt;&#13;&lt;/rows&gt;&#13;&lt;/grid&gt;&#13;&lt;/window&gt;&#13;</programlisting></sect1><sect1><title>Associate UI Components with a Collection</title>
<para>
<code>It can be very useful to associate a collection with a UI components, and Data Binding Manager will convert the collection into UI components accordingly. </code>
</para>
<orderedlist>
<listitem>
<para>Prepare the data source of Collection</para>
</listitem>
<listitem>
<para>Associate the collection with <code>model</code> attribute of those supported UI components, ex. <code>Listbox</code>, <code>Grid</code>, and <code>Tree</code>.</para>
</listitem>
<listitem>
<para>Define a template of UI component</para>
<orderedlist>
<listitem>
<para>Define a variable, whatever you want, to represent each instance in the Collection with <code>sel</code>
<code>f</code> attribute.</para>
<para>&lt;component-name self="@{each='variable-name'}"/&gt;</para>
<para>The variable-name could only be seen by component-name and its child components.</para>
</listitem>
<listitem>
<para>Associate UI components with the variable</para>
<para>&lt;component-name attribute-name="@{variable-name.attribute-name}"/&gt;</para>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<para/>
<para>
<code>In the following example, we demonstrate how to associate a collection with </code>
<code>Listbox</code>
<code> to display a list of persons. </code>
</para>
<programlisting>&lt;?init class="org.zkoss.zkplus.databind.AnnotateDataBinderInit"?&gt;&#13;&#13;&lt;window width="500px"&gt;&#13;&lt;zscript&gt;&#13;    //prepare the example persons List    &#13;int count = 30;&#13;List persons = new ArrayList();&#13;for(int j= 0; j &amp;lt; count; ++j) {&#13;Person personx = new Person();&#13;     personx.setFirstName("Tom"+j);    &#13;personx.setLastName("Hanks"+j); &#13;persons.add(personx);&#13;}&#13;&lt;/zscript&gt;&#13;&#13;&lt;listbox rows="4" model="@{persons}"&gt;&#13;&lt;listhead&gt;&#13;&lt;listheader label="First Name" width="100px"/&gt;&#13;&lt;listheader label="Last Name" width="100px"/&gt;&#13;&lt;listheader label="Full Name" width="100px"/&gt;&#13;&lt;/listhead&gt;&#13;&lt;listitem self="@{each='person'}"&gt;&#13;&lt;listcell&gt;&#13;    &lt;textbox value="@{person.firstName}"/&gt;    &#13;&lt;/listcell&gt;&#13;&lt;listcell&gt;&#13;    &lt;textbox value="@{person.lastName}"/&gt;    &#13;&lt;/listcell&gt;&#13;&lt;listcell label="@{person.fullName}"/&gt;&#13;&lt;/listitem&gt;&#13;&lt;/listbox&gt;&#13;&lt;/window&gt;&#13;</programlisting></sect1><sect1><title>Customization of Conversion between the Data Source and UI Components</title>
<para>If you want to do the conversion between the Data Source and UI components by yourself, you could specify the class name of the converter in the <code>converter</code> tag expression to tell Data Binding Manager to use your own way to do the conversion between the data source and UI components. </para>
<para>
<code>&lt;component-name attribute-name="@{bean-name.attribute- name,</code>
<code>converter='class-name'</code>
<code>}"/&gt;</code>
</para>
<para>
<code/>
</para>
<para>Multiple definition is NOT allowed and the later defined would override the previous defined one. </para>
<orderedlist>
<listitem>
<para>Define a class that implements <code>TypeConverter </code>
<code>with the following methods</code>
</para>
</listitem>
</orderedlist>
<itemizedlist>
<listitem>
<para>
<code>coerceToUI</code>
<code>, converts an value object into UI component attribute type.</code>
</para>
</listitem>
<listitem>
<para>
<code>coerceToBean</code>
<code>, c</code>
<code>onverts an value object to bean property type.</code>
<code> </code>
</para>
</listitem>
</itemizedlist>
<orderedlist>
<listitem>
<para>Specify the class name of converter into the <code>converter</code> tag expression</para>
<para>In the following example, we demonstrate you how to convert a <code>boolean</code> value into different images instead of pure text.</para>
<para>First of all, you have to define a class that implements <code>TypeConverter. myTypeConverter converts the boolean into different images accordingly. </code>
</para>
<para>
<code/>
</para>
</listitem>
</orderedlist>
<programlisting>import org.zkoss.zkplus.databind.TypeConverter;&#13;import org.zkoss.zul.Listcell;&#13;&#13;public class myTypeConverter implements TypeConverter {&#13;public Object coerceToBean(java.lang.Object val, org.zkoss.zk.ui.Component comp) {&#13;return null;&#13;}&#13;&#13;public Object coerceToUi(java.lang.Object val, org.zkoss.zk.ui.Component comp) &#13;{&#13;boolean married = (Boolean) val;&#13;if (married)&#13;((Listcell) comp).setImage("/img/true.png");&#13;else&#13;((Listcell) comp).setImage("/img/false.png");&#13;return null;&#13;}&#13;}&#13;</programlisting>
<para>Specify <code>myTypeConverter</code> with the <code>con</code>
<code>vert</code> tag expression to be associated with the <code>married</code> attribute of <code>Person instance.</code> </para>
<programlisting>&lt;?init class="org.zkoss.zkplus.databind.AnnotateDataBinderInit"?&gt;&#13;&#13;&lt;window width="500px"&gt;&#13;&lt;zscript&gt;&lt;![CDATA[&#13;    //prepare the example persons List    &#13;    List persons = new ArrayList();    &#13;    persons.add(new Person("Tom", "Yeh", true));    &#13;    persons.add(new Person("Henri", "Chen", true));    &#13;    persons.add(new Person("Jumper", "Chen", false));    &#13;    persons.add(new Person("Robbie", "Cheng", false));    &#13;    ]]&gt;    &#13;&lt;/zscript&gt;&#13;&#13;    &lt;listbox rows="4" model="@{persons}"&gt;    &#13;        &lt;listhead&gt;        &#13;            &lt;listheader label="First Name" width="100px" /&gt;            &#13;            &lt;listheader label="Last Name" width="100px" /&gt;            &#13;            &lt;listheader label="Married" width="100px" /&gt;            &#13;        &lt;/listhead&gt;        &#13;        &lt;listitem self="@{each=person}"&gt;        &#13;        &lt;listcell label="@{person.firstName}"/&gt;        &#13;        &lt;listcell label="@{person.lastName}"/&gt;        &#13;&lt;listcell label="@{person.married, converter='myTypeConverter'}"/&gt;&#13;        &lt;/listitem&gt;        &#13;    &lt;/listbox&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para/></sect1><sect1><title>Define the Access Privilege of Data Binding Manager</title>
<para>For better control of data-binding manager, you can set the access mode of the attribute-name of the component-name to be <code>both</code>(load/save), <code>load</code>(load Only), <code>save</code>(save Only), or <code>none</code>(neither) .</para>
<para>
<code/>
<code>&lt;component-name attribute-name="@{bean-name.attribute-</code>
<code>name,</code>
<code>access='type-name'</code>
<code>}"/&gt;</code>
</para>
<itemizedlist>
<listitem>
<para>
<code>type-name</code> <code>represents a certain kind of access mode</code>
</para>
</listitem>
</itemizedlist>
<para>Multiple definition is NOT allowed and the later defined would override the previous defined one.Â  </para>
<para>In the following example, if the value of <code>Textbox</code>, "<code>firstName</code>", and "<code>lastName</code>" has been modified, the value of <code>Listcell</code>, "<code>fullname</code>", will remain unchanged because Data Binding manager is informed not to update its value.</para>
<programlisting>&lt;?init class="org.zkoss.zkplus.databind.AnnotateDataBinderInit"?&gt;&#13;&#13;&lt;window width="500px"&gt;&#13;&lt;zscript&gt;&#13;    Person person = new Person();    &#13;    person.setFirstName("Bill");    &#13;    person.setLastName("Gates");    &#13;&lt;/zscript&gt;&#13;&#13;&lt;listbox&gt;&#13;    &lt;listhead&gt;    &#13;&lt;listheader label="First Name" width="100px"/&gt;&#13;&lt;listheader label="Last Name" width="100px"/&gt;&#13;&lt;listheader label="Full Name" width="100px"/&gt;&#13;&lt;/listhead&gt;&#13;&lt;listitem&gt;&#13;&lt;listcell&gt;&#13;    &lt;textbox id="firstName" value="@{person.firstName}"/&gt;    &#13;&lt;/listcell&gt;&#13;&lt;listcell&gt;&#13;    &lt;textbox id="lastName" value="@{person.lastName}"/&gt;    &#13;&lt;/listcell&gt;&#13;&lt;listcell id="fullName" label="@{person.fullName, access='none'}"/&gt;&#13;&lt;/listitem&gt;&#13;&lt;/listbox&gt;&#13;&lt;/window&gt;&#13;</programlisting>
<para/>
<para/></sect1></chapter>
<chapter>
<title>9. ZUML with the XHTML Component Set</title>
<para>This chapter describes the set of XHTML components.</para><sect1><title>The Goal</title>
<para>The introduction of the XHTML component set is aimed to make it easy to port existent Web pages to ZUML. The ultima goal is that all valid XHTML pages are valid ZUML pages. All Servlets handling the submitted form work as usual.</para>
<para>Therefore, existent XHTML pages could share the most powerful advantage that ZUML pages have: rich user interfaces. The richness could be achieved in two ways. First, you could embed Java codes to manipulate XHTML components dynamically. Second, you could add off-of-shelf XUL components into existent pages, just like you add XHTML into XUL pages.</para>
<para>Performance Consideration: If a portion of HTML tags are static, it is better to use the Native namespace as described in the Performance Tips chapter.</para><sect2><title>A XHTML Page Is A Valid ZUML Page</title>
<para>The Web page illustrated below is a simple but typical example.</para>
<programlisting>&lt;html&gt;&#13;&lt;head&gt;&#13;    &lt;title&gt;ZHTMLDemo&lt;/title&gt;    &#13;&lt;/head&gt;&#13;&lt;body&gt;&#13;        &lt;h1&gt;ZHTMLDemo&lt;/h1&gt;        &#13;        &lt;ulid="ul"&gt;        &#13;                &lt;li&gt;Thefirstitem.&lt;/li&gt;                &#13;                &lt;li&gt;Theseconditem.&lt;/li&gt;                &#13;    &lt;/ul&gt;    &#13;                &lt;inputtype="button"value="AddItem""/&gt;                &#13;    &lt;br/&gt;    &#13;                &lt;inputid="inp0"type="text"/&gt;+                &#13;                &lt;inputid="inp1"type="text"/&gt;=                &#13;        &lt;textid="out"/&gt;        &#13;&lt;/body&gt;&#13;&lt;/html&gt;&#13;</programlisting>
<para>By naming it with the zhtml extension<footnote>
<para>If you want every HTML pages to be ZUML pages, you could map the .html extension to DHtmlLayoutServlet. Refer to Appendix A in the Developer's Reference for details.</para>
</footnote>, it will be interpreted as a ZUML page by ZK loader. Then, instances of org.zkoss.zhtml.Html, org.zkoss.zhtml.Head and others are created accordingly. In other words, we created a tree of XHTML components at the server. Then, ZK renders them into a regular XHTML page and sends it back to the browser, like what we did for any ZUML pages.</para></sect2><sect2><title>Server-Centric Interactivity</title>
<para>As being a ZUML page, it could embed any Java codes and execute them in the server as follows.</para>
<programlisting>&lt;html xmlns:zk="http://www.zkoss.org/2005/zk"&gt;&#13;&lt;head&gt;&#13;    &lt;title&gt;ZHTML Demo&lt;/title&gt;    &#13;&lt;/head&gt;&#13;&lt;body&gt;&#13;    &lt;h1&gt;ZHTML Demo&lt;/h1&gt;    &#13;    &lt;ul id="ul"&gt;    &#13;        &lt;li&gt;The first item.&lt;/li&gt;        &#13;        &lt;li&gt;The second item.&lt;/li&gt;        &#13;    &lt;/ul&gt;    &#13;    &lt;input type="button" value="Add Item" zk:onClick="addItem()"/&gt;    &#13;    &lt;br/&gt;    &#13;    &lt;input id="inp0" type="text" zk:onChange="add()"/&gt; +    &#13;    &lt;input id="inp1" type="text" zk:onChange="add()"/&gt; =    &#13;    &lt;text id="out"/&gt;    &#13;</programlisting>
<para>&lt;zscript&gt;</para>
<para>void addItem() {</para>
<para>Component li = new Raw("li");</para>
<para>li.setParent(ul);</para>
<para>new Text("Item "+ul.getChildren().size()).setParent(li);</para>
<para>}</para>
<para>void add(){</para>
<para>out.setValue(inp0.getValue() + inp1.getValue());</para>
<para>}</para>
<para>&lt;/zscript&gt;</para>
<programlisting>&lt;/body&gt;&#13;&lt;/html&gt;&#13;</programlisting>
<para>In the above example, we use the ZK namespace to specify the onClick property. It is necessary because XHTML itself has a property with the same name.</para>
<para>It is interesting to note that all Java codes are running at the server. Thus, unlike JavaScript you are used to embed in HTML pages, you could access any resource at the server directly. For example, you could open a connection to a database and retrieve the data to fill in certain components.</para>
<programlisting>&lt;zscript&gt;&#13;import java.sql.*;&#13;void addItem() {&#13;    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");    &#13;    String url = "jdbc:odbc:Fred";    &#13;    Connection conn = DriverManager.getConnection(url,"myLogin", "myPassword");    &#13;    ...    &#13;    conn.close();    &#13;}&#13;&lt;/zscript&gt;&#13;</programlisting></sect2><sect2><title>Servlets Work As Usual</title>
<para>In traditional Web applications, a XHTML page usually submits a form to a specific servlet for processing. You don't need to modify them to port the page to ZK.</para></sect2></sect1><sect1><title>The Differences</title>
<para>Besides being ZK components, the implementation of the XHTML component set has some differences from other component sets<footnote>
<para>These differences are made by implementing particular interfaces, so you could apply similar effects to your own components if you like.</para>
</footnote>, such that it would be easier to port traditional XHTML pages to ZK.</para><sect2><title>A Component Created for Each Tag</title>
<para>ZK Loaders creates a ZK component for Each tag declared in a ZUML page. For example, there are four components are created for the following ZUML page (html, body, p and a label).</para>
<programlisting>&lt;html&gt;&#13;    &lt;body&gt;    &#13;        &lt;p&gt;Hi&lt;/p&gt;        &#13;    &lt;/body&gt;    &#13;&lt;/html&gt;&#13;</programlisting>
<para>The advantage is that you can change the content of any component dynamically:</para>
<programlisting>&lt;p id="info"&gt;Hi&lt;/p&gt;&#13;&lt;z:button onClick="info.detach()" xmlns:z="http://www.zkoss.org/2005/zk"/&gt;&#13;</programlisting>
<para>However, it takes more time to process and memory to hold these components, so, if a portion of the page is static, you can use the Native namespace as follows.</para>
<programlisting>&lt;n:html xmlns:n="http://www.zkoss.org/2005/zk/native"&gt;&#13;    &lt;n:body&gt;    &#13;        &lt;p id="info"&gt;Hi&lt;/p&gt;        &#13;        &lt;z:button onClick="info.detach()" xmlns:z="http://www.zkoss.org/2005/zk"/&gt;        &#13;    &lt;/n:body&gt;    &#13;&lt;/n:html&gt;&#13;</programlisting>
<para>Refer to the Performance Tips chapter for more information.</para></sect2><sect2><title>UUID Is ID</title>
<para>Traditional servlets and JavaScript codes usually depend on the id attribute, so UUID of XHTML components are made to be the same as ID. Therefore, developers need not to change their existent codes to adapt ZK, as shown below.</para>
<programlisting>&lt;img id="which"/&gt;&#13;&lt;script type="text/javascript"&gt;&lt;![CDATA[&#13;//JavaScript and running at the browser&#13;    function change() {    &#13;        var el = document.getElementById("which");        &#13;        el.src = "something.gif";        &#13;    }    &#13;]]&gt;&lt;/script&gt;&#13;&lt;zscript&gt;&lt;!-- Java and running at the server --&gt;&#13;    void change() {    &#13;        which.src = "another.gif";        &#13;    }    &#13;&lt;/zscript&gt;&#13;</programlisting>
<para>Notice that UUID is immutable and nothing to do with ID for components other than XHTML. Thus, the above example will fail if XUL components are used. If you really want to reference a XUL component in JavaScript, you have to use EL expression to get the correct UUID.</para>
<programlisting>&lt;input id="which"/&gt;&#13;&lt;script type="text/javascript"&gt;//Running at the browser&#13;    var el = document.getElementById("${which.uuid}");    &#13;    el = $e("${which.uuid}"); //$e() is an utility of ZK Client Engine    &#13;&lt;/script&gt;&#13;</programlisting><sect3><title>Side Effects</title>
<para>Since UUID is ID, you cannot use the same ID for any two components in the same desktop.</para></sect3></sect2><sect2><title>All Tags Are Valid</title>
<para>Unlike XUL or other component sets, there is no invalid XML element in the XHTML component set. ZK uses the org.zkoss.zhtml.Raw class for constructing any unrecognized XML element<footnote>
<para>Note: this is done by implementing the org.zkoss.zk.ui.ext.DynamicTag interface.</para>
</footnote>. Therefore, developers could use any tags that the target browser supports, no matter whether they are implemented as ZK components.</para>
<para>Similarly, you could use the Raw component to create any component not defined in the XHTML component set as follows.</para>
<programlisting>new Raw("object"); //object could be any tag name the target browser supports&#13;</programlisting></sect2><sect2><title>Case Insensitive</title>
<para>Unlike XUL or other component sets, the component name of XHTML is case-insensitive. The following XML elements are all mapped to the org.zkoss.zhtml.Br component.</para>
<programlisting>&lt;br/&gt;&#13;&lt;BR/&gt;&#13;&lt;bR/&gt;&#13;</programlisting></sect2><sect2><title>No Mold Support</title>
<para>XHTML components outputs its content directly. They don't support molds. In other words, the mold property is ignored.</para></sect2></sect1><sect1><title>The DOM Tree at the Browser</title>
<para>After porting XHMTL pages to ZK, you don't need to manipulate the DOM tree at the browser with JavaScript, though ZK doesn't prevent you from doing that. Rather, you manipulate XHTML components at the server, and then ZK engines updates the DOM tree at the browser for you.</para>
<para>It is convenient but there is a catch. ZK assumes the DOM tree at the browser is the same as the component tree at the server. In most cases, it is true. However, it is not always true.</para><sect2><title>The TABLE and TBODY Tags</title>
<para>The browser always creates TBODY between TABLE and TR. Thus, the following two tables have the same structure.</para>
<programlisting>&lt;table&gt;&#13;    &lt;tr&gt;&lt;td&gt;Hi&lt;/td&gt;&lt;/tr&gt;    &#13;&lt;/table&gt;&#13;&lt;table&gt;&#13;    &lt;tbody&gt;    &#13;        &lt;tr&gt;&lt;td&gt;Hi&lt;/td&gt;&lt;/tr&gt;        &#13;    &lt;/tbody&gt;    &#13;&lt;/table&gt;&#13;</programlisting>
<para>Unfortunately, their component trees are not the same in ZK. Thus, if you want to dynamically manipulate a table, you have to declare TBODY between TABLE and TR. Of course, you don't need to worry this for static tables.</para></sect2></sect1><sect1><title>Events</title>
<para>All XHTML components support the following events, but whether it is applicable still depends on the browsers. For example, onChange is meaningless to non-input components, say body and div. You have to consult the HTML standard<footnote>
<para>http/www.w3c.org</para>
</footnote>
</para>
<informaltable frame="all">
<tgroup cols="3">
<thead>
<row>
<entry>
<para>Event Name</para>
</entry>
<entry>
<para>Components</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>onChange</para>
</entry>
<entry>
<para>all</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.InputEvent</para>
<para>Denotes the content of an input component has been modified by the user.</para>
</entry>
</row>
<row>
<entry>
<para>onClick</para>
</entry>
<entry>
<para>all</para>
</entry>
<entry>
<para>Event: org.zkoss.zk.ui.event.MouseEvent</para>
<para>Denotes user has clicked the component.</para>
</entry>
</row></tbody></tgroup>
</informaltable></sect1><sect1><title>Integrate with JSF, JSP and Others</title>
<para>When integrating with existent Web pages, you might have to ask yourself a few questions.</para>
<itemizedlist>
<listitem>
<para>Is the existent page static or dynamically generated?</para>
</listitem>
<listitem>
<para>Is it a minor enhancement, if you want to enrich an existent page? Or, you prefer to rewrite a portion of it?</para>
</listitem>
<listitem>
<para>Do you prefer to use XUL as the default component set when adding a new page?</para>
</listitem>
</itemizedlist>
<para>Depending your requirements, there are several approaches to take.</para><sect2><title>Work with Existent Servlets</title>
<para>By enclosing ZUL components with FORM, you could post the content of ZUML components as the request parameters to an existent servlet. Refer to the Work with HTML FORM and Java Servlets section in the ZUML with the XUL Component Set chapter for details.</para>
<para>With this approach, you could design rich user interfaces without modifying the existent servlet by simply replacing some of them with ZUL components.</para></sect2><sect2><title>Enrich by Inclusion</title>
<para>If you prefer to rewrite a portion of an existent page, it might be better to put the rewritten portion in a separate ZUML file. Then, you include the ZUML file from the existent page. For example, you could use jsp:include if JSP technology is used.</para>
<programlisting>&lt;jsp:include page="/my/ria.zul"/&gt;&#13;</programlisting></sect2><sect2><title>Enrich Static HTML Pages</title>
<para>If you prefer to modify a static HTML page directly by adding the rich content, you could use the Native namespace (<ulink url="http://www.zkoss.org/2005/native">http://www.zkoss.org/2005/native</ulink>) to specify the static content, and then use the XUL or XHTML component sets (<ulink url="http://www.zkoss.org/2005/zul">http://www.zkoss.org/2005/zul</ulink> and <ulink url="http://www.w3.org/1999/xhtml">http://www.w3.org/1999/xhtml</ulink>) for the content that are changed dynamically.</para>
<programlisting>&lt;!-- test.zhtml --&gt;&#13;&lt;html xmlns="http://www.zkoss.org/2005/native" xmlns:h="http://www.w3.org/1999/xhtml" xmlns:z="http://www.zkoss.org/2005/zul"&gt;&#13;    &lt;head&gt;    &#13;        &lt;title&gt;Hi ZK&lt;/title&gt;        &#13;    &lt;/head&gt;    &#13;&lt;body&gt;&#13;    &lt;h:ul id="list"&gt;&lt;!-- dynamically changeable --&gt;    &#13;        &lt;h:li&gt;&lt;z:textbox/&gt;&lt;/h:li&gt;        &#13;    &lt;/h:ul&gt;    &#13;    &lt;p&gt;Static content&lt;/p&gt;    &#13;&lt;/body&gt;&#13;&lt;/html&gt;&#13;</programlisting></sect2><sect2><title>Use of ZK JSP Tags</title>
<para>ZK provides an equivalent JSP tags for each ZUL component. If you'd like to use them in your JSP pages, simply following the following steps.</para>
<orderedlist>
<listitem>
<para>Specify <ulink url="http://www.zkoss.org/jsp/zul">http://www.zkoss.org/jsp/zul</ulink> as the URI of the TLD file in the JSP pages with the taglib directive.</para>
</listitem>
<listitem>
<para>Though optional, it is better to specify DOCTYPE as XHTML 1.0 Transitional, since ZK Client Engine assumes it.</para>
</listitem>
<listitem>
<para>The top of ZK JSP tags must be the page tag (ZK's org.zkoss.zul.jsp.PageTag), which represents a ZK page.</para>
</listitem>
</orderedlist>
<para>The following is a simple example.</para>
<programlisting>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"&#13;"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;&#13;&lt;%@ taglib uri="http://www.zkoss.org/jsp/zul" prefix="z" %&gt;&#13;&lt;html&gt;&#13;    &lt;head&gt;    &#13;        &lt;title&gt;Test of ZUL on JSP&lt;/title&gt;        &#13;    &lt;/head&gt;    &#13;    &lt;body&gt;    &#13;&#13;    &lt;h1&gt;1. Header outside z:page&lt;/h1&gt;    &#13;    &lt;z:page&gt;    &#13;&lt;h2&gt;2. Header in z:page&lt;/h2&gt;&#13;    &lt;z:window id="win" title="Test" border="normal"&gt;    &#13;&lt;p&gt;3. Content in z:window&lt;/p&gt;&#13;        &lt;z:button label="Overlap" onClick="win.doOverlapped()"/&gt;        &#13;    &lt;/z:window&gt;    &#13;&lt;p&gt;4. Content in z:page after z:window&lt;/h2&gt;&#13;        &lt;/z:page&gt;        &#13;&lt;p&gt;5. Content after z:page&lt;/p&gt;&#13;    &lt;/body&gt;    &#13;&lt;/html&gt;&#13;</programlisting>
<para>Each ZUL component is wrapped with a JSP tag and each property is wrapped with an attribute the JSP tag. Furthermore, you are free to mix ZK JSP tags with other tags. Thus, the use of ZK JSP tags is straightforward.</para></sect2><sect2><title>Use of ZK JSF Components</title>
<para>ZK provides an equivalent JSF component for each ZUL component. The use is similar to ZK JSP Tags, except the taglib URI is <ulink url="http://www.zkoss.org/jsf/zul">http://www.zkoss.org/jsf/zul</ulink>.</para>
<programlisting>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;&#13;&lt;html&gt;&#13;&lt;head&gt;&#13;&lt;title&gt;Validator Example&lt;/title&gt;&#13;&lt;/head&gt;&#13;&lt;%@ taglib uri="http://java.sun.com/jsf/html" prefix="h"%&gt;&#13;&lt;%@ taglib uri="http://java.sun.com/jsf/core" prefix="f"%&gt;&#13;&lt;%@ taglib uri="http://www.zkoss.org/jsf/zul" prefix="z"%&gt;&#13;&lt;body&gt;&#13;&lt;f:view&gt;&#13;    &lt;h:form id="helloForm"&gt;    &#13;        &lt;z:page&gt;        &#13;            &lt;z:window z:title="Validator Example" width="500px" border="normal"&gt;            &#13;                --Validate input day must in weekend--&lt;br/&gt;                &#13;                &lt;z:datebox id="dbox" format="yyyy/MM/dd"                &#13;</programlisting>
<para>f:value="#{ValidatorBean.value}"</para>
<para>f:validator="#{ValidatorBean.validateDate}"/&gt;</para>
<programlisting>&lt;h:message&#13;                style="color: red; font-style: oblique;"                &#13;                    for="dbox" /&gt;                    &#13;                &lt;br/&gt;                &#13;                                &lt;h:commandButton id="submit" action="#{ValidatorBean.doSubmit}" value="Submit" /&gt;                                &#13;            &lt;/z:window&gt;            &#13;            &lt;h:messages/&gt;            &#13;        &lt;/z:page&gt;        &#13;    &lt;/h:form&gt;    &#13;    &lt;a href="../index.html"&gt;Back&lt;/a&gt;    &#13;&lt;/f:view&gt;&#13;&lt;/body&gt;&#13;&lt;/html&gt;&#13;</programlisting></sect2><sect2><title>Enrich a Dynamically Generated Page with ZK Filter</title>
<para>If you prefer to ajax-ize a dynamically generated HTML page (e.g., the output of a Velocity Servlet), you could use the ZK Filter to process the generated page. To enable the ZK filter, you have to configure web.xml, as shown below.</para>
<programlisting>&lt;filter&gt;&#13;    &lt;filter-name&gt;zkFilter&lt;/filter-name&gt;    &#13;    &lt;filter-class&gt;org.zkoss.zk.ui.http.DHtmlLayoutFilter&lt;/filter-class&gt;    &#13;    &lt;init-param&gt;    &#13;        &lt;param-name&gt;extension&lt;/param-name&gt;        &#13;        &lt;param-value&gt;html&lt;/param-value&gt;        &#13;    &lt;/init-param&gt;    &#13;&lt;/filter&gt;&#13;        &lt;filter-mapping&gt;&lt;filter-name&gt;zkFilter&lt;/filter-name&gt;&lt;url-pattern&gt;/my/dyna.jsp&lt;/url-pattern&gt;&lt;/filter-mapping&gt;        &#13;        &lt;filter-mapping&gt;&lt;filter-name&gt;zkFilter&lt;/filter-name&gt;&lt;url-pattern&gt;/my/dyna/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;        &#13;</programlisting>
<para>where url-pattern is application dependent. The extension parameter (init-param) defines the language of the dynamical output. By default, it is html. If it is xul/html, specify zul as the extension.</para>
<para>Tip: In most cases, ZK JSP tags are easier to use and consume less memory than the ZK filter. Refer to the Performance Tips section in the Advance Features chapter.</para>
<para>Notice that, if you want to filter the output from include and/or forward, remember to specify the dispatcher element with REQUEST and/or INCLUDE. Consult the Java Servlet Specification for details. For example,</para>
<programlisting>&lt;filter-mapping&gt;&lt;filter-name&gt;zkFilter&lt;/filter-name&gt;&lt;url-pattern&gt;/my/dyna/*&lt;/url-pattern&gt;        &#13;    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;    &#13;    &lt;dispatcher&gt;INCLUDE&lt;/dispatcher&gt;    &#13;    &lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt;    &#13;    &lt;dispatcher&gt;ERROR&lt;/dispatcher&gt;&lt;/filter-mapping&gt;    &#13;</programlisting></sect2></sect1></chapter>
<chapter>
<title>10. Macro Components</title>
<para>There are two ways to implement a component. One is to implement a class deriving from the org.zkoss.zk.ui.AbstractComponent class. The other is to implement it by use of other components.</para>
<para>The former one is more flexible. It requires deeper understanding of ZK, so it is usually done by component developers. It is discussed in the Component Development Guide.</para>
<para>On the other hand, implementing a new component by use of other components is straightforward. It works like composition, macro expansion, or inline replacement. For sake of convenience, we call this kind of components as macro components., while the others are called primitive components.</para>
<para>Tip: a macro component is no different from a primitive component from application developer's viewpoint, except how it is implemented.</para><sect1><title>Three Steps to Use Macro Components</title>
<para>It takes three steps to use macro components as follows.</para>
<orderedlist>
<listitem>
<para>Implements a macro component by a ZUML page.</para>
</listitem>
<listitem>
<para>Declare the macro component in the page that is going to use it.</para>
</listitem>
<listitem>
<para>Use the macro components, which is no difference that other components.</para>
</listitem>
</orderedlist>
<para>Tip: In addition to define a macro component in page, you can put its definition into a language addon such all pages are able to access the macro component.</para><sect2><title>Step 1. The Implementation</title>
<para>All you need to do is to prepare a ZUML page that describes what the component consists of. In other words, the page is a template of the macro.</para>
<para>For example, assume we want to pack a label and a text box as a macro component. Then we could create page, say /WEB-INF/macros/username.zul, as follows.</para>
<programlisting>&lt;hbox&gt;&#13;    Username: &lt;textbox/&gt;    &#13;&lt;/hbox&gt;&#13;</programlisting>
<para>It is done!</para>
<para>The ZUML page implementing a macro component is the same as any other pages, so any ZUML page can be used as a macro component.</para></sect2><sect2><title>Step 2. The Declaration</title>
<para>Before instantiating a macro component, you have to declare first. One of simplest way to declare is to use the component directives.</para>
<programlisting>&lt;?component name="username" macroURI="/WEB-INF/macros/username.zul"?&gt;&#13;</programlisting>
<para>As shown, you have to declare the name (the name attribute) and the URI of the page (the macroURI attribute).</para><sect3><title>Other Properties</title>
<para>In additions to the name, macroURI and class<footnote>
<para>The class attribute will be discussed later.</para>
</footnote> attributes, you can specify a list of initial properties that will be used to initialize a component when it is instantiated.</para>
<programlisting>&lt;?component name="mycomp" macroURI="/macros/mycomp.zul"&#13;myprop="myval" another="anotherval"?&gt;&#13;</programlisting>
<para>Therefore,</para>
<programlisting>&lt;mycomp/&gt;&#13;</programlisting>
<para>is equivalent to</para>
<programlisting>&lt;mycomp myprop="myval1" another="anotherval"/&gt;&#13;</programlisting></sect3></sect2><sect2><title>Step 3. The Use</title>
<para>The use of a macro component is no different than others.</para>
<programlisting>&lt;window&gt;&#13;    &lt;username/&gt;    &#13;&lt;/window&gt;&#13;</programlisting><sect3><title>Pass Properties</title>
<para>Like an ordinary component, you can specify properties (aka., attributes) when using a macro component as follows.</para>
<programlisting>&lt;?component name="username" macroURI="/WEB-INF/macros/username.zul"?&gt;&#13;&lt;window&gt;&#13;    &lt;username who="John"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>All these properties specified are stored in a map that is then passed to the template via a variable called arg. Then, in the template, you could access these properties as follows.</para>
<programlisting>&lt;hbox&gt;&#13;    Username: &lt;textbox value="${arg.who}"/&gt;    &#13;&lt;/hbox&gt;&#13;</programlisting>
<para>Note: arg is available only when rendering the macro page. To access in the event listener, you have to use getDynamicProperty instead. Refer to the Provide Additional Methods section for more details.</para></sect3><sect3><title>arg.includer</title>
<para>In additions to the specified properties (aka., attributes), a property called arg.includer is always passed to represent the parent of the components defined in a macro template.</para>
<para>If a regular macro is created, arg.includer is the macro component itself. If an inline macro is created, arg.includer is the parent component, if any. Refer to the Inline Macros section for more information.</para>
<para>In the above example, arg.includer represents the regular macro component, &lt;username who="John"/&gt;, and is the parent of &lt;hbox&gt; (defined in username.zul).</para></sect3></sect2></sect1><sect1><title>Inline Macros</title>
<para>There are two kinds of macro components: inline<footnote>
<para>Inline macro components are added since ZK 2.3.</para>
</footnote> and regular. By default, regular macros are assumed. To specify inline macros, you have to specify inline="true" in the component directive.</para>
<para>An inline macro behaves like inline-expansion. ZK doesn't create a macro component if an inline macro is encountered. Rather, it inline-expands the components defined in the macro URI. In other words, it works as if you type the content of the inline macro directly to the target page.</para>
<para/>
<para>use.zul: (target page)</para>
<programlisting>&lt;?component name="username" inline="true" macroURI="username.zul"?&gt;&#13;&lt;grid&gt;&#13;    &lt;rows&gt;    &#13;        &lt;username id="ua" name="John"/&gt;        &#13;    &lt;/rows&gt;    &#13;&lt;/grid&gt;&#13;</programlisting>
<para>username.zul: (macro definition)</para>
<programlisting>&lt;row&gt;&#13;    Username    &#13;    &lt;textbox id="${arg.id}" value="${arg.name}"/&gt;    &#13;&lt;/row&gt;&#13;</programlisting>
<para>Equivalent page:</para>
<programlisting>&lt;grid&gt;&#13;    &lt;rows&gt;    &#13;&lt;row&gt;&#13;    Username    &#13;    &lt;textbox id="ua" value="John"/&gt;    &#13;&lt;/row&gt;&#13;    &lt;/rows&gt;    &#13;&lt;/grid&gt;&#13;</programlisting>
<para>All properties, including <code>id</code>, are passed to the inline macro.</para>
<para>On the other hand, ZK will create a real component (called a macro component) to represent the regular macro. That is, the macro component is created as the parent of the components that are defined in the macro.</para>
<para>Inline macros are easier to integrate into sophisticated pages. For example, you cannot use regular components in the previous example since rows accepts only row, not macro components. It is easier to access to all components defined in a macro since they are in the same ID space. It also means the developers must be aware of the implementation to avoid name conflicts.</para>
<para>Regular macros allow the component developers to provide additional API and hide the implementation from the component users. Each regular macro component is an ID space owner, so there is no name conflicts. The users of regular macros usually assume nothing about the implementation. Rather, they access via the well-defined API.</para><sect2><title>An Example</title>
<para>inline.zul: (the macro definition)</para>
<programlisting>&lt;row&gt;&#13;    &lt;textbox value="${arg.col1}"/&gt;    &#13;    &lt;textbox value="${arg.col2}"/&gt;    &#13;&lt;/row&gt;&#13;</programlisting>
<para>useinline.zul: (the target page)</para>
<programlisting>&lt;?componentname="myrow"macroURI="inline.zul" inline="true"?&gt;        &#13;        &lt;windowtitle="Test of inline macros"border="normal"&gt;        &#13;    &lt;zscript&gt;&lt;![CDATA[    &#13;        importorg.zkoss.util.Pair;        &#13;&#13;    List infos = new LinkedList();    &#13;                for(int j = 0;j&lt;10;++j){                &#13;        infos.add(new Pair("A" + j, "B" +j));        &#13;    }    &#13;    ]]&gt;&lt;/zscript&gt;    &#13;    &lt;grid&gt;    &#13;        &lt;rows&gt;        &#13;                        &lt;myrowcol1="${each.x}"col2="${each.y}"forEach="${infos}"/&gt;                        &#13;        &lt;/rows&gt;        &#13;    &lt;/grid&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect2></sect1><sect1><title>Regular Macros</title>
<para>ZK created a real component (called a macro component) to represent the regular macro as described in the previous section.</para>
<para>For sake of convenience, when we talk about macro components in this section, we mean the regular macro components.</para><sect2><title>Macro Components and The ID Space</title>
<para>Like window, a macro component is an ID space owner. In other words, it is free to use whatever identifiers to identify components inside the page implementing a macro component (aka., child components of the macro component). They won't conflict with components defined in the same page with the macro component.</para>
<para>For example, assume we have a macro defined as follows.</para>
<programlisting>&lt;hbox&gt;&#13;    Username: &lt;textbox id="who" value="${arg.who}"/&gt;    &#13;&lt;/hbox&gt;&#13;</programlisting>
<para>Then, the following codes work correctly.</para>
<programlisting>&lt;?component name="username" macroURI="/WEB-INF/macros/username.zul"?&gt;&#13;&lt;zk&gt;&#13;    &lt;username/&gt;    &#13;    &lt;button id="who"/&gt; &lt;!-- no conflict because it is in a different ID space --&gt;    &#13;&lt;/zk&gt;&#13;</programlisting>
<para>However, the following codes don't work.</para>
<programlisting>&lt;?component name="username" macroURI="/WEB-INF/macros/username.zul"?&gt;&#13;&lt;username id="who"/&gt;&#13;</programlisting>
<para>Why? Like any ID space owner, the macro component itself is in the same ID space with its child components. There are two alternative solutions:</para>
<orderedlist>
<para>1. Use a special prefix for the identifiers of child components of a macro component. For example, "mc_who" instead of "who".</para>
</orderedlist>
<programlisting>&lt;hbox&gt;&#13;    Username: &lt;textbox id="mc_who" value="${arg.who}"/&gt;    &#13;&lt;/hbox&gt;&#13;</programlisting>
<orderedlist>
<para>2. Use the window component to create an additional ID space.</para>
</orderedlist>
<programlisting>&lt;window&gt;&#13;    &lt;hbox&gt;    &#13;        Username: &lt;textbox id="who" value="${arg.who}"/&gt;        &#13;    &lt;/hbox&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>The first solution is suggested, if applicable, due to the simplicity.</para><sect3><title>Access Child Components From the Outside</title>
<para>Like other ID space owner, you can access its child component by use of two getFellow method invocations or org.zkoss.zk.ui.Path.</para>
<para>For example, assume you have a macro component whose ID is called "username", and then you can access the textbox as follows.</para>
<programlisting>comp.getFellow("username").getFellow("mc_who");&#13;new Path("/username/mc_who");&#13;</programlisting></sect3><sect3><title>Access Variables Defined in the Ancestors</title>
<para>Macro components work as inline-expansion. Thus, like other components, a child component (of a macro component) can access any variable defined in the parent's ID space.</para>
<para>For example, username's child component can access v directly.</para>
<programlisting>&lt;zscript&gt;&#13;    String v = "something";    &#13;&lt;/zscript&gt;&#13;&lt;username/&gt;&#13;</programlisting>
<para>However, it is not recommended to utilize such visibility because it might limit where a macro can be used.</para></sect3><sect3><title>Change macroURI At the Runtime</title>
<para>You can change the macro URI dynamically as follows.</para>
<programlisting>&lt;username id="ua"/&gt;&#13;&lt;button onClick="ua.setMacroURI(&amp;quot;another.zul&amp;quot;)"/&gt;&#13;</programlisting></sect3></sect2><sect2><title>Provide Additional Methods</title>
<para>A macro component implements the org.zkoss.zk.ui.ext.DynamicPropertied interface, so you can access its properties by use of the getDynamicProperty methods as follows.</para>
<programlisting>&lt;username id="ua" who="John"/&gt;&#13;&lt;button label="what?" onClick="alert(ua.getDynamicProperty(&amp;quot;who&amp;quot;))"/&gt;&#13;</programlisting>
<para>Obviously, using DynamicPropertied is tedious. Worse of all, the macro's child components won't be changed if you use setDynamicProperty to change a property. For example, the following codes still show John as the username, not Mary.</para>
<programlisting>&lt;username id="ua" who="John"/&gt;&#13;&lt;zscript&gt;&#13;ua.setDynamicProperty("who", "Mary");&#13;&lt;/zscript&gt;&#13;</programlisting>
<para>Why? All child components of a macro component are created when the macro component is created, and they won't be changed unless you manipulate them manually<footnote>
<para>On the other hand, the child components included by the include component is created in the rendering phase. In addition, all child components are removed and created each time the include component is invalidated.</para>
</footnote>. Thus, the invocation to setDynamicProperty affects only the properties stored in a macro component (which you can retrieve with getDynamicProperties). The content of textbox remains intact.</para>
<para>Thus, it is better to provide a method, say setWho, to manipulate the macro component directly. To provide your own methods, you have to implement a class for the macro components, and then specify it in the class attribute of the component directive.</para>
<para>Tip: To recreate child components with the current properties, you can use the recreate method. It actually detaches all child components, and then create them again.</para>
<para>There are two ways to implement a class. The details are described in the following sections.</para><sect3><title>Provide Additional Methods in Java</title>
<para>It takes two steps to provide additional methods for a macro component.</para>
<para>1. Implement a class by extending from the org.zkoss.zk.ui.HtmlMacroComponent class.</para>
<programlisting>//Username.java&#13;package mypack;&#13;public class Username extends HtmlMacroComponent {&#13;    public void setWho(String name) {    &#13;        setDynamicProperty("who", name); //arg.who requires it        &#13;        final Textbox tb = (Textbox)getFellow("mc_who");        &#13;        if (tb != null) tb.setValue(name); //correct the child if available        &#13;    }    &#13;    public String getWho() {    &#13;        return (String)getDynamicaProperty("who");        &#13;    }    &#13;}&#13;</programlisting>
<itemizedlist>
<listitem>
<para>As depicted above, you have to call setDynamicProperty in setWho, because ${arg.who} is referenced in the macro page (${arg.who}), which is used when a macro component are creating its child components.</para>
</listitem>
<listitem>
<para>Since the setWho method might be called before a macro component creates its children, you have to check whether mc_who exists.</para>
</listitem>
<listitem>
<para>Since mc_who's setValue is called, both the content and the visual presentation at the client are updated automatically, when setWho is called.</para>
</listitem>
</itemizedlist>
<orderedlist>
<para>2. Declare the class in the macro declaration with the class attribute.</para>
</orderedlist>
<programlisting>&lt;?component name="username" macroURI="/WEB-INF/macros/username.zul"&#13;class="mypack.Username"?&gt;&#13;</programlisting></sect3><sect3><title>Provide Additional Methods in zscript</title>
<para>In addition to implementing with a Java file, you can implement the Java class(es) in zscript. The advantage is that no compilation is required and you can modify its content dynamically (without re-deploying the Web application). The disadvantage is the performance downgrade and prone to typos. </para>
<para>It takes a few steps to implement a Java class in zscript.</para>
<para>1. You have to prepare a zscript file, say /zs/username.zs, for the class to implement. Notice that you can put any number of classes and functions in the same zscript file.</para>
<programlisting>//username.zs&#13;package mypack;&#13;public class Username extends HtmlMacroComponent {&#13;    public void setWho(String name) {    &#13;        setDynamicProperty("who", name);        &#13;        Textbox tb = getFellow("mc_who");        &#13;        if (tb != null) tb.setValue(name);        &#13;    }    &#13;    public String getWho() {    &#13;        return getDynamicProperty("who");        &#13;    }    &#13;}&#13;</programlisting>
<orderedlist>
<para>2. Use the init directive to load the zscript file, and then declare the component</para>
</orderedlist>
<programlisting>&lt;?init zscript="/zs/username.zs"?&gt;&#13;&lt;?component name="username" macroURI="/WEB-INF/macros/username.zul"&#13;class="mypack.Username"?&gt;&#13;</programlisting>
<para>The implementation class (mypack.Username in the previous example) is resolved as late as the macro component is really used, so it is also OK to use the zscript element to evaluate the zscript file.</para>
<programlisting>&lt;?component name="username" macroURI="/WEB-INF/macros/username.zul"&#13;class="mypack.Username"?&gt;&#13;&lt;zk&gt;&#13;    &lt;zscript src="/zs/username.zs"/&gt;    &#13;    &lt;username/&gt;    &#13;&lt;/zk&gt;&#13;</programlisting>
<para>Though subjective, the init directive is more readable.</para></sect3><sect3><title>Override the Implementation Class When Instantiation</title>
<para>Like any other component, you can use the use attribute to override the class used to implement a macro component for any particular instance.</para>
<programlisting>&lt;?component name="username" macroURI="/WEB-INF/macros/username.zul"&#13;class="mypack.Username?&gt;&#13;&#13;&lt;username use="another.MyAnotherUsername/&gt;&#13;</programlisting>
<para>Of course, you have to provide the implementation of another.MyAnohterUsername in the above example. Once again the class can be implemented with separate Java file, or by use of zscript.</para></sect3><sect3><title>Create a Macro Component Manually</title>
<para>To create a macro component manually, you have to invoke the afterCompose method after all the initialization as follows.</para>
<programlisting>HtmlMacroComponent ua = (HtmlMacroComponent)&#13;    page.getComponentDefinition("username", false).newInstance(page);    &#13;ua.setParent(wnd);&#13;ua.applyProperties(); //apply properties defined in the component definition&#13;ua.setDynamicProperty("who", "Joe");&#13;ua.afterCompose(); //then the ZUML page is loaded and child components are created&#13;</programlisting>
<para>Note: The getComponentDefinition method is used to look up the component definitions defined in a page.</para>
<para>If you implement a class, say Username, for the macro, then you can do as follow.</para>
<programlisting>Username ua = new Username();&#13;ua.setWho("Joe");&#13;ua.setParent(wnd);&#13;ua.afterCompose();&#13;</programlisting>
<para/></sect3></sect2></sect1></chapter>
<chapter>
<title>11. Advanced Features</title>
<para>This chapter describes the advance topics about components and pages.</para><sect1><title>Identify Pages</title>
<para>All pages in the same desktop could be accessed in an event listener. For the current page of a component, you could use the getPage method in the org.zkoss.zk.ui.Component interface.</para>
<para>To get a reference to another page, you first have to assign an identifier to the page being looked for.</para>
<programlisting>&lt;?page id="another"?&gt;&#13;...&#13;</programlisting>
<para>Then, you could use the getPage method in the org.zkoss.zk.ui.Desktop interface as follows.</para>
<programlisting>&lt;zscript&gt;&#13;    Page another = self.getDesktop().getPage("another");    &#13;&lt;/zscript&gt;&#13;</programlisting></sect1><sect1><title>Identify Components</title>
<para>Components are grouped by the ID spaces. The page itself is an ID space. The window component is another ID space. Assume you have a page called P, the page have a window called A, and the window A has a child window B. Then, if you want to retrieve a child component, say C, in the window B. Then, you could do as follows.</para>
<programlisting>comp.getDesktop().getPage("P").getFellow("A").getFellow("B").getFellow("C");&#13;</programlisting>
<para>The getFellow method is used to retrieve any fellow in the same ID space. Refer to the ID Space section in the Basics chapter for the concept of ID spaces.</para><sect2><title>The Component Path</title>
<para>Like a path in a file system, a component path is a catenation of IDs of components along ID spaces. In the above example, the path will be "/A/B/C". In other words, the root of a component path is the current page. If you want to identity another page, you have to use "//". In the above example, the path can also be expressed as "//P/A/B/C".</para>
<para>The org.zkoss.zk.ui.Path class is, like java.io.File, provided to simplify the manipulation of component paths. Thus, the following statement is equivalent to the above example.</para>
<programlisting>Path.getComponent("/A/B/C"); //assume the current page is P&#13;Path.getComponent("//P/A/B/C");&#13;</programlisting>
<para>In addition to static methods, you could instantiate a Path instance.</para>
<programlisting>Path parent = new Path("//P/A");&#13;new Path(parent, "B/C").getComponent();&#13;</programlisting>
<para>Tip: Path.getComponent("//xyz") always returns null, since the identifier following // is the page's ID. And, page is not component.</para></sect2></sect1><sect1><title>Sorting</title>
<para>The list returned from the getChildren method of the org.zkoss.zk.ui.Component interface is live. So is the getItems method of the org.zkoss.zul.Listbox interface and others. In other words, you can manipulate it content directly. For example, the following statements are equivalent:</para>
<programlisting>comp.getChildren().remove(0);&#13;((Component)comp.getChildren().get(0)).setParent(null);&#13;</programlisting>
<para>However, you cannot use the sort method of the java.util.Collections class to sort them. The reason is subtle: the list of children automatically removes a child from the original position, when you add it to another position. For example, the following statement actually moves the second child in front of the first child.</para>
<programlisting>comp.getChildren().add(0, comp.getChildren().get(1));&#13;</programlisting>
<para>It behaves differently from a normal list (such as LinkedList), so the sort method of Collections won't work.</para>
<para>To simplify the sorting of components, we therefore provide the sort method in the org.zkoss.zk.ui.Components class that works with the list of children.</para>
<para>In the following example, we utilize the sort method and the org.zkoss.zul.ListitemComparator to provide the sorting for a list box.</para>
<para>Notice that this is only for illustration because list boxes support sorting of list items directly. Refer to the Sorting subsection of the List Boxes section in the ZUML with the XUL Component Set chapter.</para>
<programlisting>&lt;window title="Sort Listbox" border="normal" width="200px"&gt;<inlinegraphic fileref="images/10000000000000D30000009AAB835ED5.png" align="right"/>&#13;    &lt;vbox&gt;    &#13;        &lt;listbox id="l"&gt;        &#13;            &lt;listhead&gt;            &#13;                &lt;listheader label="name"/&gt;                &#13;                &lt;listheader label="gender"/&gt;                &#13;            &lt;/listhead&gt;            &#13;            &lt;listitem&gt;            &#13;                &lt;listcell label="Mary"/&gt;                &#13;                &lt;listcell label="FEMALE"/&gt;                &#13;            &lt;/listitem&gt;            &#13;            &lt;listitem&gt;            &#13;                &lt;listcell label="John"/&gt;                &#13;                &lt;listcell label="MALE"/&gt;                &#13;            &lt;/listitem&gt;            &#13;            &lt;listitem&gt;            &#13;                &lt;listcell label="Jane"/&gt;                &#13;                &lt;listcell label="FEMALE"/&gt;                &#13;            &lt;/listitem&gt;            &#13;            &lt;listitem&gt;            &#13;                &lt;listcell label="Henry"/&gt;                &#13;                &lt;listcell label="MALE"/&gt;                &#13;            &lt;/listitem&gt;            &#13;        &lt;/listbox&gt;        &#13;        &lt;hbox&gt;        &#13;            &lt;button label="Sort 1" onClick="sort(l, 0)"/&gt;            &#13;            &lt;button label="Sort 2" onClick="sort(l, 1)"/&gt;            &#13;        &lt;/hbox&gt;        &#13;    &lt;/vbox&gt;    &#13;    &lt;zscript&gt;    &#13;    void sort(Listbox l, int j) {    &#13;        Components.sort(l.getItems(), new ListitemComparator(j));        &#13;    }    &#13;    &lt;/zscript&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect1><sect1><title>Browser's Information and Controls</title>
<para>To retrieve the information about the client, you can register an event listener for the onClientInfo event at a root component. To control the behavior of the client, you can use the utilities in the org.zkoss.zk.ui.util.Clients class.</para><sect2><title>The onClientInfo Event</title>
<para>Sometimes an application needs to know the client's information, such as time zone. Then, you can add an event listener for the onClientInfo event. Once the event is added, the client will send back an instance of the org.zkoss.zk.ui.event.ClientInfoEvent class, from which you can retrieve the information of the client.</para>
<programlisting>&lt;grid onClientInfo="onClientInfo(event)"&gt;&#13;    &lt;rows&gt;    &#13;        &lt;row&gt;Time Zone &lt;label id="tm"/&gt;&lt;/row&gt;        &#13;        &lt;row&gt;Screen &lt;label id="scrn"/&gt;&lt;/row&gt;        &#13;    &lt;/rows&gt;    &#13;                &#13;    &lt;zscript&gt;    &#13;    void onClientInfo(ClientInfoEvent evt) {    &#13;        tm.setValue(evt.getTimeZone().toString());        &#13;        scrn.setValue(        &#13;            evt.getScreenWidth()+"x"+evt.getScreenHeight()+"x"+evt.getColorDepth());            &#13;    }    &#13;    &lt;/zscript&gt;    &#13;&lt;/grid&gt;&#13;</programlisting>
<para>Note: The onClientInfo event is meaningful only to the root component (aka., a component without any parent).</para>
<para>The client information is not stored by ZK, so you have to store it manually if necessary. Since a session is associated with the same client, you can store the client info in the session's attribute.</para>
<programlisting>session.setAttribute("px_preferred_time_zone", event.getTimeZone());&#13;</programlisting>
<para>Notice that, if you store a time zone as a session variable called px_preferred_time_zone, then its value will be used as the default time zone thereafter. Refer to the Time Zone section in the Internationalization chapter.</para>
<para>Notice that the onClientInfo event is sent from the client after the page is rendered (and sent to the client). Thus, if some of your component's data depends on the client's info, say, time zone, you might have to ask the client to re-send the request as follows.</para>
<programlisting>import org.zkoss.util.TimeZones;&#13;...&#13;if (!TimeZones.getCurrent().equals(event.getTimeZone())&#13;    Executions.sendRedirect(null);    &#13;</programlisting></sect2><sect2><title>The org.zkoss.ui.util.Clients Class</title>
<para>Utilities to control the client's visual presentation (more precisely, the browser window) are put in org.zkoss.ui.util.Clients collectively. For example, you can scroll the browser window (aka., the desktop) as follows.</para>
<programlisting>Clients.scrollBy(100, 0);&#13;</programlisting></sect2><sect2><title>Prevent User From Closing a Window</title>
<para>In some situation, you might want to prevent or, at least, alert a user when he tries to close the window or browse to another URL. For example, when a user is composing a mail that is not saved yet.</para>
<programlisting>if (mail.isDirty()) {&#13;    Clients.confirmClose("Your message has not been sent.\nDiscard your message?");    &#13;} else {&#13;    Clients.confirmClose(null);    &#13;}&#13;</programlisting>
<para>Once the confirmClose method is called with a non-empty string, a confirmation dialog is shown up when the user tries to close the browser window, reload, or browse to another URL:</para>
<para>
<graphic fileref="images/100000000000036D000000FE561CE3BC.png">2
			
		</graphic> </para></sect2></sect1><sect1><title>Browser's History Management</title>
<para>In traditional multi-page Web applications, user usually use the BACK and FORWARD button to surf around multiple pages, and bookmark them for later use. With ZK, you still can use multiple pages to represent different set of features and information, as you did in traditional Web applications.</para>
<para>However, it is common for ZK applications to represent a lot of features in one desktop, which usually take multiple Web pages in a traditional Web application. To make user's surfing easier, ZK supports the browser's history management that enables ZK applications to manage browser's history simply in the server.</para>
<para>The concept is simple. You add items for appropriate states of a desktop to the browser's history, and then users can use the BACK and FORWARD button to surf around different states of the same ZK desktop. When users surf around these states, an event called onBookmarkChange is sent to notify the application.</para>
<para>From application's viewpoint, it takes two steps to manage the browser's history:</para>
<orderedlist>
<listitem>
<para>Add an item to the browser's history for each of the appropriate states of your desktop.</para>
</listitem>
<listitem>
<para>Listen to the onBookmarkChange event and manipulate the desktop accordingly.</para>
</listitem>
</orderedlist><sect2><title>Add the Appropriate States to Browser's History</title>
<para>Your application has to decide what are the appropriate states to add to the browser's history. For example, in a multi-step operation, each state is a good candidate to add to browser's history, such that users can jump over these states or bookmark them for later use.</para>
<para>Once you decide when to add a state to the browser's history, you can simply invoke the setBookmark method of the org.zkoss.zk.ui.Desktop interface when appropriate. Adding a state to the browser's history is called bookmarking. Notice that it is not the bookmarks that users add to the browser (aka., My Favorites in Internet Explorer).</para>
<para>Tip: You might call the adding state in the server as the server's bookmarks in contrast with the browser's bookmarks.</para>
<para>For example, assume you want to bookmark the state when the Next button is clicked, then you do as follows.</para>
<programlisting>&lt;button label="Next" onClick="desktop.setBookmark(&amp;quot;Step-2&amp;quot;)"/&gt;&#13;</programlisting>
<para>If you look carefully at the URL, you will find ZK appends #Step-2 to the URL.</para>
<para>
<graphic fileref="images/1000000000000284000000226A7DEE65.png">2
			
		</graphic>If you press the BACK button, you will see as follows.</para>
<para>
<graphic fileref="images/100000000000027B0000001CA1C78D7E.png">2
			
		</graphic>
</para></sect2><sect2><title>Listen to the onBookmarkChange Event and Manipulate the Desktop Accordingly</title>
<para>After adding a state to the browser's history, users can then surf among these states such as pressing the BACK button to return the previous state. When the state is changed, ZK will notify the application by broadcasting the onBookmarkChange event (an instance of the org.zkoss.zk.ui.event.BookmarkEvent class) to all root components in the desktop.</para>
<para>Unlike traditional multi-page Web applications, you have to manipulate the ZK desktop manually when the state is changed. It is application developer's job to manipulate the desktop to reflect the state that a bookmark represented.</para>
<para>To listen the onBookmarkChange event, you can add an event listener to any page of the desktop, or to any of its root component.</para>
<programlisting>&lt;window onBookmarkChange="goto(event.bookmark)"&gt;&#13;    &lt;zscript&gt;    &#13;    void goto(String bookmark) {    &#13;        if ("Step-2".equals(bookmark)) {        &#13;            ...//create components for Step 2            &#13;        } else { //empty bookmark        &#13;            ...//create components for Step 1            &#13;        }        &#13;    &lt;/zscript&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Like handling any other events, you can manipulate the desktop as you want, when the onBookmarkChange event is received. A typical approach is to use the createComponents method of the org.zkoss.zk.ui.Executions class. In other words, you can represent each state with one ZUML page, and then use createComponents to create all components in it when onBookmarkChange is received.</para>
<programlisting>if ("Step-2".equals(bookmark)) {&#13;    //1. Remove components, if any, representing the previous state    &#13;    try {    &#13;        self.getFellow("replacable").detach();        &#13;    } catch (ComponentNotFoundException ex) {    &#13;        //not created yet        &#13;    }    &#13;&#13;    //2. Creates components belonging to Step 2    &#13;    Executions.createComponents("/bk/step2.zul", self, null);    &#13;}&#13;</programlisting></sect2><sect2><title>A Simple Example</title>
<para>In this example, we bookmarks each tab selection.</para>
<programlisting>&lt;window id="wnd" title="Bookmark Demo" width="400px" border="normal"&gt;&#13;    &lt;zscript&gt;    &#13;    page.addEventListener("onBookmarkChange",    &#13;        new EventListener() {        &#13;                            public void onEvent(Event event) throws UiException {try {                            &#13;                    wnd.getFellow(wnd.desktop.bookmark).setSelected(true);                    &#13;                } catch (ComponentNotFoundException ex) {                &#13;                    tab1.setSelected(true);                    &#13;                }                &#13;            }            &#13;        });        &#13;    &lt;/zscript&gt;    &#13;&#13;    &lt;tabbox id="tbox" width="100%" onSelect="desktop.bookmark = self.selectedTab.id"&gt;    &#13;        &lt;tabs&gt;        &#13;            &lt;tab id="tab1" label="Tab 1"/&gt;            &#13;            &lt;tab id="tab2" label="Tab 2"/&gt;            &#13;            &lt;tab id="tab3" label="Tab 3"/&gt;            &#13;        &lt;/tabs&gt;        &#13;        &lt;tabpanels&gt;        &#13;            &lt;tabpanel&gt;This is panel 1&lt;/tabpanel&gt;            &#13;            &lt;tabpanel&gt;This is panel 2&lt;/tabpanel&gt;            &#13;            &lt;tabpanel&gt;This is panel 3&lt;/tabpanel&gt;            &#13;        &lt;/tabpanels&gt;        &#13;    &lt;/tabbox&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect2><sect2><title>Bookmarking with iframe</title>
<para>If a page contains one or more iframe components, it is sometimes better to bookmark the status of the iframe component, too. For example, when the contained iframe was navigated to another URL, you might want to change the bookmark of the page (the container), such that you can restore to the iframe to the right content. To do this, you have to listen to the onURIChange event as follows.</para>
<programlisting>&lt;window onURIChange="desktop.bookmark = storeURI(event.getTarget(), event.getURI())"&gt;&#13;    &lt;iframe src="${uri_depends_on_bookmark}" forward="onURIChange"/&gt;    &#13;</programlisting>
<para>&lt;/window&gt;</para></sect2></sect1><sect1><title>Component Cloning</title>
<para>All components are cloneable. In other words, they are implemented java.lang.Cloneable. Thus, it is simple to replicate components as follows.</para>
<programlisting>&lt;vbox id="vb"&gt;&#13;    &lt;listbox id="src" multiple="true" width="200px"&gt;    &#13;        &lt;listhead&gt;        &#13;            &lt;listheader label="Population"/&gt;            &#13;            &lt;listheader align="right" label="%"/&gt;            &#13;        &lt;/listhead&gt;        &#13;        &lt;listitem value="A"&gt;        &#13;            &lt;listcell label="A. Graduate"/&gt;            &#13;            &lt;listcell label="20%"/&gt;            &#13;        &lt;/listitem&gt;        &#13;        &lt;listitem value="B"&gt;        &#13;            &lt;listcell label="B. College"/&gt;            &#13;            &lt;listcell label="23%"/&gt;            &#13;        &lt;/listitem&gt;        &#13;        &lt;listitem value="C"&gt;        &#13;            &lt;listcell label="C. High School"/&gt;            &#13;            &lt;listcell label="40%"/&gt;            &#13;        &lt;/listitem&gt;        &#13;    &lt;/listbox&gt;    &#13;&#13;    &lt;zscript&gt;    &#13;    int cnt = 0;    &#13;    &lt;/zscript&gt;    &#13;    &lt;button label="Clone"&gt;    &#13;        &lt;attribute name="onClick"&gt;        &#13;    Listbox l = src.clone();    &#13;    l.setId("dst" + ++cnt);    &#13;    vb.insertBefore(l, self);    &#13;        &lt;/attribute&gt;        &#13;    &lt;/button&gt;    &#13;&lt;/vbox&gt;&#13;</programlisting>
<itemizedlist>
<listitem>
<para>Once a component is cloned, all its children and descendants are cloned, too.</para>
</listitem>
<listitem>
<para>The cloned component doesn't belong to any page and parent. In other words, src.clone().getParent() returns null.</para>
</listitem>
<listitem>
<para>ID is not changed, so you remember to change ID if you want to add it back to the same ID space.</para>
</listitem>
</itemizedlist></sect1><sect1><title>Component Serialization</title>
<para>All components are serializable, so you can serialize components to the memory or other storage and de-serialize them later. Like cloning, the de-serialized components don't belong to another page (and desktop). They are also independent of the one being serialized. As illustrated below, serialization can be used to implement the similar cloning function.</para>
<programlisting>&lt;vbox id="vb"&gt;&#13;    &lt;listbox id="src" multiple="true" width="200px"&gt;    &#13;        &lt;listhead&gt;        &#13;            &lt;listheader label="Population"/&gt;            &#13;            &lt;listheader align="right" label="%"/&gt;            &#13;        &lt;/listhead&gt;        &#13;        &lt;listitem value="A"&gt;        &#13;            &lt;listcell label="A. Graduate"/&gt;            &#13;            &lt;listcell label="20%"/&gt;            &#13;        &lt;/listitem&gt;        &#13;        &lt;listitem value="B"&gt;        &#13;            &lt;listcell label="B. College"/&gt;            &#13;            &lt;listcell label="23%"/&gt;            &#13;        &lt;/listitem&gt;        &#13;        &lt;listitem value="C"&gt;        &#13;            &lt;listcell label="C. High School"/&gt;            &#13;            &lt;listcell label="40%"/&gt;            &#13;        &lt;/listitem&gt;        &#13;    &lt;/listbox&gt;    &#13;&#13;    &lt;zscript&gt;    &#13;    int cnt = 0;    &#13;    &lt;/zscript&gt;    &#13;    &lt;button label="Clone"&gt;    &#13;        &lt;attribute name="onClick"&gt;        &#13;    import java.io.*;    &#13;    ByteArrayOutputStream boa = new ByteArrayOutputStream();    &#13;    new ObjectOutputStream(boa).writeObject(src);    &#13;    Listbox l = new ObjectInputStream(    &#13;        new ByteArrayInputStream(boa.toByteArray())).readObject();        &#13;    l.setId("dst" + ++cnt);    &#13;    vb.insertBefore(l, self);    &#13;        &lt;/attribute&gt;        &#13;    &lt;/button&gt;    &#13;&lt;/vbox&gt;&#13;</programlisting>
<para>Of course, cloning with the clone method has much better performance, while serialized components can be used crossing different machines.</para><sect2><title>Serializable Sessions</title>
<para>By default, a non-serializable implementation is used to represent a session (org.zkoss.zk.ui.Session). The benefit of using non-serializable implementation is that application developers need to worry whether the value stored in a component, say, Listitem's setValue, is serializable.</para>
<para>However, if you are sure all values stored in components are serializable, you can use a serializable implementation to represent a session.</para>
<para>To configure ZK to use the serializable implementation, you have to configure the ui-factory-class element in WEB-INF/zk.xml, refer to Appendix B in the Developer's Reference for more details.</para></sect2><sect2><title>Serialization Listeners</title>
<para>The attributes, variables, and listeners stored in a component, a page, a desktop or a session are also serialized if they are serializable (and the corresponding component, page, desktop or session is serialized).</para>
<para>To simplify the implementation of serializable objects, ZK invokes the serialization listener before serialization and after de-serialization, if the special interface is implemented. For example, you can implement an event listener for a component as follows.</para>
<programlisting>public MyListener&#13;implements EventListener, java.io.Serializable, ComponentSerializationListener {&#13;    private transient Component _target; //no need to serialize it    &#13;&#13;    //ComponentSerializationListener//    &#13;    public willSerialize(Component comp) {    &#13;    }    &#13;    public didDeserialize(Component comp) {    &#13;        _target = comp; //restore it back        &#13;    }    &#13;}&#13;</programlisting>
<para>The org.zkoss.zk.ui.util.ComponentSerializationListener interface is used when serializing a component. Similarly, PageSerializationListener, DesktopSerializationListener and SessionSerializationListener are used when serializing a page, desktop and session, respectively.</para></sect2></sect1><sect1><title>Inter-Page Communication</title>
<para>Communications among pages in the same desktop is straightforward. First, you can use event to notify each other. Second, you can use attributes to share data.</para><sect2><title>Post and Send Events</title>
<para>You could communicate among pages in the same desktop. The way to communicate is to use the postEvent or sendEvent to notify a component in the target page.</para>
<programlisting>Events.postEvent(new Event("SomethingHappens",&#13;    comp.getDesktop().getPage("another").getFellow("main"));    &#13;</programlisting></sect2><sect2><title>Attributes</title>
<para>Each component, page, desktop, session and Web application has an independent map of attributes. It is a good place to share data among components, pages, desktops and even sessions.</para>
<para>In zscript and EL expressions, you could use the implicit objects: componentScope, pageScope, desktopScope, sessionScope, requestScope and applicationoScope.</para>
<para>In a Java class, you could use the attribute-relevant methods in corresponding classes to access them. You could also use the scope argument to identify which scope you want to access. The following two statements are equivalent, assuming comp is a component.</para>
<programlisting>comp.getAttribute("some", comp.DESKTOP_SCOPE);&#13;comp.getDesktop().getAttribute("some");&#13;</programlisting></sect2></sect1><sect1><title>Inter-Web-Application Communication</title>
<para>An EAR file could have multiple WAR files. Each of them is a Web application. There are no standard way to communicate between two Web applications.</para>
<para>However, ZK supports a way to reference the resource from another Web applications. For example, assume you want to include a resource, say /foreign.zul, from another Web application, say app2. Then, you could do as follows.</para>
<programlisting>&lt;include src="~app2/foreign.zul"/&gt;&#13;</programlisting>
<para>Similarly, you could reference a style sheet from another Web application.</para>
<programlisting>&lt;style src="~app2/foreign.css"/&gt;&#13;</programlisting>
<para>Note: Whether you can access a resource located in another Web application depends on the configuration of the Web server. For example, you have to specify crossContext="true" in conf/context.xml, if you are using Tomcat.</para><sect2><title>Web Resources from Classpath</title>
<para>With ZK, you could reference a resource that is locatable by the classpath. The advantage is that you could embed Web resources in a JAR file, which simplifies the deployment.</para>
<programlisting>&lt;img src="~./my/jar.gif"/&gt;&#13;</programlisting>
<para>Then, it tries to locate the resource, /my/jar.gif, at the /web directory by searching resources from the classpath.</para></sect2></sect1><sect1><title>Annotations</title>
<para>Annotations provide data about a component that is not part of the component itself. They have no direct effect on the operation of the component they annotate. Rather, they are mainly used by a tool or a manager to examine at runtime. The content and meanings of annotations totally depend on the tool or the manager the developer uses. For example, a data-binding manager might examine annotations to know the data source that the value of a component will be stored.</para><sect2><title>Annotate ZUML Pages</title>
<para>Annotations can be applied to declarations of components and properties in ZUML pages. There are two way to annotate them: the classic way and the simple way. Which one to use depends on your favorite. You can mix them in the same page if you like.</para><sect3><title>The Classic Way to annotate the Component Declarations</title>
<para>The annotation appears before the declaration of the element that you want to annotate:</para>
<programlisting>&lt;window xmlns:a="http://www.zkoss.org/2005/zk/annotation"&gt;&#13;    &lt;vbox&gt;    &#13;        &lt;a:author name="John Magic" date="3/17/2006"/&gt;        &#13;        &lt;listbox&gt;        &#13;        &lt;/listbox&gt;        &#13;...&#13;</programlisting>
<para>The annotation is an element in the <ulink url="http://www.zkoss.org/2005/zk/annotation">http://www.zkoss.org/2005/zk/annotation</ulink> namespace. The element name and attributes can be anything depending on the tool you use. You can annotate the same component declaration with several annotations:</para>
<programlisting>&lt;a:author name="John Magic"/&gt;&#13;&lt;a:editor name="Mary White" date="4/11/2006"/&gt;&#13;&lt;listbox/&gt;&#13;</programlisting>
<para>where author and editor are the annotation names, while name and date are the attribute names. In other words, an annotation consists of a name and a map of attributes.</para>
<para>If the annotations annotating a declaration have the same name, they are merged as a single annotation. For example,</para>
<programlisting>&lt;a:define var1="auto"/&gt;&#13;&lt;a:define var2="123"/&gt;&#13;&lt;listbox/&gt;&#13;</programlisting>
<para>is equivalent to</para>
<programlisting>&lt;a:define var1="auto" var2="123"/&gt;&#13;&lt;listbox/&gt;&#13;</programlisting>
<para>Note: Annotations don't support EL expressions.</para></sect3><sect3><title>The Classic Way to Annotate the Property Declarations</title>
<para>To annotation a property declaration, you can put the annotation in front of the declaration of a property as shown below.</para>
<programlisting>&lt;listitem a:bind="datasource='author',name='name'" value="${author.name}"/&gt;&#13;</programlisting>
<para>Alternatively, you can use the attribute element and annotate the declaration of a property similar to the component declaration. In other words, the above annotation is equivalent to the following:</para>
<programlisting>&lt;listitem&gt;&#13;    &lt;a:bind datasource="author" name="name"/&gt;    &#13;    &lt;attribute name="value"&gt;${author.name}&lt;/attribute&gt;    &#13;&lt;/listitem&gt;&#13;</programlisting>
<para>Note: if the attribute name of a annotation is omitted, the name is assumed to be value. For example,</para>
<programlisting>&lt;listitem a:bind="value='selected'" value=""/&gt;&#13;</programlisting>
<para>is equivalent to</para>
<programlisting>&lt;listitem a:bind="selected" value=""/&gt;&#13;</programlisting></sect3><sect3><title>The Simple Way to Annotate the Property Declarations</title>
<para>In addition to annotating with the special XML namespace as described above, there is a simple way to annotate properties: specify a value with an annotation expression for the property to annotate, as show below.</para>
<programlisting>&lt;listitem label="@{bind(datasource='author',selected)}"/&gt;&#13;</programlisting>
<para>The format of the annotation expression is @{annot-name(attr-name1=attr-value1, attr-name2=attr-value2)}. In other words, if the value of the property is an anntation expression, it is considered as the annotation for the corresponding property, rather than its value. In the above example, an annotation called bind is annotated to the label property. Thus, it is equivalent to</para>
<programlisting>&lt;listitem a:bind=" datasource='author',selected" label=""/&gt;&#13;</programlisting>
<para>If the annotation name is not specified, the name is assumed to be default. For example, the following code snippet annotates the label property with an annotation named default, and the annotation has one attribute whose name and value are value and selected.name, respectively.</para>
<programlisting>&lt;listitem label="@{selected.name}"/&gt;&#13;</programlisting>
<para>In other words, it is equivalent to the following code snippet.</para>
<programlisting>&lt;listitem label="@{default(value='selected.name')}"/&gt;&#13;</programlisting>
<para>Note: you can annotate the same property with multiple annotations, as shown below.</para>
<programlisting>&lt;listitem label="@{ann1(selected.name) ann2(attr2a='attr2a',attr2b)}"/&gt;&#13;</programlisting></sect3><sect3><title>The Simple Way to Annotate the Component Declarations</title>
<para>Similarly, you can annotate a component by specifying the annotation expression to a specific attribute called self as shown below.</para>
<programlisting>&lt;listitem self="@{bind(each=person)}"/&gt;&#13;</programlisting>
<para>where self is a keyword to denote the annotation is used to annotate the component declaration, rather than any property. In other words, it is equivalent to</para>
<programlisting>&lt;a:bind each="person"/&gt;&#13;&lt;listitem/&gt;&#13;</programlisting></sect3></sect2><sect2><title>Annotate Components Created Manually</title>
<para>You can annotate a component at the run time by use of the addAnnotation method of the org.zkoss.zk.ui.sys.ComponentCtrl interface.</para>
<programlisting>Listbox listbox = new Listbox();&#13;listbox.addAnnotation("some", null);&#13;</programlisting></sect2><sect2><title>Retrieve Annotations</title>
<para>The annotations can be retrieved back at the runtime. They are usually retrieved by tools, such as the data-binding manager, rather than applications. In other words, applications annotate a ZUML page to tell the tools how to handle components for a particular purpose. </para>
<para>The following is an example to dump all annotations of a component:</para>
<programlisting>void dump(StringBuffer sb, Component comp) {&#13;ComponentCtrl compCtrl = (ComponentCtrl)comp;&#13;    sb.append(comp.getId()).append(": ")    &#13;     .append(compCtrl .getAnnotations()).append('\n');    &#13;&#13;    for (Iterator it = compCtrl.getAnnotatedProperties().iterator(); it.hasNext();) {    &#13;        String prop = it.next();        &#13;        sb.append(" with ").append(prop).append(": ")        &#13;            .append(compCtrl .getAnnotations(prop)).append('\n');            &#13;    }    &#13;}&#13;</programlisting></sect2></sect1><sect1><title>Richlets</title>
<para>A richlet is a small Java program that creates all necessary components in response to user's request.</para>
<para>When a user requests the content of an URL, the ZK loader checks if the resource of the specified URL is a ZUML page or a richlet. If it is a ZUML page, then the ZK loader creates components automatically based on the ZUML page's content as we described in the previous chapters.</para>
<para>If the resource is a richlet, the ZK loader hands over the processing to the richlet. What and how to create components are all handled by the richlet. In other words, it is the developer's job to create all necessary components programmingly in response to the request.</para>
<para>The choice between ZUML pages and richlets depends on your preference. For most developers, ZUML pages are better for the readability and simplicity.</para>
<para>It is straightforward to implement a richlet. First, implement the org.zkoss.zk.ui.Richlet interface and then declare the association of the richlet with an URL.</para><sect2><title>Implement the org.zkoss.zk.ui.Richlet interface</title>
<para>All richlets must implement the org.zkoss.zk.ui.Richlet interface. To minimize the effects of implementing all methods, can extend the org.zkoss.zk.ui.GenericRichlet class instead. Then, when the specified URL is requested, the service method is called, and you can create the user interface then.</para>
<programlisting>package org.zkoss.zkdemo;&#13;&#13;import org.zkoss.zk.ui.Page;&#13;import org.zkoss.zk.ui.GenericRichlet;&#13;import org.zkoss.zk.ui.event.*;&#13;import org.zkoss.zul.*;&#13;&#13;public class TestRichlet extends GenericRichlet {&#13;    //Richlet//    &#13;    public void service(Page page) {    &#13;        page.setTitle("Richlet Test");        &#13;&#13;        final Window w = new Window("Richlet Test", "normal", false);        &#13;        new Label("Hello World!").setParent(w);        &#13;        final Label l = new Label();        &#13;        l.setParent(w);        &#13;&#13;        final Button b = new Button("Change");        &#13;        b.addEventListener(Events.ON_CLICK,        &#13;            new EventListener() {            &#13;                int count;                &#13;                public void onEvent(Event evt) {                &#13;                    l.setValue("" + ++count);                    &#13;                }                &#13;            });            &#13;        b.setParent(w);        &#13;&#13;        w.setPage(page);        &#13;    }    &#13;}&#13;</programlisting>
<para>Like servlets, you can implement the init and destroy methods to initialize and to destroy the richlet when it is loaded. Like servlet, a richlet is loaded once and serves all requests for the URL it is associated with.</para><sect3><title>One Richlet per URL</title>
<para>Like servlets, a richlet is created and shared for the same URL. In other words, the richlet (at least the service method) must be thread-safe. On the other hands, components are not shareable. Each desktop has an independent set of components. Therefore, it is generally not a good idea to store components as a data member of a richlet.</para>
<para>There are many ways to solve this issue. A typical one is to use another class for holding the components for each desktop, as illustrated below.</para>
<programlisting>class MyApp { //one per desktop&#13;    Window _main;    &#13;    MyApp(Page page) {    &#13;        _main = new Window();        &#13;        _main.setPage(page);        &#13;    }    &#13;}&#13;</programlisting>
<para/>
<para>class MyRichlet extends GenericRichlet {</para>
<programlisting>    public void service(Page page) {    &#13;        new MyApp(page); //create and forget        &#13;    }    &#13;}&#13;</programlisting></sect3></sect2><sect2><title>Configure web.xml and zk.xml</title>
<para>After implementing the richlet, you can define the richlet in zk.xml with the following statement.</para>
<programlisting>&lt;richlet&gt;&#13;        &lt;richlet-name&gt;Test&lt;/richlet-name&gt;&lt;richlet-class&gt;org.zkoss.zkdemo.TestRichlet&lt;/richlet-class&gt;        &#13;&lt;/richlet&gt;&#13;</programlisting>
<para>Once declaring a richlet, you can map it to any number of URL by use of richlet-mapping as depicted below.</para>
<programlisting>&lt;richlet-mapping&gt;&#13;    &lt;richlet-name&gt;Test&lt;/richlet-name&gt;    &#13;    &lt;url-pattern&gt;/test&lt;/url-pattern&gt;    &#13;&lt;/richlet-mapping&gt;&#13;&lt;richlet-mapping&gt;&#13;    &lt;richlet-name&gt;Test&lt;/richlet-name&gt;    &#13;    &lt;url-pattern&gt;/some/more/*&lt;/url-pattern&gt;    &#13;&lt;/richlet-mapping&gt;&#13;</programlisting>
<para>By default, richlets is disabled. To enable richlets, you have to add the following declaration to web.xml. Once enabled, you can add as many as richlets you want without modifying web.xml anymore.</para>
<programlisting>&lt;servlet-mapping&gt;&lt;servlet-name&gt;zkLoader&lt;/servlet-name&gt;&lt;url-pattern&gt;/zk/*&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;        &#13;</programlisting>
<para>Then, you can visit <ulink url="http://localhost/zk/test">http://localhost/</ulink>
<ulink url="http://localhost/zk/test">zk</ulink>
<ulink url="http://localhost/zk/test">/test</ulink> to request the richlet.</para>
<para>The URL specified in the url-pattern element must start with /. If the URI ends with /*, then it is matched to all request with the same prefix. To retrieve the real request, you can check the value returned by the getRequestPath method of the current page.</para>
<programlisting>public void service(Page page) {&#13;    if ("/some/more/hi".equals(page.getRequestPath()) {    &#13;        ...        &#13;    }}    &#13;</programlisting>
<para>Tip: By specifying /* to url-pattern, you can map all unmatched URL to the mapped richlet.</para></sect2></sect1><sect1><title>Session Timeout Management</title>
<para>After a session is timeout, all desktops it belongs are removed. If a user keeps accessing the desktop that no longer exists, an error message will be shown at the browser to prompt user for the situation.</para>
<para>Sometimes it is better to redirect to another page that gives users more complete description and guides they to the other resources, or asks them to login again. You can specify the target URI, that you want to redirect users to when timeout, in zk.xml under WEB-INF directory. For example, the target URI is /timeout.zul and then you can add the following lines to zk.xml.</para>
<programlisting>&lt;device-config&gt;&#13;    &lt;device-type&gt;ajax&lt;/device-type&gt;    &#13;    &lt;timeout-uri&gt;/timeout.zul&lt;/timeout-uri&gt;    &#13;&lt;/device-config&gt;&#13;</programlisting>
<para>Tip: Each device has exactly one timeout URI. For more information about zk.xml, refer to Appendix B in the Developer's Reference </para>
<para>In addition to zk.xml, you can change the redirect URI manually as follows.</para>
<programlisting>Devices.setTimeoutURI("ajax", "/timeout.zul");&#13;</programlisting>
<para>About Device: A device represents the client device. Each desktop is associated with one device, and vice versa.</para>
<para>If you prefer to reload the page instead of redirecting to other URI, you can specify an empty URI as follows.</para>
<programlisting>&lt;device-config&gt;&#13;    &lt;device-type&gt;ajax&lt;/device-type&gt;    &#13;    &lt;timeout-uri&gt;&lt;/timeout-uri&gt;    &#13;&lt;/device-config&gt;&#13;</programlisting></sect1><sect1><title>Error Handling</title>
<para>A ZK Web application can specify what to do when errors occur. An error is caused an exception that is not caught by the application.</para>
<para>An exception might be thrown in two kinds of situations: loading pages and updating pages<footnote>
<para>Refer to the Component Lifecycle for more details.</para>
</footnote>.</para><sect2><title>Error Handling When Loading Pages</title>
<para>If an un-caught exception is thrown when loading a ZUML page, it is handled directly by the Web server. In other words, its handling is no different from other pages, such as JSP.</para>
<para>By default, the Web server displays an error page showing the error message and stack trace.</para>
<para>
<graphic fileref="images/100000000000038700000181C7DBF256.png">2
			
		</graphic>You can customize the error handling by specifying the error page in WEB-INF/web.xml as follows. Refer to Java Servlet Specification for more details.</para>
<programlisting>&lt;!-- web.xml --&gt;&#13;&lt;error-page&gt;&#13;    &lt;exception-type&gt;java.lang.Throwable&lt;/exception-type&gt;    &#13;    &lt;location&gt;/WEB-INF/sys/error.zul&lt;/location&gt;    &#13;&lt;/error-page&gt;&#13;</programlisting>
<para>Then, when an error occurs in loading a page, the Web server forwards the error page you specified, /error/error.zul. Upon forwarding, the Web server passes a set of request attributes to the error page to describe what happens. These attributes are as follows.</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Request Attribute</para>
</entry>
<entry>
<para>Type</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>javax.servlet.error.status_code</para>
</entry>
<entry>
<para>java.lang.Integer</para>
</entry>
</row>
<row>
<entry>
<para>javax.servlet.error.exception_type</para>
</entry>
<entry>
<para>java.lang.Class</para>
</entry>
</row>
<row>
<entry>
<para>javax.servlet.error.message</para>
</entry>
<entry>
<para>java.lang.String</para>
</entry>
</row>
<row>
<entry>
<para>javax.servlet.error.exception</para>
</entry>
<entry>
<para>java.lang.Throwable</para>
</entry>
</row>
<row>
<entry>
<para>javax.servlet.error.request_uri</para>
</entry>
<entry>
<para>java.lang.String</para>
</entry>
</row>
<row>
<entry>
<para>javax.servlet.error.servlet_name</para>
</entry>
<entry>
<para>java.lang.String</para>
</entry>
</row></tbody></tgroup>
</informaltable>
<para>Then, in the error page, you can display your custom information by use of these attributes. For example,</para>
<programlisting>&lt;window title="Error ${requestScope['javax.servlet.error.status_code']}"&gt;&#13;    Cause: ${requestScope['javax.servlet.error.message']}    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Tip: The error page can be any kind of servlets. In addition to ZUL, you can use JSP or whatever you preferred.</para>
<para>Tip: After forwarded, the error page is displayed as the main page, so you don't need to specify the modal or overlapped mode for the main window, if any.</para><sect3><title>ZK Mobile Error Handling</title>
<para>Servlet 2.x (web.xml) doesn't have the concept of device types. Thus, you have to forward to correct page if you want to support the Ajax browser and mobile devices at the same server. Here is an example:</para>
<programlisting>//error.zul&#13;&lt;zk&gt;&#13;    &lt;zscript&gt;    &#13;    if (Executions.getCurrent().isMilDevice())    &#13;        Executions.forward("error.mil");        &#13;    &lt;/zscript&gt;    &#13;    &lt;window&gt;    &#13;    ....error message in ZUL    &#13;    &lt;/window&gt;    &#13;&lt;/zk&gt;&#13;</programlisting></sect3></sect2><sect2><title>Error Handing When Updating Pages</title>
<para>If an uncaught exception is thrown when updating a ZUML page (aka., when an event listener is executing), it is handled by the ZK Update Engine. By default, it simply asks the browser to show up an alert dialog to tell the user.</para>
<para>
<graphic fileref="images/10000000000002C10000011E30DFBEA1.png">2
			
		</graphic>You can customize the error handling by specifying the error page in WEB-INF/zk.xml as follows. Refer to Appendix B in the Developer's Reference.</para>
<programlisting>&lt;!-- zk.xml --&gt;&#13;&lt;error-page&gt;&#13;    &lt;exception-type&gt;java.lang.Throwable&lt;/exception-type&gt;    &#13;    &lt;location&gt;/WEB-INF/sys/error.zul&lt;/location&gt;    &#13;&lt;/error-page&gt;&#13;</programlisting>
<para>Then, when an error occurs in an event listener, the ZK Update Engine creates a dialog by use of the error page you specified, /error/error.zul.</para>
<para>Like error handling in loading a ZUML page, you can specify multiple &lt;error-page&gt; elements. Each of them is associated with a different exception type (the value of &lt;exception-type&gt; element). When an error occurs, ZK will search the error pages one-by-one until the exception type matches.</para>
<para>In addition, ZK passes a set of request attributes to the error page to describe what happens. These attribute are as follows.</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Request Attribute</para>
</entry>
<entry>
<para>Type</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>javax.servlet.error.exception_type</para>
</entry>
<entry>
<para>java.lang.Class</para>
</entry>
</row>
<row>
<entry>
<para>javax.servlet.error.message</para>
</entry>
<entry>
<para>java.lang.String</para>
</entry>
</row>
<row>
<entry>
<para>javax.servlet.error.exception</para>
</entry>
<entry>
<para>java.lang.Throwable</para>
</entry>
</row></tbody></tgroup>
</informaltable>
<para>For example, you can specify the following content as the error page.</para>
<programlisting>&lt;window title="Error ${requestScope['javax.servlet.error.status_code']}"&#13;width="400px" border="normal" mode="modal"&gt;&#13;    &lt;vbox&gt;    &#13;KillerApp encounters a fatal error, ${requestScope['javax.servlet.error.message']}. The error is recorded and we will look at it and fix it soon.&#13;        &lt;hbox style="margin-left:auto; margin-right:auto"&gt;        &#13;            &lt;button label="Continue" onClick="spaceOwner.detach()"/&gt;            &#13;            &lt;button label="Reload" onClick="Executions.sendRedirect(null)"/&gt;            &#13;        &lt;/hbox&gt;        &#13;    &lt;/vbox&gt;    &#13;    &lt;zscript&gt;    &#13;    org.zkoss.util.logging.Log.lookup("Fatal").log(    &#13;        requestScope.get("javax.servlet.error.exception"));        &#13;    &lt;/zscript&gt;    <inlinegraphic fileref="images/10000000000002B2000000ED94D31A2A.png" align="right"/>&#13;&lt;/window&gt;&#13;</programlisting>
<para>Tip: The error page is created at the same desktop that causes the error, so you can retrieve the relevant information from it.</para>
<para>Tip: Since 2.3.1, ZK won't make the root window as modal automatically, since some applications may prefer not to use modal windows at all. If you prefer to use modal windows, you can specify the modal mode as shown in the previous example.</para><sect3><title>ZK Mobile Error When Updating Pages</title>
<para>Each device type has its own set of error pages. To specify an error page for ZK mobile device (a mobile device supporting MIL), you have to specify the device-type element with mil as shown below.</para>
<programlisting>&lt;!-- zk.xml --&gt;&#13;&lt;error-page&gt;&#13;    &lt;device-type&gt;mil&lt;/device-type&gt;    &#13;    &lt;exception-type&gt;java.lang.Throwable&lt;/exception-type&gt;    &#13;    &lt;location&gt;/WEB-INF/sys/error.zul&lt;/location&gt;    &#13;&lt;/error-page&gt;&#13;</programlisting>
<para>Tip: If the device-type element is omitted, ajax is assumed. In other words, it specifies an error page for Ajax browsers.</para>
<para>&lt;device-type&gt;ajax&lt;/device-type&gt; &lt;!-- ajax is the default --&gt;</para></sect3></sect2></sect1><sect1><title>Miscellaneous</title><sect2><title>Configure the ZK Loader Not to Compress the Output</title>
<para>By default, the output of the ZK loader and filter is compressed, if the browser supports the content compression<footnote>
<para>Refer to 14.3 Accept-Encoding in http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html</para>
</footnote> (and the output is not included by other Servlets). By compressing the output, the transmission time over a slow Internet connection is reduced dramatically.</para>
<para>However, if you want to use a filter to post-process the output, the compression may not be applicable. In this case, you can disable it by specifying the compress parameter (init-param) to be true, when configuring the ZK loader in WEB-INF/web.xml as follows.</para>
<programlisting>&lt;servlet&gt;&#13;    &lt;servlet-name&gt;zkLoader&lt;/servlet-name&gt;    &#13;    &lt;servlet-class&gt;org.zkoss.zk.ui.http.DHtmlLayoutServlet&lt;/servlet-class&gt;    &#13;    &lt;init-param&gt;    &#13;        &lt;param-name&gt;update-uri&lt;/param-name&gt;        &#13;        &lt;param-value&gt;/zkau&lt;/param-value&gt;        &#13;    &lt;/init-param&gt;    &#13;    &lt;init-param&gt;    &#13;        &lt;param-name&gt;compress&lt;/param-name&gt;        &#13;        &lt;param-value&gt;false&lt;/param-value&gt;        &#13;    &lt;/init-param&gt;    &#13;&lt;/servlet&gt;&#13;</programlisting>
<para>Notice: you can configure multiple ZK loader in one Web application. Each of them with a different options.</para>
<programlisting>&lt;servlet&gt;&#13;    &lt;servlet-name&gt;zkLoader1&lt;/servlet-name&gt;    &#13;    &lt;servlet-class&gt;org.zkoss.zk.ui.http.DHtmlLayoutServlet&lt;/servlet-class&gt;    &#13;...&#13;&lt;/servlet&gt;&#13;&lt;servlet&gt;&#13;    &lt;servlet-name&gt;zkLoader2&lt;/servlet-name&gt;    &#13;    &lt;servlet-class&gt;org.zkoss.zk.ui.http.DHtmlLayoutServlet&lt;/servlet-class&gt;    &#13;...&#13;&lt;/servlet&gt;&#13;</programlisting>
<para>Similarly, you can configure the ZK filter (org.zkoss.zk.ui.http.DHtmlLayoutFilter) not to compress the output, too.</para>
<programlisting>&lt;filter&gt;&#13;    &lt;filter-name&gt;zkFilter&lt;/filter-name&gt;    &#13;    &lt;filter-class&gt;org.zkoss.zk.ui.http.DHtmlLayoutFilter&lt;/filter-class&gt;    &#13;    &lt;init-param&gt;    &#13;        &lt;param-name&gt;extension&lt;/param-name&gt;        &#13;        &lt;param-value&gt;html&lt;/param-value&gt;        &#13;    &lt;/init-param&gt;    &#13;</programlisting>
<para>&lt;init-param&gt;</para>
<para>&lt;param-name&gt;compress&lt;/param-name&gt;</para>
<para>&lt;param-value&gt;false&lt;/param-value&gt;</para>
<para>&lt;/init-param&gt;</para>
<programlisting>&lt;/filter&gt;&#13;</programlisting></sect2></sect1></chapter>
<chapter>
<title>12. Performance Tips</title>
<para>This chapter describes the tips to make your ZK application running faster.</para><sect1><title>Use Compiled Java Codes</title>
<para>It is convenient to use zscript in ZUML, but it comes with a price: slower performance. The degradation varies from one application from another. For large website, it is suggested not to use zscript if possible.</para><sect2><title>Use the deferred Attribute</title>
<para>If you still need to write zscript codes, you can specify the deferred attribute to defer the evaluation of zscript codes as follows.</para>
<programlisting>&lt;zscript deferred="true"&gt;&#13;...&#13;</programlisting>
<para>By specifying the deferred attribute, the zscript codes it contains will not be evaluated when ZK renders a pags. It means the interpreter won't be loaded when ZK renders a page. It saves memory and speeds up the page rendering.</para>
<para>In the following example, the interpreter is loaded only when the button is clicked:</para>
<programlisting>&lt;window id="w"&gt;&#13;    &lt;zscript deferred="true"&gt;    &#13;    void addMore() {    &#13;        new Label("More").setParent(w);        &#13;    }    &#13;    &lt;/zscript&gt;    &#13;    &lt;button label="Add" onClick="addMore()"/&gt;    &#13;&lt;/window&gt;&#13;</programlisting></sect2><sect2><title>The deferred Attribute and the onCreate Event</title>
<para>It is worth to notice that, if the onCreate event listener is written in zscript, the deferred option mentioned in the previous second becomes useless. It is because the onCreate event is sent when the page is loaded. In other words, all deferred zscript will be evaluated when the page is loaded if the onCreate event listener is written in zscript as shown below.</para>
<programlisting>&lt;window onCreate="init()"&gt;&#13;...&#13;</programlisting>
<para>Rather, it is better to rewrite it as</para>
<programlisting>&lt;window use="my.MyWindow"&gt;&#13;...&#13;</programlisting>
<para>Then, prepare MyWindow.java as shown below.</para>
<programlisting>package my;&#13;public class MyWindow extends Window {&#13;    public void onCreate() { //to process the onCreate event    &#13;...&#13;</programlisting>
<para>If you prefer to do the initialization right after the component (and all its children) is created, you can implement the org.zkoss.zk.ui.ext.AfterCompose interface as shown below. Note: the afterCompose method of the AfterCompose interface is evaluated at the Component Creation phase, while the onCreate event is evaluated in the Event Processing Phase.</para>
<programlisting>package my;&#13;public class MyWindow extends Window implements org.zkoss.zk.ui.ext.AfterCompose {&#13;    public void afterCompose() { //to initialize the window    &#13;...&#13;</programlisting></sect2><sect2><title>Use the forward Attribute</title>
<para>To simplify the event flow, ZK components usually send the events to the component itself, rather than the parent or other targets. For example, when an user clicks a button, the onClick event is sent to the button. Developers usually forward the event to the window by use of the onClick event listener as follows.</para>
<programlisting>&lt;window id="w"&gt;&#13;    &lt;button label="OK" onClick="w.onOK"/&gt;    &#13;</programlisting>
<para>As suggested in the previous sections, the performance can be improved by not using zscript at all. Thus, you can rewrite the above code snippet either with EventListener or by specifying the forward attribute as follows.</para>
<programlisting>&lt;window&gt;&#13;    &lt;button label="OK" forward="onOK"/&gt;    &#13;</programlisting></sect2></sect1><sect1><title>Use the Servlet Thread to Process Events</title>
<para>By default, ZK processes an event in an independent thread called the event processing thread. Thus, the developer can suspend and resume the execution at any time, without blocking the servlet thread from sending back the responses to the browser.</para>
<para>However, it consumes more memory, especially if there are a lot suspended threads, and it may cause some challenge to integrate with other systems that storing information at the Servlet thread's local storage.</para>
<para>ZK provides an option to let you disable the use of the event processing threads. In other words, you can force ZK to process events all in the Servlet threads like other conventional frameworks. Of course, you cannot suspend the execution if the Servlet thread is used.</para>
<para>To disable the use of the event processing threads, you have to specify the following content in WEB-INF/zk.xml.</para>
<programlisting>&lt;system-config&gt;&#13;    &lt;disable-event-thread/&gt;    &#13;&lt;/system-config&gt;&#13;</programlisting>
<para>Here is the advantages and limitations about using the Servlet thread to process events. In the following sections we will talk more about the limitations and workarounds when using the Servlet thread.</para>
<informaltable frame="all">
<tgroup cols="3">
<thead>
<row>
<entry>
<para/>
</entry>
<entry>
<para>Using Servlet Thread</para>
</entry>
<entry>
<para>Using Event Processing Thread</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>Integration</para>
</entry>
<entry>
<para>Less integration issues.</para>
<para>Many containers assume the HTTP request is handled in the servlet thread.</para>
</entry>
<entry>
<para>You may have to implement EventThreadInit and/or EventThreadCleanup to solve the integration issue.</para>
<para>ZK and the community keep providing versatile implementations to solve the integration issue.</para>
</entry>
</row>
<row>
<entry>
<para>SuspendResume</para>
</entry>
<entry>
<para>No way to suspend the execution of the event listener.</para>
<para>For example, you cannot create a modal window.</para>
</entry>
<entry>
<para>No limitation at all.</para>
</entry>
</row></tbody></tgroup>
</informaltable><sect2><title>Modal Windows</title>
<para>You can not use the modal window anymore. You can create the same visual effect with the highlighted mode. However, at the server side, it works just like the overlapped mode â it returns immediately without waiting for user's response.</para>
<programlisting>win.doHighlighted(); //returns once the mode is changed; not suspended&#13;</programlisting></sect2><sect2><title>Message Boxes</title>
<para>The message boxes returns immediately so it always returns Messagebox.OK. Thus, it is meaningless to show buttons other than the OK button. For example, the if clause in the following example is never true.</para>
<programlisting>if (Messagebox.show("Delete?", "Prompt", Messagebox.YES|Messagebox.NO,&#13;</programlisting>
<para>Messagebox.QUESTION) == Messagebox.YES) {</para>
<programlisting>this_never_executes();&#13;}&#13;</programlisting>
<para>Rather, you have to provide an event listener as follows.</para>
<programlisting>Messagebox.show("Delete?", "Prompt", Messagebox.YES|Messagebox.NO,&#13;</programlisting>
<para>Messagebox.QUESTION,</para>
<para>new EventListener() {</para>
<para>public void onEvent(Event evt) {</para>
<para>switch (((Integer)evt.getData()).intValue()) {</para>
<para>case Messagebox.YES: doYes(); break; //the Yes button is pressed</para>
<para>case Messagebox.NO: doNo(); break; //the No button is pressed</para>
<para>}</para>
<para>}}</para>
<para>);</para>
<para>The event listener you provided is invoked when the user clicks one of the buttons. Then, you can identify which button is clicked by examining the data (Event's getData). The data is an integer whose value is the button's identifier, such as Messagebox.YES.</para>
<para>Alternatively, you can examine the event name:</para>
<para>public void onEvent(Event evt) {</para>
<para>if ("onYes".equals(evt.getName())) {</para>
<para>doYes(); //the Yes button is pressed</para>
<para>} else if ("onNo".equals(evt.getName())) {</para>
<para>doNo(); //the No button is pressed</para>
<para>}</para>
<para>}</para>
<para>Note: The event name for the OK button is onOK, not onOk.</para></sect2><sect2><title>File Upload</title>
<para>The file upload dialog is no longer applicable. Rather, you shall use the fileupload component instead. The fileupload component is not a modal dialog. Rather, it is placed inline with other components. Refer to the fileupload Component section for more information.</para>
<programlisting>&lt;fileupload onUpload="handle(event)"/&gt;&#13;</programlisting></sect2></sect1><sect1><title>Use the Native Namespace instead of the XHTML Namespace</title>
<para>As described in the Work with HTML Tags section of the ZUML with the XUL Component Set chapter, ZK creates a ZK component for each XML element specified with the XHTML namespace. In other words, ZK has to maintain their states at the server. Since the number of HTML tags are usually large, the performance will be improved dramatically if you use the Native namespace instead.</para>
<para>For example, the following code snippet creates five components (one table, tr, textbox and two td).</para>
<programlisting>&lt;h:table xmlns:h="http://www.w3.org/1999/xhtml"&gt;&#13;    &lt;h:tr&gt;    &#13;        &lt;h:td&gt;Name&lt;/h:td&gt;        &#13;        &lt;h:td&gt;        &#13;        &lt;textbox/&gt;        &#13;        &lt;/h:td&gt;        &#13;    &lt;/h:tr&gt;    &#13;&lt;/h:table&gt;&#13;</programlisting>
<para>On the other hand, the following code snippet creates two components (one special component to generate table, tr and td to the client, and one textbox).</para>
<programlisting>&lt;n:table xmlns:n="http://www.zkoss.org/2005/zk/native"&gt;&#13;    &lt;n:tr&gt;    &#13;        &lt;n:td&gt;Name&lt;/n:td&gt;        &#13;        &lt;n:td&gt;        &#13;        &lt;textbox/&gt;        &#13;        &lt;/n:td&gt;        &#13;    &lt;/n:tr&gt;    &#13;&lt;/n:table&gt;&#13;</programlisting>
<para>Notice that table, tr and td are generated directly to the client, so they don't have no counterpart at the client. Thus, you can not change it dynamically. For example, the following code snippet is incorrect.</para>
<programlisting>&lt;n:ul id="x" xmlns:n="http://www.zkoss.org/2005/zk/native"/&gt;&#13;&lt;button label="add" onClick="new Li().setParent(x)"/&gt;&#13;</programlisting>
<para>Rather, you have to use the html component or the XHTML namespace, if you want to change dynamically.</para></sect1><sect1><title>Prolong the Period to Check Whether a File Is Modified</title>
<para>ZK caches the parsed result of a ZUML page and re-compiles it only if it is modified. In a production system, ZUML pages are rarely modified so you can prolong the period to check whether a page is modified by specifying file-check-period in WEB-INF/zk.xml as shown below. By default, it is 5 seconds.</para>
<programlisting>&lt;desktop-config&gt;&#13;    &lt;file-check-period&gt;600&lt;/file-check-period&gt;&lt;!-- unit: seconds --&gt;    &#13;&lt;/desktop-config&gt;&#13;</programlisting></sect1><sect1><title>Defer the Creation of Child Components</title>
<para>For sophisticated pages, the performance can be improved if we defer the creation of child components until they are becoming visible. The simplest way to do it is by use of the fulfill attribute. In the following example, the children of the second tab panel are created only if it becomes visible. Refer to the Load on Demand section in the ZK User Interface Markup Language chapter.</para>
<programlisting>&lt;tabbox&gt;&#13;    &lt;tabs&gt;    &#13;        &lt;tab label="Preload" selected="true"/&gt;        &#13;        &lt;tab id="tab2" label="OnDemand"/&gt;        &#13;    &lt;/tabs&gt;    &#13;    &lt;tabpanels&gt;    &#13;        &lt;tabpanel&gt;        &#13;    This panel is pre-loaded since no fulfill specified    &#13;        &lt;/tabpanel&gt;        &#13;        &lt;tabpanel fulfill="tab2.onSelect"&gt;        &#13;    This panel is loaded only tab2 receives the onSelect event    &#13;        &lt;/tabpanel&gt;        &#13;    &lt;/tabpanels&gt;    &#13;&lt;/tabbox&gt;&#13;</programlisting></sect1><sect1><title>Use Live Data and Paging for Large List Boxes</title>
<para>Sending out a list box with a lot of items to the client is expensive. In addition, the JavaScript engine of the browser is not good for initializing a list box with a lot of items. A better solution is to use the live data, i.e., by assigning a list model to it. Then, the list items are sent to the client only if they become visible.</para>
<para>The performance will be improved more if you also use the paging mold.</para>
<para>Refer to the List Boxes section in the ZUML with the XUL Component Set chapter for more details.</para></sect1><sect1><title>Use ZK JSP Tags or ZK JSF Components instead of ZK Filter</title>
<para>The ZK filter actually maps each HTML tag to the corresponding XHTML components. As described in the previous section, it consumes more memory than necessary since ZK has to maintain the states of all ZK components (including XUL and XHTML components).</para>
<para>ZK JSP tags are introduced to eliminate the need of the ZK filter for JSP pages. With ZK JSP tags, a ZUL component is created for each ZK JSP tag. All other HTML tags are encapsulated as a special component.</para>
<programlisting>&lt;!-- a JSP page --&gt;&#13;&lt;z:page&gt;&#13;    &lt;table&gt;    &#13;        &lt;tr&gt;        &#13;            &lt;td&gt;Name&lt;/td&gt;            &#13;            &lt;td&gt;&lt;z:textbox/&gt;&lt;/td&gt;            &#13;        &lt;/tr&gt;        &#13;    &lt;/table&gt;    &#13;&lt;/z:page&gt;&#13;</programlisting>
<para>is equivalent to the following code snippet, if a ZUL page is used,</para>
<programlisting>&lt;!-- a ZUL page --&gt;&#13;&lt;n:table xmlns:n="http://www.zkoss.org/2005/zk/native"&gt;&#13;    &lt;n:tr&gt;    &#13;        &lt;n:td&gt;Name&lt;/n:td&gt;        &#13;            &lt;n:td&gt;&lt;textbox/&gt;&lt;/n:td&gt;            &#13;    &lt;/n:tr&gt;    &#13;&lt;/n:table&gt;&#13;</programlisting></sect1></chapter>
<chapter>
<title>13. Other Devices and Output Formats</title>
<para>In addition to Ajax browsers, mobile devices and XML output are also supported by ZK. This chapter describes them briefly. For detailed information, you have to reference the corresponding documents.</para><sect1><title>ZK Mobile</title>
<para>The ZK Mobile Computing is the ZK extension that enables reach of ZK applications to mobile devices with little programming. </para>
<para>The ZK Mobile Computing is composed of two parts. In the mobile device side it is the ZK Mobile, a JavaMe Midlet thin client, that interacts with the ZK server and works as the client side user interface. In the server side it is a set of MIL (Mobile Interactive Language) components that you can control and manipulate when end users trigger actions from the mobile device. </para>
<para>It is straightforward to develop ZK Mobile applications. Just download the ZK Mobile release and follow the ZK Mobile Quick Start Guide and you are ready to go.</para><sect2><title>The Mobile Component Set, <ulink url="http://www.zkoss.org/2007/mil">http://www.zkoss.org/2007/mil</ulink>
</title>
<ulink url="http://www.zkoss.org/2007/mil">http://www.zkoss.org/2007/mil</ulink>
<para>
<graphic fileref="images/10000000000000FC0000015034C5AED2.png">2
			
		</graphic>You can write your ZK Mobile applications the same way as you have done with ZUL and ZHTML components. Only that this time you have to use the MIL components instead. Following is the classic Hello World example (hello.mil).</para>
<programlisting>&lt;frame title="My First Window" visible="true"&gt;&#13;Hello World!&#13;&lt;/frame&gt;&#13;</programlisting>
<para>This is almost the same as the ZUL "Hello World" example. The &lt;frame&gt; tag indicates the frame of the mobile display and the "Hello World!" is the text inside the frame. </para>
<para>You can apply all your programming experiences with ZUL components on MIL components without problem. The only difference is that the former (ZUL components) is designed for showing on web Ajax browser while the latter (MIL components) is for showing on the ZK Mobile client. You can still use the ZK template attributes such as if, unless, forEach, each, etc. You can use multiple script languages in &lt;zscript&gt; tag. You can use EL expression and the annotated data binding. You can also choose coding with ZUML page or pure Java Richlet way. </para>
<para>In general, you will probably not just write a "pure" ZK Mobile application. Rather you might write an application with both a desktop web browser view and a mobile device view. It is quite natural to write different view for different client while all views can still share the same backend business logic and database models. </para></sect2></sect1><sect1><title>XML Output</title>
<para>Nowadays XML have become the standard format of many devices and protocols, such as RSS and SVG. It is straightforward to output XML with ZK.</para><sect2><title>Three Steps to Generate XML Output with a ZUML Page</title>
<orderedlist>
<listitem>
<para>Uses the XML component set (<ulink url="http://www.zkoss.org/2007/xml">http://www.zkoss.org/2007/xml</ulink>).</para>
</listitem>
<listitem>
<para>Maps the file extension to ZK Loader</para>
</listitem>
<listitem>
<para>Maps the file extension to the XML component set</para>
</listitem>
</orderedlist><sect3><title>Use the XML Component Set, http://www.zkoss.org/2007/xml</title>
<para>The XML component set (aka., the XML language, in ZK terminology) is used to generate XML output. Unlike the XUL or XHTML component sets, all unknown<footnote>
<para>By the unknown tag we mean a tag that is not associated with a namespace, or the namespace is unknown.</para>
</footnote> tags in a ZUML page are assumed to belong the Native namespace (http://www.zkoss.org/2005/native) rather than throwing an exception. ZK generates them directly to the output without instantiating a ZK component for each of them.</para>
<para>The following is an example that generates the SVG output. It looks very similar to the XML output you want to generate, except you can use zscript, EL expressions, macro components and other ZK features.</para>
<para/>
<programlisting>&lt;?page contentType="image/svg+xml;charset=UTF-8"?&gt;<inlinegraphic fileref="images/100000000000004F00000049ABC5A9E2.png" align="right"/>&#13;&#13;&lt;svg width="100%" height="100%" version="1.1" xmlns="http://www.w3.org/2000/svg"&#13;xmlns:z="http://www.zkoss.org/2005/zk"&gt;&#13;    &lt;z:zscript&gt;&lt;![CDATA[    &#13;    String[] bgnds = {"purple", "blue", "yellow"};    &#13;    int[] rads = {30, 25, 20};    &#13;    ]]&gt;&lt;/z:zscript&gt;    &#13;    &lt;circle style="fill:${each}" z:forEach="${bgnds}"    &#13;        cx="${50+rads[forEachStatus.index]}"        &#13;        cy="${20+rads[forEachStatus.index]}"        &#13;        r="${rads[forEachStatus.index]}"/&gt;        &#13;&lt;/svg&gt; &#13;</programlisting>
<para>The generated output will be</para>
<programlisting>&lt;svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" version="1.1"&gt;&#13;&lt;circle style="fill:purple" cx="80" cy="50" r="30"&gt;&#13;&lt;/circle&gt;&#13;&lt;circle style="fill:blue" cx="75" cy="45" r="25"&gt;&#13;&lt;/circle&gt;&#13;&lt;circle style="fill:yellow" cx="70" cy="40" r="20"&gt;&#13;&lt;/circle&gt;&#13;&lt;/svg&gt;&#13;</programlisting>
<para>where</para>
<itemizedlist>
<listitem>
<para>The content type is specified with the page directive. For SVG, it is image/svg+xml. The xml processing instruction (&lt;?xml?&gt;) and DOCTYPE of the output are also specified in the page directive. Refer to the Developer's Reference for more about the page directive.</para>
</listitem>
<listitem>
<para>All tags in this example, such as svg and circle, are associated with a namespace (http://www.w3.org/2000/svg) that is unknown to ZK Loader. Thus, they are assumed to belong the Native namespace. They are output directly rather than instantiating a ZK component for each of them. Refer to the Native Namespace section int the ZUML with the XUL Component Set chapter for more about the Native namespace.</para>
</listitem>
<listitem>
<para>To use zscript, forEach and other ZK specific features, you have to specify the ZK namespace (<ulink url="http://www.zkoss.org/2005/zk">http://www.zkoss.org/2005/zk</ulink>).</para>
</listitem>
</itemizedlist></sect3><sect3><title>Maps the File Extension to ZK Loader</title>
<para>To let ZK Loader process the file, you have to associate it with the ZK Loader in WEB-INF/web.xml. In this example, we map all files with the .svg extension to ZK Loader<footnote>
<para>We assume ZK Loader (zkLoader) is mapped to org.zkoss.zk.ui.http.DHtmlLayoutServlet.</para>
</footnote>:</para>
<programlisting>&lt;servlet-mapping&gt;&#13;    &lt;servlet-name&gt;zkLoader&lt;/servlet-name&gt;    &#13;    &lt;url-pattern&gt;*.svg&lt;/url-pattern&gt;    &#13;&lt;/servlet-mapping&gt;&#13;</programlisting></sect3><sect3><title>Maps the File Extension to the XML Component Set</title>
<para>Unless the file extension is .xml, you have to associate it with the XML component set (aka., the XML language) explicitly in WEB-INF/zk.xml. In this example, we map .svg to the XML component set:</para>
<programlisting>&lt;language-mapping&gt;&#13;    &lt;language-name&gt;xml&lt;/language-name&gt;    &#13;    &lt;extension&gt;svg&lt;/extension&gt;    &#13;&lt;/language-mapping&gt;&#13;</programlisting>
<para>where xml is the language name of the XML component set (<ulink url="http://www.zkoss.org/2007/xml">http://www.zkoss.org/2007/xml</ulink>). Thus, when ZK Loader parses a file with the .svg extension, it knows the default language is the XML component set.</para></sect3></sect2><sect2><title>The XML Component Set</title>
<para>In addition to generating XML tags directly to the output, the XML component set provides a few components to simplify sophisticated tasks, such as XSLT.</para><sect3><title>The XML Transformer</title>
<para>To translate a XML document to another, you can use the transformer component as follows.</para>
<programlisting>&lt;?page contentType="text/html;charset=UTF-8"?&gt;&#13;&lt;x:transformer xsl="book.xsl" xmlns:x="http://www.zkoss.org/2007/xml"&gt;&#13;    &lt;book&gt;    &#13;        &lt;title&gt;ZK - Ajax without the JavaScript Framework&lt;/title&gt;        &#13;        &lt;for-who&gt;Web application designers and programmers who wish to implement rich Ajax web applications in the simplest way.&lt;/for-who&gt;        &#13;        &lt;author&gt;Henri Chen and Robbie Cheng&lt;/author&gt;        &#13;    &lt;/book&gt;    &#13;&lt;/x:transformer&gt;&#13;</programlisting>
<para>where transformer is a component of the XML component set, so we have to specify the namespace. Otherwise, the Native namespace is assumed.</para>
<para>Then, let us assume the content of book.xsl is as follows.</para>
<programlisting>&lt;xsl:stylesheet version="1.0"&#13;xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;&#13;    &lt;xsl:template match="/"&gt;    &#13;        &lt;html&gt;        &#13;            &lt;head&gt;            &#13;                &lt;title&gt;Book Info&lt;/title&gt;                &#13;            &lt;/head&gt;            &#13;            &lt;body&gt;            &#13;                &lt;h1&gt;Book Info&lt;/h1&gt;                &#13;                &lt;xsl:apply-templates select="book"/&gt;                &#13;            &lt;/body&gt;            &#13;        &lt;/html&gt;        &#13;    &lt;/xsl:template&gt;    &#13;    &lt;xsl:template match="book"&gt;    &#13;        &lt;dl&gt;        &#13;            &lt;dt&gt;Title:&lt;/dt&gt;            &#13;            &lt;dd&gt;&lt;xsl:value-of select="title"/&gt;&lt;/dd&gt;            &#13;            &lt;dt&gt;Who is this book for:&lt;/dt&gt;            &#13;            &lt;dd&gt;&lt;xsl:value-of select="for-who"/&gt;&lt;/dd&gt;            &#13;            &lt;dt&gt;Authors&lt;/dt&gt;            &#13;            &lt;dd&gt;&lt;xsl:value-of select="author"/&gt;&lt;/dd&gt;            &#13;        &lt;/dl&gt;        &#13;    &lt;/xsl:template&gt;    &#13;&lt;/xsl:stylesheet&gt;&#13;</programlisting>
<para>Then, the generated XML output will be XHTML as follows.</para>
<programlisting>&lt;html&gt;&#13;&lt;head&gt;&#13;&lt;META http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;&#13;&lt;title&gt;Book Info&lt;/title&gt;&#13;&lt;/head&gt;&#13;&lt;body&gt;&#13;&lt;h1&gt;Book Info&lt;/h1&gt;&#13;&lt;dl&gt;&#13;&#13;&lt;dt&gt;Title:&lt;/dt&gt;&#13;&lt;dd&gt;&#13;ZK - Ajax without the JavaScript Framework&lt;/dd&gt;&#13;&lt;dt&gt;Who is this book for:&lt;/dt&gt;&#13;&lt;dd&gt;&#13;Web application designers and programmers who wish to implement rich Ajax web applications in the simplest way.&lt;/dd&gt;&#13;&lt;dt&gt;Authors&lt;/dt&gt;&#13;&lt;dd&gt;&#13;Henri Chen and Robbie Cheng&lt;/dd&gt;&#13;&lt;/dl&gt;&#13;&lt;/body&gt;&#13;&lt;/html&gt;&#13;</programlisting>
<para/></sect3></sect2></sect1></chapter>
<chapter>
<title>14. Internationalization</title>
<para>This chapter describes how to make ZK applications flexible enough to run in any locale.</para>
<para>First of all, ZK enables developers to embed Java codes and EL expressions any way you like. You could use any Internationalization method you want, such as java.util.ResourceBundle.</para>
<para>However, ZK has some built-in support of internationalization that you might find them useful.</para><sect1><title>Locale</title>
<para>The locale used to process requests and events is, by default, determined by the browser's preferences (by use of the getLocale method of javax.servlet.ServletRequest).</para>
<para>However, it is configurable. For example, you might want to use the same Locale for all users no matter how the browser is configured. Another example is that you might want to use the preferred locale that a user specified in his or her profile, if you maintain the user profiles in the server.</para><sect2><title>The px_preferred_locale Session Attribute</title>
<para>Before checking the browser's preferences, ZK will check if a session attribute called px_preferred_locale is defined. If defined, ZK uses it as the default locale for the session instead of the browser's preferences. Thus, you can control the locale of a session by storing the preferred locale in this attribute.</para>
<para>For example, you can do this when a user logins.</para>
<programlisting>void login(String username, String password) {&#13;    //check password    &#13;    ...    &#13;    Locale preferredLocale = ...; //decide the locale (from, say, database)    &#13;    session.setAttribute("px_preferred_locale", preferredLocale);    &#13;    ...    &#13;}&#13;</programlisting>
<para>Tip: To avoid typo, you can use the constant called PREFERRED_LOCALE defined in the org.zkoss.web.Attributes class.</para></sect2><sect2><title>The Request Interceptor</title>
<para>Deciding the locale after the user logins may be a bit late for some applications. For example, you might want to use the same Locale that was used in the previous session, before the user logins. For a Web application, it is usually done by use of cookies. With ZK, you can register a request interceptor and manipulates the cookies when the interceptor is called.</para>
<para>A request interceptor is used to intercept each request processed by ZK Loader and ZK Update Engine. It must implements the org.zkoss.zk.ui.util.RequestInterceptor interface. For example,</para>
<programlisting>public class MyLocaleProvider implements org.zkoss.zk.ui.util.RequestInterceptor {&#13;    public void request(org.zkoss.zk.ui.Session sess,    &#13;    Object request, Object response) {    &#13;        final Cookie[] cookies = ((HttpServletRequest)request).getCookies();        &#13;        if (cookies != null) {        &#13;            for (int j = cookies.length; --j &gt;= 0;) {            &#13;                if (cookies[j].getName().equals("my.locale")) {                &#13;                    //determine the locale                    &#13;                    String val = cookies[j].getValue();                    &#13;                    Locale locale = org.zkoss.util.Locales.getLocale(val);                    &#13;                    sess.setAttribute(Attributes.PREFERRED_LOCALE, locale);                    &#13;                    return;                    &#13;                }                &#13;            }            &#13;        }        &#13;    }    &#13;}&#13;</programlisting>
<para>To make it effective, you have to register it in WEB-INF/zk.xml as follows. Once registered, the request method is called each time ZK Loader or ZK Update Engine receives a request. Refer to Appendix B in the Developer's Reference for more information about configuration.</para>
<programlisting>&lt;listener&gt;&#13;    &lt;listener-class&gt;MyLocaleProvider&lt;/listener-class&gt;    &#13;&lt;/listener&gt;&#13;</programlisting>
<para>Note: An instance of the interceptor is instantiated when it is registered. It is then shared among all requests in the same application. Thus, you have to make sure it can be accessed concurrently (i.e., thread-safe).</para>
<para>Note: The request method is called at very early stage, before the request parameters are parsed. Thus, it is recommended to access them in this method, unless you configured the locale and character encoding properly for the request.</para></sect2></sect1><sect1><title>Time Zone</title>
<para>The time zone used to process requests and events is, by default, determined by the JVM's preferences (by use of the getDefault method of java.util.TimeZone).</para>
<para>Note: Unlike locale, there is no standard way to determine the time zone for each browser.</para>
<para>Like Locale, the time zone for a given session is configurable. For example, you might want to use the preferred time zone that a user specified in his or her profile, if you maintain user profiles in the server.</para><sect2><title>The px_preferred_time_zone Session Attribute</title>
<para>ZK will check if a session attribute called px_preferred_time_zone is defined. If defined, it uses as the default time zone for the session instead of the system default. Thus, you can control the time zone of a session by storing the preferred locale in this attribute, after, say, a user logins as depicted in the previous section.</para>
<para>Tip: To avoid typo, you can use the constant called PREFERRED_TIME_ZONE defined in the org.zkoss.web.Attributes class.</para></sect2><sect2><title>The Request Interceptor</title>
<para>Like Locale, you can prepare the time zone for the given session with the px_preferred_time_zone attribute by use of the request interceptor.</para></sect2></sect1><sect1><title>Labels</title>
<para>Developers could separate Locale-dependent data from the ZUML pages (and JSP pages) by storing them in i3-label_lang_CNTY.properties under the WEB-INF directory, where lang is the language such as en and fr, and CNTY is the country, such as US and FR.</para>
<para>To get a Locale-dependent property, you could use org.zkoss.util.resource.Labels in Java, or ${c:l('key')} in EL expression. To use it in EL, you have to specify the TLD file with the taglib directive in your page as follows.</para>
<programlisting>&lt;?taglib uri="http://www.zkoss.org/dsp/web/core" prefix="c"?&gt;&#13;&#13;&lt;window title="${c:l('app.title')}"&gt;&#13;...&#13;&lt;/window&gt;&#13;</programlisting>
<para>When a Locale-dependent label is about to retrieved, one of i3-label_lang_CNTY.properties will be loaded. For example, if the Locale is de_DE, then WEB-INF/i3-label_de_DE.properties will be loaded. If no such file, ZK will try to load WEB-INF/i3-label_de.properties and WEB-INF/i3-label.properties in turn.</para>
<para>To access labels in Java codes (including zscript), use the getLabel method of the org.zkoss.util.resource.Labels class.</para>
<para>In addition, you could extend the label loader to load labels from other locations, say database, by registering a locator, which must implement the org.zkoss.util.resource.LabelLocator interface. Then, invoke the register method of the org.zkoss.util.resource.Labels class.</para></sect1><sect1><title>Locale-Dependent Files</title><sect2><title>Browser and Locale-Dependent URI</title>
<para>Many resources depend on the Locale and, sometimes, the browser that a user is used to visit the Web page. For example, you need to use a larger font for Chinese characters to have better readability.</para>
<para>ZK can handle this for you automatically, if you specify the URL of the style sheet with "*". The algorithm is as follows.</para>
<orderedlist>
<listitem>
<para>If there is one "*" is specified in an URI such as /my*.css, then "*" will be replaced with a proper Locale depending on the preferences of user's browser.For example, user's preferences is de_DE, then ZK searches /my_de_DE.css, /my_de.css, and /my.css one-by-one from your Web site, until any of them is found. If none of them is found, /my.css is still used.</para>
</listitem>
<listitem>
<para>If two or more "*" are specified in an URI such as "/my*/lang*.css", then the first "*" will be replaced with "ie" for Internet Explorer, "saf" for Safari, and "moz" for other browsers<footnote>
<para>In the future editions, we will use different codes for browsers other than Internet Explorer, Firefox and Safari.</para>
</footnote>. Moreover, the last asterisk will be replaced with a proper Locale as described in the above step.In summary, the last asterisk represents the Locale, while the first asterisk represents the browser type. </para>
</listitem>
<listitem>
<para>All other "*" are ignored.</para>
</listitem>
</orderedlist>
<para>Note: The lat asterisk that represents the Locale must be placed right before the first dot ("."), or at the end if no dot at all. Furthermore, no following slash (/) is allowed, i.e., it must be part of the filename, rather than a directory. If the last asterisk doesn't fulfill this constraint, it will be eliminated (not ignored).</para>
<para>For example, "/my/lang.css*" is equivalent to "/my/lang.css".</para>
<para>In other words, you can consider it as neutral to the Locale.</para>
<para>Tip: We can apply this rule to specify an URI depending on the browser type, but not depending on the Locale. For example, "/my/lang*.css*" will be replaced with "/my/langie.css" if Internet Explorer is the current user's browser.</para>
<para/>
<para>In the following examples, we assume the preferred Locale is de_DE and the browser is Internet Explorer.</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>URI</para>
</entry>
<entry>
<para>Resources that are searched</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>/css/norm*.css</para>
</entry>
<entry>
<orderedlist>
<listitem>
<para>/norm_de_DE.css</para>
</listitem>
<listitem>
<para>/norm_de.css</para>
</listitem>
<listitem>
<para>/norm.css</para>
</listitem>
</orderedlist>
</entry>
</row>
<row>
<entry>
<para>/css-*/norm*.css</para>
</entry>
<entry>
<orderedlist>
<listitem>
<para>/css-ie/norm_de_DE.css</para>
</listitem>
<listitem>
<para>/css-ie/norm_de.css</para>
</listitem>
<listitem>
<para>/css-ie/norm.css</para>
</listitem>
</orderedlist>
</entry>
</row>
<row>
<entry>
<para>/img*/pic*/lang*.png</para>
</entry>
<entry>
<orderedlist>
<listitem>
<para>/imgie/pic*/lang_de_DE.png</para>
</listitem>
<listitem>
<para>/imgie/pic*/lang_de.png</para>
</listitem>
<listitem>
<para>/imgie/pic*/lang.png</para>
</listitem>
</orderedlist>
</entry>
</row>
<row>
<entry>
<para>/img*/lang.gif</para>
</entry>
<entry>
<orderedlist>
<listitem>
<para>/img/lang.gif</para>
</listitem>
</orderedlist>
</entry>
</row>
<row>
<entry>
<para>/img/lang*.gif*</para>
</entry>
<entry>
<orderedlist>
<listitem>
<para>/img/langie.gif</para>
</listitem>
</orderedlist>
</entry>
</row>
<row>
<entry>
<para>/img*/lang*.gif*</para>
</entry>
<entry>
<orderedlist>
<listitem>
<para>/imgie/lang*.gif</para>
</listitem>
</orderedlist>
</entry>
</row></tbody></tgroup>
</informaltable></sect2><sect2><title>Locating Browser and Locale Dependent Resources in Java</title>
<para>In additions to component attributes and ZUML attributes, you could handle browser and Locale dependent resource programmingly in Java. Here are a list of methods that you could use.</para>
<itemizedlist>
<listitem>
<para>The encodeURL, forward, and include methods in org.zkoss.zk.ui.Exection for encoding URL, forwarding to another page and including a page. In most cases, these methods are all you need.</para>
</listitem>
<listitem>
<para>The locate, forward, and include method in org.zkoss.web.servlet.Servlets for locating Web resouces. You rarely need them when developing ZK applications, but useful for writing a servlet, portlet or filter.</para>
</listitem>
<listitem>
<para>The encodeURL method in org.zkoss.web.servlet.http.Encodes for encoding URL. You rarely need them when developing ZK applications, but useful for writing a servlet, portlet or filter.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem>
<para>The locate method in org.zkoss.util.resource.Locators for locating class resources.</para>
</listitem>
</itemizedlist></sect2></sect1><sect1><title>Messages</title>
<para>Messages are stored in properties files which are located at the /metainfo/mesg directory of the classpath. Each module is associated with an unique name. In addition, the Locale is appended to the property file, too. For example, the message file of zk.jar for Germany messages is msgzk_de_DN.properties or msgzk_de.properties. Currently, zk.jar is only shipped with English and Chinese versions. You could add your own property files for different Locales by placing them at the /metainfo/mesg directory of the classpath.</para></sect1><sect1><title>Themes</title>
<para>The XUL component set provides several sets of style sheet files for each browser type: smaller, larger and normal. By default, the normal set is used. You can configure WEB-INF/zk.xml to choose a different theme.</para><sect2><title>Change Font Size and/or Family</title>
<para>There are two ways to change font size and family: use the library properties and use the built-in CSS files.</para><sect3><title>Use the Library Properties</title>
<para>The built-in them uses the following variables to control the font sizes.</para>
<informaltable frame="all">
<tgroup cols="3">
<thead>
<row>
<entry>
<para>Name</para>
</entry>
<entry>
<para>Default</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>org.zkoss.zul.theme.fontSizeM</para>
</entry>
<entry>
<para>12px</para>
</entry>
<entry>
<para>The default font size. It is used in the most components.</para>
</entry>
</row>
<row>
<entry>
<para>org.zkoss.zul.theme.fontSizeS</para>
</entry>
<entry>
<para>11px</para>
</entry>
<entry>
<para>The smaller font size used in the component that requires small fonts, such as toolbar.</para>
</entry>
</row>
<row>
<entry>
<para>org.zkoss.zul.theme.fontSizeXS</para>
</entry>
<entry>
<para>10px</para>
</entry>
<entry>
<para>The extremely small font size; rarely used.</para>
</entry>
</row>
<row>
<entry>
<para>org.zkoss.zul.theme.fontSizeMS</para>
</entry>
<entry>
<para>11px</para>
</entry>
<entry>
<para>The font size used in the menu items.</para>
</entry>
</row></tbody></tgroup>
</informaltable>
<para>To change the default value, you can specify the library properties in WEB-INF/zk.xml as follows.</para>
<programlisting>                                    &lt;library-property&gt;&lt;name&gt;org.zkoss.zul.theme.fontSizeM&lt;/name&gt;&lt;value&gt;12px&lt;/value&gt;&lt;/library-property&gt;&lt;library-property&gt;&lt;name&gt;org.zkoss.zul.theme.fontSizeS&lt;/name&gt;&lt;value&gt;10px&lt;/value&gt;&lt;/library-property&gt;&lt;library-property&gt;&lt;name&gt;org.zkoss.zul.theme.fontSizeXS&lt;/name&gt;&lt;value&gt;9px&lt;/value&gt;&lt;/library-property&gt;                                    &#13;</programlisting>
<para>The following built-in variables controls the font family is as follows.</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Name</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>org.zkoss.zul.theme.fontSizeT</para>
</entry>
<entry>
<para>Default: Verdana, Tahoma, Arial, Helvetica, sans-serif</para>
<para>The font family used for titles and captions.</para>
</entry>
</row>
<row>
<entry>
<para>org.zkoss.zul.theme.fontSizeC</para>
</entry>
<entry>
<para>Default: Verdana, Tahoma, Arial, serif</para>
<para>The font family used for conntents.</para>
</entry>
</row></tbody></tgroup>
</informaltable></sect3><sect3><title>Use the Built-in Theme with Smaller Fonts</title>
<para>The theme with smaller fonts is called normsm*.css.dsp. You can configure WEB-INF/zk.xml to use it as follows.</para>
<programlisting>        &lt;desktop-config&gt;&lt;disable-theme-uri&gt;~./zul/css/norm*.css.dsp*&lt;/disable-theme-uri&gt;&lt;theme-uri&gt;~./zul/css/normsm*.css.dsp*&lt;/theme-uri&gt;&lt;/desktop-config&gt;        &#13;</programlisting>
<para>Refer to the Developer's Reference for more about how to configure with WEB-INF/zk.xml.</para></sect3><sect3><title>Use the Built-in Theme with Larger Fonts</title>
<para>The theme with smaller fonts is called normlg*.css.dsp. You can configure WEB-INF/zk.xml to use it as follows.</para>
<programlisting>        &lt;desktop-config&gt;&lt;disable-theme-uri&gt;~./zul/css/norm*.css.dsp*&lt;/disable-theme-uri&gt;&lt;theme-uri&gt;~./zul/css/normlg*.css.dsp*&lt;/theme-uri&gt;&lt;/desktop-config&gt;        &#13;</programlisting></sect3><sect3><title>Use the Theme that Depends on Locale</title>
<para>It is common to use the larger font only for Chinese locales. You can configure WEB-INF/zk.xml to use it as follows.</para>
<programlisting>        &lt;desktop-config&gt;&lt;disable-theme-uri&gt;~./zul/css/norm*.css.dsp*&lt;/disable-theme-uri&gt;&lt;theme-uri&gt;~./zul/css/norm**.css.dsp&lt;/theme-uri&gt;&lt;/desktop-config&gt;        &#13;</programlisting></sect3></sect2><sect2><title>Use Your Own Theme</title>
<para>It is easy to customize the look and feel of the ZK XUL components by providing your own style sheets (CSS). You can refer to norm.css.dsp and normie.css.dsp in the zul project for examples. If you just want to change the font size, you can reference normsm.css.dsp.</para>
<programlisting>&lt;desktop-config&gt;&#13;    &lt;theme-uri&gt;/css/my-fine-font.css&lt;/theme-uri&gt;    &#13;&lt;/desktop-config&gt;&#13;</programlisting></sect2><sect2><title>The Theme Provider</title>
<para>If you prefer to decide the theme at the run time depending on the current user, cookie, locale or others, you can implement a theme provider. A theme provider is a class that implements the org.zkoss.zk.ui.util.ThemeProvider interface.</para>
<programlisting>package my;&#13;public class MyThemeProvider implements ThemeProvder {&#13;        public Collection getThemeURIs(Execution exec, List uris) {        &#13;            for (Iterator it = uris.iterator(); it.hasNext();) {            &#13;                if ("~./zul/css/norm*.css.dsp*".equals(it.next()))                &#13;                    it.remove(); //remove the default theme                    &#13;            }            &#13;            HttpServletRequest req = (HttpServletRequest)exec.getNativeRequest();            &#13;            uris.add(getMyThemeURI(req));            &#13;            return uris;            &#13;        }}        &#13;</programlisting>
<para>Then, you configure WEB-INF/zk.xml by adding the following lines.</para>
<programlisting>&lt;desktop-config&gt;&#13;    &lt;theme-provider-class&gt;my.MyThemeProvider&lt;/theme-provider-class&gt;    &#13;&lt;/desktop-config&gt;&#13;</programlisting>
<para>See also org.zkoss.zkdemo.userguide.FontSizeThemeProvider in zkdemo.war that decides the theme based on cookie.</para></sect2></sect1></chapter>
<chapter>
<title>15. Database Connectivity</title>
<para>This chapter describes how to make connections to database.</para><sect1><title>ZK Is Presentation-Tier Only</title>
<para>ZK is aimed to be as thin as the presentation tier. In addition, with the server-centric approach, it executes all codes at the server, so connecting database is no different from any desktop applications. In other words, ZK doesn't change the way you access the database, no matter you use JDBC or other persistence framework, such as Hibernate<footnote>
<para>
<ulink url="http://www.hibernate.org/">http://www.hibernate.org</ulink>
</para>
</footnote>.</para></sect1><sect1><title>Simplest Way to Use JDBC (but not recommended)</title>
<para>The simplest way to use JDBC, like any JDBC tutorial might suggest, is to use java.sql.DriverManager. Here is an example to store the name and email into a MySQL<footnote>
<para>
<ulink url="http://www.mysql.com/">http://www.mysql.com</ulink>
</para>
</footnote> database.</para>
<programlisting>&lt;window title="JDBC demo" border="normal"&gt;&#13;    &lt;zscript&gt;&lt;![CDATA[    &#13;    import java.sql.*;    &#13;    void submit() {    &#13;        //load driver and get a database connetion        &#13;        Class.forName("com.mysql.jdbc.Driver");        &#13;        Connection conn = DriverManager.getConnection(        &#13;            "jdbc:mysql://localhost/test?user=root&amp;password=my-password");            &#13;        PreparedStatement stmt = null;        &#13;        try {        &#13;            stmt = conn.prepareStatement("INSERT INTO user values(?, ?)");            &#13;&#13;            //insert what end user entered into database table            &#13;            stmt.set(1, name.value);            &#13;            stmt.set(2, email.value);            &#13;&#13;            //execute the statement            &#13;            stmt.executeUpdate();            &#13;        } finally { //cleanup        &#13;            if (stmt != null) {            &#13;                try {                &#13;                    stmt.close();                    &#13;                } catch (SQLException ex) {                &#13;                    log.error(ex); //log and ignore                    &#13;                }                &#13;            }            &#13;            if (conn != null) {            &#13;                try {                &#13;                    conn.close();                    &#13;                } catch (SQLException ex) {                &#13;                    log.error(ex); //log and ignore                    &#13;                }                &#13;            }            &#13;        }        &#13;    }    &#13;]]&gt;&#13;    &lt;/zscript&gt;    &#13;    &lt;vbox&gt;    &#13;        &lt;hbox&gt;Name : &lt;textbox id="name"/&gt;&lt;/hbox&gt;        &#13;        &lt;hbox&gt;Email: &lt;textbox id="email"/&gt;&lt;/hbox&gt;        &#13;        &lt;button label="submit" onClick="submit()"/&gt;        &#13;    &lt;/vbox&gt;    &#13;&lt;/window&gt;&#13;</programlisting>
<para>Though simple, it is not recommended. After all, ZK applications are Web-based applications, where loading is unpredictable and treasurable resources such as database connections have to be managed effectively.</para>
<para>Luckily, all J2EE frameworks and Web servers support a utility called connection pooling. It is straightforward to use, while managing the database connections well. We will discuss more in the next section.</para>
<para>Tip: Unlike other Web applications, it is possible to use DriverManager with ZK, though not recommended.</para>
<para>First, you could cache the connection in the desktop, reuse it for each event, and close it when the desktop becomes invalid. It works just like traditional Client/Server applications. Like Client/Server applications, it works efficiently only if there are at most tens concurrent users.</para>
<para>To know when a desktop becomes invalid, you have to implement a listener by use of org.zkoss.zk.ui.util.DesktopCleanup.</para></sect1><sect1><title>Use with Connection Pooling</title>
<para>Connection pooling is a technique of creating and managing a pool of connections that are ready for use by any thread that needs them. Instead of closing a connection immediately, it keeps them in a pool such that the next connect request could be served very efficiently. Connection pooling, in addition, has a lot of benefits, such as control resource usage.</para>
<para>There is no reason not to use connection pooling when developing Web-based applications, including ZK applications.</para>
<para>The concept of using connection pooling is simple: configure, connect and close. The way to connect and close a connection is very similar the ad-hoc approach, while configuration depends on what Web server and database server are in use.</para><sect2><title>Connect and Close a Connection</title>
<para>After configuring connection pooling (which will be discussed in the following section), you could use JNDI to retrieve an connection as follows.</para>
<programlisting>import java.sql.Connection;&#13;import java.sql.SQLException;&#13;import java.sql.Statement;&#13;&#13;import javax.naming.InitialContext;&#13;import javax.sql.DataSource;&#13;&#13;import org.zkoss.zul.Window;&#13;&#13;public class MyWindows extends Window {&#13;    private Textbox name, email;    &#13;    public void onCreate() {    &#13;        //initial name and email        &#13;        name = getFellow("name");        &#13;        email = getFellow("email");        &#13;    }    &#13;    public void onOK() throws Exception {    &#13;</programlisting>
<para>DataSource ds = (DataSource)new InitialContext()</para>
<para>.lookup("java:comp/env/jdbc/MyDB");</para>
<programlisting>//Assumes your database is configured and            &#13;            //named as "java:comp/env/jdbc/MyDB"            &#13;&#13;        Connection conn = null;        &#13;        Statement stmt = null;        &#13;        try {        &#13;</programlisting>
<para>conn = ds.getConnection();</para>
<programlisting>stmt = conn.prepareStatement("INSERT INTO user values(?, ?)");&#13;&#13;            //insert what end user entered into database table            &#13;            stmt.set(1, name.value);            &#13;</programlisting>
<para>stmt.set(2, email.value);</para>
<programlisting>&#13;            //execute the statement            &#13;            stmt.executeUpdate();            &#13;            stmt.close(); stmt = null;            &#13;                //optional because the finally clause will close it                &#13;                //However, it is a good habit to close it as soon as done, especially                 &#13;                //you might have to create a lot of statement to complete a job                &#13;        } finally { //cleanup        &#13;            if (stmt != null) {            &#13;                try {                &#13;                    stmt.close();                    &#13;                } catch (SQLException ex) {                &#13;                    //(optional log and) ignore                    &#13;                }                &#13;            }            &#13;            if (conn != null) {            &#13;                try {                &#13;                    conn.close();                    &#13;                } catch (SQLException ex) {                &#13;                    //(optional log and) ignore                    &#13;                }                &#13;            }            &#13;        }        &#13;    }    &#13;}&#13;</programlisting>
<para>Notes:</para>
<itemizedlist>
<listitem>
<para>It is important to close the statement and connection after use.</para>
</listitem>
<listitem>
<para>You could access multiple database at the same time by use of multiple connections. Depending on the configuration and J2EE/Web servers, these connections could even form a distributed transaction.</para>
</listitem>
</itemizedlist></sect2><sect2><title>Configure Connection Pooling</title>
<para>The configuration of connection pooling varies from one J2EE/Web/Database server to another. Here we illustrated some of them. You have to consult the document of the server you are using.</para><sect3><title>Tomcat 5.5 + MySQL</title>
<para>To configure connection pooling for Tomcat 5.5, you have to edit $TOMCAT_DIR/conf/context.xml<footnote>
<para>Thanks Thomas Muller (<ulink url="http://asconet.org:8000/antville/oberinspector">http://asconet.org:8000/antville/oberinspector</ulink>) for correction.</para>
<para>See also <ulink url="http://tomcat.apache.org/tomcat-5.5-doc/jndi-resources-howto.html">http://tomcat.apache.org/tomcat-5.5-doc/jndi-resources-howto.html</ulink> and <ulink url="http://en.wikibooks.org/wiki/ZK/How-Tos/HowToHandleHibernateSessions#Working_with_the_Hibernate_session">http://en.wikibooks.org/wiki/ZK/How-Tos/HowToHandleHibernateSessions#Working_with_the_Hibernate_session</ulink> for more details.</para>
</footnote>, and add the following content under the &lt;Context&gt; element. The information that depends on your installation and usually need to be changed is marked in the blue color.</para>
<programlisting>&lt;!-- The name you used above, must match _exactly_ here!&#13;    The connection pool will be bound into JNDI with the name    &#13;    "java:/comp/env/jdbc/MyDB"    &#13;--&gt;&#13;&lt;Resource name="jdbc/MyDB" username="someuser" password="somepass" &#13;    url="jdbc:mysql://localhost:3306/test"     &#13;    auth="Container" defaultAutoCommit="false"     &#13;    driverClassName="com.mysql.jdbc.Driver" maxActive="20"     &#13;    timeBetweenEvictionRunsMillis="60000"     &#13;    type="javax.sql.DataSource" /&gt;    &#13;&lt;/ResourceParams&gt;&#13;</programlisting>
<para>Then, in web.xml, you have to add the following content under the &lt;web-app&gt; element as follows.</para>
<programlisting>&lt;resource-ref&gt;&#13;&lt;res-ref-name&gt;jdbc/MyDB&lt;/res-ref-name&gt;&#13;&lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;&#13;&lt;res-auth&gt;Container&lt;/res-auth&gt;&#13;&lt;/resource-ref&gt;&#13;</programlisting></sect3><sect3><title>JBoss + MySQL</title>
<para>The following instructions is based on section 23.3.4.3 of the reference manual of MySQL 5.0.</para>
<para>To configure connection pooling for JBoss, you have to add a new file to the directory called deploy ($JBOSS_DIR/server/default/deploy). The file name must end with "-ds.xml", which tells JBoss to deploy this file as JDBC Datasource. The file must have the following contents. The information that depends on your installation and usually need to be changed is marked in the blue color.</para>
<programlisting>&lt;datasources&gt;&#13;&lt;local-tx-datasource&gt;&#13;&lt;!-- This connection pool will be bound into JNDI with the name&#13;"java:/MyDB" --&gt;&#13;&lt;jndi-name&gt;MyDB&lt;/jndi-name&gt;&#13;&lt;connection-url&gt;jdbc:mysql://localhost:3306/test&lt;/connection-url&gt;&#13;&lt;driver-class&gt;com.mysql.jdbc.Driver&lt;/driver-class&gt;&#13;&lt;user-name&gt;someser&lt;/user-name&gt;&#13;&lt;password&gt;somepass&lt;/password&gt;&#13;&#13;&lt;min-pool-size&gt;5&lt;/min-pool-size&gt;&#13;&#13;&lt;!-- Don't set this any higher than max_connections on your&#13;MySQL server, usually this should be a 10 or a few 10's&#13;of connections, not hundreds or thousands --&gt;&#13;&#13;&lt;max-pool-size&gt;20&lt;/max-pool-size&gt;&#13;&#13;&lt;!-- Don't allow connections to hang out idle too long,&#13;never longer than what wait_timeout is set to on the&#13;server...A few minutes is usually okay here,&#13;it depends on your application&#13;and how much spikey load it will see --&gt;&#13;&#13;&lt;idle-timeout-minutes&gt;5&lt;/idle-timeout-minutes&gt;&#13;&#13;&lt;!-- If you're using Connector/J 3.1.8 or newer, you can use&#13;our implementation of these to increase the robustness&#13;of the connection pool. --&gt;&#13;&#13;&lt;exception-sorter-class-name&gt;com.mysql.jdbc.integration.jboss.ExtendedMysqlExceptionSorter&lt;/exception-sorter-class-name&gt;&#13;&lt;valid-connection-checker-class-name&gt;com.mysql.jdbc.integration.jboss.MysqlValidConnectionChecker&lt;/valid-connection-checker-class-name&gt;&#13;&#13;&lt;/local-tx-datasource&gt;&#13;&lt;/datasources&gt;&#13;</programlisting></sect3><sect3><title>JBoss + PostgreSQL</title>
<programlisting>&lt;datasources&gt;&#13;    &lt;local-tx-datasource&gt;    &#13;    &lt;!-- This connection pool will be bound into JNDI with the name    &#13;     "java:/MyDB" --&gt;    &#13;    &lt;jndi-name&gt;MyDB&lt;/jndi-name&gt;    &#13;        &#13;    &lt;!-- jdbc:postgresql://[servername]:[port]/[database name] --&gt;    &#13;    &lt;connection-url&gt;jdbc:postgresql://localhost/test&lt;/connection-url&gt;    &#13;&#13;    &lt;driver-class&gt;org.postgresql.Driver&lt;/driver-class&gt;    &#13;    &lt;user-name&gt;someuser&lt;/user-name&gt;    &#13;    &lt;password&gt;somepass&lt;/password&gt;    &#13;    &lt;min-pool-size&gt;5&lt;/min-pool-size&gt;    &#13;    &lt;max-pool-size&gt;20&lt;/max-pool-size&gt;    &#13;    &lt;track-statements&gt;false&lt;/track-statements&gt;    &#13;    &lt;/local-tx-datasource&gt;    &#13;&lt;/datasources&gt;&#13;</programlisting></sect3></sect2></sect1><sect1><title>ZK Features Applicable to Database Access</title><sect2><title>The org.zkoss.zk.ui.event.EventThreadCleanup Interface</title>
<para>As emphasized before, it is important to close the connection in the finally clause, such that every connection will be returned to connection pool correctly.</para>
<para>To make your application more robust, you could implement the org.zkoss.zk.ui.event.EventThreadCleanup interface to close any pending connections and statements, in case that some of your application codes might forget to close them in the finally clause.</para>
<para>However, how to close pending connection and statements really depend on the server you are using. You have to consult the document of the server for how to write one.</para>
<para>Tip: In many cases, it is not necessary (and not easy) to provide such method, because most implementation of connection pooling be recycled a connection if its finalized method is called.</para></sect2><sect2><title>Access Database in EL Expressions</title>
<para>In additions to access database in an event listener, it is common to access database to fulfill an attribute by use of an EL expression. In the following example, we fetch the data from database and represent them with listbox by use of EL expressions.</para>
<programlisting>&lt;zscript&gt;&#13;import my.CustomerManager;&#13;    customers = new CustomerManager().findAll(); //load from database    &#13;&lt;/zscript&gt;&#13;&lt;listbox id="personList" width="800px" rows="5"&gt;&#13;    &lt;listhead&gt;    &#13;        &lt;listheader label="Name"/&gt;        &#13;        &lt;listheader label="Surname"/&gt;        &#13;        &lt;listheader label="Due Amount"/&gt;        &#13;    &lt;/listhead&gt;    &#13;    &lt;listitem value="${each.id}" forEach="${customers}"&gt;    &#13;        &lt;listcell label="${each.name}"/&gt;        &#13;        &lt;listcell label="${each.surname}"/&gt;        &#13;        &lt;listcell label="${each.due}"/&gt;        &#13;    &lt;/listitem&gt;    &#13;&lt;/listbox&gt;&#13;</programlisting>
<para>There are several way to implement the findAll method.</para><sect3><title>Read all and Copy to a LinkedList</title>
<para>The simplest way is to retrieve all data in the findAll method, copy them into a list and then close the connection.</para>
<programlisting>public class CustomerManager {&#13;    public List findAll() throws Exception {    &#13;        DataSource ds = (DataSource)new InitialContext()        &#13;                .lookup("java:comp/env/jdbc/MyDB");                &#13;&#13;        Connection conn = null;        &#13;        Statement stmt = null;        &#13;        ResultSet rs = null;        &#13;        List results = new LinkedList();        &#13;        try {        &#13;</programlisting>
<para>conn = ds.getConnection();</para>
<programlisting>stmt = conn.createStatement();&#13;            rs = stmt.executeQuery("SELECT id, name, surname FROM customers");            &#13;            while (rs.next()) {            &#13;                long id = rs.getInt("id");                &#13;                String name = rs.getString("name");                &#13;                String surname = rs.getString("surname");                &#13;                results.add(new Customer(id, name, surname));                &#13;            }            &#13;</programlisting>
<para>return results;</para>
<programlisting>        } finally {        &#13;            if (rs != null) try { rs.close(); } catch (SQLException ex) [}            &#13;            if (stmt != null) try { stmt.close(); } catch (SQLException ex) [}            &#13;            if (conn != null) try { conn.close(); } catch (SQLException ex) [}            &#13;        }        &#13;    }    &#13;}&#13;</programlisting></sect3><sect3><title>Implement the org.zkoss.zk.ui.util.Initiator Interface</title>
<para>Instead of mixing Java codes with the view, you could use the init Directive to load the data.</para>
<programlisting>&lt;?init class="my.AllCustomerFinder" arg0="customers"?&gt;&#13;&#13;&lt;listbox id="personList" width="800px" rows="5"&gt;&#13;    &lt;listhead&gt;    &#13;        &lt;listheader label="Name"/&gt;        &#13;        &lt;listheader label="Surname"/&gt;        &#13;        &lt;listheader label="Due Amount"/&gt;        &#13;    &lt;/listhead&gt;    &#13;    &lt;listitem value="${each.id}" forEach="${customers}"&gt;    &#13;        &lt;listcell label="${each.name}"/&gt;        &#13;        &lt;listcell label="${each.surname}"/&gt;        &#13;        &lt;listcell label="${each.due}"/&gt;        &#13;    &lt;/listitem&gt;    &#13;&lt;/listbox&gt;&#13;</programlisting>
<para>Then, implement the my.CustomerFindAll class with the org.zkoss.zk.ui.util.Initiator interface.</para>
<programlisting>import org.zkoss.zk.ui.Page;&#13;import org.zkoss.zk.ui.util.Initiator;&#13;&#13;public class AllCustomerFinder implements Initiator {&#13;    public void doInit(Page page, Object[] args) {    &#13;        try {        &#13;            page.setVariable((String)args[0], new CustomerManager().findAll());            &#13;                //Use setVariable to pass the result back to the page                &#13;        } catch (Exception ex) {        &#13;            throw UiException.Aide.wrap(ex);            &#13;        }        &#13;    }    &#13;    public void doCatch(Throwable ex) { //ignore    &#13;    }    &#13;    public void doFinally() { //ignore    &#13;    }    &#13;}&#13;</programlisting></sect3></sect2><sect2><title>Transaction and org.zkoss.zk.util.Initiator</title>
<para>For sophisticated application (such as distributed transaction), you might have to control the lifecyle of a transaction explicitly. If all database access is done in event listeners, there is nothing to change to make it work under ZK. You start, commit or rollback a transaction the same way as suggested in the document of your J2EE/Web server.</para>
<para>However, if you want the evaluation of the whole ZUML page (the Component Creation Phases) is done in the same transaction, then you, as described in the above section, could implement the org.zkoss.zk.util.Initiator interface to control the transaction lifecycle for a given page.</para>
<para>The skeletal implementation is illustrated as follows.</para>
<programlisting>import org.zkoss.zk.ui.Page;&#13;import org.zkoss.zk.ui.util.Initiator;&#13;&#13;public class TransInitiator implements Initiator {&#13;        private boolean _err;public void doInit(Page page, Object[] args) {        &#13;        startTrans(); //depending the container, see below        &#13;    }    &#13;    public void doCatch(Throwable ex) {    &#13;        _err = true;        &#13;        rollbackTrans(); //depending the container, see below        &#13;        }public void doFinally() {        &#13;        if (!_err)        &#13;            commitTrans(); //depending the container, see below            &#13;    }    &#13;}&#13;</programlisting>
<para>As depicted, the transaction starts in the doInit method, and ends in the doFinally method of the org.zkoss.zk.util.Initiator interface.</para>
<para>How to start, commit and rollback an transaction depends on the container you use.</para><sect3><title>J2EE Transaction and Initiator</title>
<para>If you are using a J2EE container, you could look up the transaction manager (javax.transaction.TransactionManager), and then invoke its begin method to start an transaction. To rollback, invoke its rollback method. To commit, invoke its commit method.</para></sect3><sect3><title>Web Containers and Initiator</title>
<para>If you are using a Web container without transaction managers, you could start a transaction by constructing a database connection. Then, invoke its commit and rollback methods accordingly.</para>
<programlisting>import java.sql.*;&#13;import javax.sql.DataSource;&#13;</programlisting>
<para>import javax.naming.InitContext;</para>
<programlisting>import org.zkoss.util.logging.Log;&#13;import org.zkoss.zk.ui.Page;&#13;import org.zkoss.zk.ui.util.Initiator;&#13;&#13;public class TransInitiator implements Initiator {&#13;    private static final Log log = Log.lookup(TransInitiator.class);    &#13;    private Connection _conn;    &#13;    private boolean _err;    &#13;&#13;    public void doInit(Page page, Object[] args) {    &#13;        try {        &#13;            DataSource ds = (DataSource)new InitialContext()            &#13;                .lookup("java:comp/env/jdbc/MyDB");                &#13;            _conn = ds.getConnection();            &#13;        } catch (Throwable ex) {        &#13;            throw UiException.Aide.wrap(ex);            &#13;        }        &#13;    }    &#13;    public void doCatch(Throwable t) {    &#13;        if (_conn != null) {        &#13;            try {            &#13;                _err = true;                &#13;                _conn.rollback();                &#13;            } catch (SQLException ex) {            &#13;                log.warning("Unable to roll back", ex);                &#13;            }            &#13;        }        &#13;    }    &#13;    public void doFinally() {    &#13;        if (_conn != null) {        &#13;            try {            &#13;                if (!_err)                &#13;                    _conn.commit();                    &#13;            } catch (SQLException ex) {            &#13;                log.warning("Failed to commit", ex);                &#13;            } finally {            &#13;                try {                &#13;                    _conn.close();                    &#13;                } catch (SQLException ex) {                &#13;                    log.warning("Unable to close transaction", ex);                    &#13;                }                &#13;            }            &#13;        }        &#13;    }    &#13;}&#13;</programlisting></sect3></sect2></sect1></chapter>
<chapter>
<title>16. Hibernate Integration</title><sect1><title>What is Hibernate</title>
<para>Hibernate is an object-relational mapping (ORM) solution for the Java language. The mainfeature of Hibernate is that it simplifies the job of accessing a database.</para></sect1><sect1><title>Installing Hibernate</title>
<para>Before using Hibernate, you have to install it into your application first.</para>
<orderedlist>
<listitem>
<para>Download <ulink url="http://www.hibernate.org/">Hibernate (http://www.hibernate.org)</ulink>
</para>
</listitem>
<listitem>
<para>Put *.jar files into your $myApp/WEB-INF/lib/</para>
</listitem>
</orderedlist>
<para>
<code>$myApp represents the name of your web application. ex. Event</code>
</para></sect1><sect1><title>Configuring the ZK Configuration File</title>
<para>To make ZK works with Hibernate smoothly, you have to use the following utilities.</para>
<orderedlist>
<listitem>
<para>Create <code>zk.xml</code> under <code>$myApp/WEB-INF/</code>(if not exists)</para>
</listitem>
<listitem>
<para>Copy the following lines into your <code>zk.xml</code>
</para>
</listitem>
</orderedlist>
<programlisting>&lt;!-- Hibernate SessionFactory lifecycle â&#13;&lt;listener&gt;&#13;&lt;description&gt;Hibernate SessionFactory lifecycle&lt;/description&gt;&#13;&lt;listener-class&gt;org.zkoss.zkplus.hibernate.HibernateSessionFactoryListener&lt;/listener-class&gt;&#13;&lt;/listener&gt;&#13;&#13;&lt;!-- Hibernate OpenSessionInView Pattern â&#13;&lt;listener&gt;&#13;&lt;description&gt;Hibernate Open Session In View life-cycle&lt;/description&gt;&#13;&lt;listener-class&gt;org.zkoss.zkplus.hibernate.OpenSessionInViewListener&lt;/listener-class&gt;&#13;&lt;/listener&gt;&#13;&#13;&lt;!-- Hibernate thread session context handler â&#13;&lt;listener&gt;&#13;&lt;description&gt;Hibernate thread session context handler&lt;/description&gt;&#13;&lt;listener-class&gt;org.zkoss.zkplus.hibernate.HibernateSessionContextListener&lt;/listener-class&gt;&#13;&lt;/listener&gt; &#13;</programlisting></sect1><sect1><title>Creating the Java Objects</title>
<para>You have to create simple JavaBean class with some properties.</para>
<orderedlist>
<listitem>
<para>Create your first Java class (<code>Event.java</code>)</para>
</listitem>
</orderedlist>
<programlisting>package events;&#13;&#13;import java.util.Date;&#13;&#13;public class Event {&#13;    private Long id;    &#13;    private String title;    &#13;    private Date date;    &#13;        &#13;    public Event() {}    &#13;        public Long getId() {        &#13;            return id;            &#13;    }    &#13;    private void setId(Long id) {    &#13;        this.id = id;        &#13;    }    &#13;    public Date getDate() {    &#13;        return date;        &#13;    }    &#13;    public void setDate(Date date) {    &#13;        this.date = date;        &#13;    }    &#13;    public String getTitle() {    &#13;        return title;        &#13;    }    &#13;    public void setTitle(String title) {    &#13;        this.title = title;        &#13;    }    &#13;}&#13;</programlisting>
<orderedlist>
<para/>
<listitem>
<para>You have to compile the Java source, and place the class file in a directory called <code>classes</code> in the Web development folder, and in its correct package. (ex.<code>$myApp/WEB-INF/classes/event/Event.class</code>)</para>
</listitem>
</orderedlist>
<para>The next step is to tell Hibernate how to map this persistent class with database.</para></sect1><sect1><title>Mapping the Java Objects</title>
<para>There are two ways to tell Hibernate how to load and store objects of the persistent class, one is using Hibernate mapping file, and the other is using Java Annotation.</para><sect2><title>Using the Mapping Files</title>
<orderedlist>
<listitem>
<para>Simply create <code>Event.hbm.xml</code> for the persistent class <code>Event.java</code>.</para>
</listitem>
</orderedlist>
<programlisting>&lt;?xml version="1.0"?&gt;&#13;&lt;!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN""http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"&gt;&#13;&#13;&lt;hibernate-mapping&gt;&#13;    &lt;class name="events.Event" table="EVENTS"&gt;    &#13;        &lt;id name="id" column="EVENT_ID"&gt;        &#13;            &lt;generator class="native"/&gt;            &#13;        &lt;/id&gt;        &#13;            &lt;property name="date" type="timestamp" column="EVENT_DATE"/&gt;            &#13;            &lt;property name="title"/&gt;            &#13;    &lt;/class&gt;    &#13;&lt;/hibernate-mapping&gt;&#13;</programlisting>
<orderedlist>
<para/>
<listitem>
<para>Place this <code>Event.hbm.xml</code> in the directory called <code>src</code> in the development folder, and its correct package. (ex.<code>$myApp/WEB-INF/src/event/Event.hbm.xml</code>)</para>
</listitem>
</orderedlist></sect2><sect2><title>Using Java Annotation</title>
<para>The benefit of using Java annotation instead of Hibernate mapping file is that no additional file is required. Simply add Java annotation on your Java class to tell Hibernate about the mappings. </para>
<programlisting>package events;&#13;&#13;import java.util.Date;&#13;&#13;import javax.persistence.Column;&#13;import javax.persistence.Entity;&#13;import javax.persistence.GeneratedValue;&#13;import javax.persistence.GenerationType;&#13;import javax.persistence.Id;&#13;import javax.persistence.Table;&#13;</programlisting>
<para/>
<para>@Entity</para>
<para>@Table(name="EVENTS")</para>
<programlisting>public class Event {&#13;    private Long id;    &#13;    private String title;    &#13;    private Date date;    &#13;</programlisting>
<para/>
<para>@Id</para>
<para>@GeneratedValue(strategy=GenerationType.SEQUENCE)</para>
<para>@Column(name = "EVENT_ID")</para>
<programlisting>public Long getId() {&#13;        return id;        &#13;    }    &#13;    private void setId(Long id) {    &#13;        this.id = id;        &#13;    }    &#13;</programlisting>
<para>@Column(name = "EVENT_DATE")</para>
<programlisting>public Date getDate() {&#13;        return date;        &#13;    }    &#13;    public void setDate(Date date) {    &#13;        this.date = date;        &#13;    }    &#13;    public String getTitle() {    &#13;        return title;        &#13;    }    &#13;    public void setTitle(String title) {    &#13;        this.title = title;        &#13;    }    &#13;}&#13;</programlisting>
<para/>
<itemizedlist>
<listitem>
<para>@Entity declares this class as a persistence object</para>
</listitem>
<listitem>
<para>@Table(name = "EVENTS") annotation tells that the entity is mapped with the table EVENTS in the database</para>
</listitem>
<listitem>
<para>@Column element is used to map the entities with the column in the database.</para>
</listitem>
<listitem>
<para>@Id element defines the mapping from that property to the primary key column.</para>
</listitem>
</itemizedlist></sect2></sect1><sect1><title>Creating the Hibernate Configuration File</title>
<para>The next step is to setup Hibernate to use a database. HSQL DB, a java-based SQL DBMS, can be downloaded from the HSQL DB website(<ulink url="http://hsqldb.org/">http://hsqldb.org/</ulink>). </para>
<orderedlist>
<listitem>
<para>Unzip it to a directory, say c:/hsqldb.</para>
</listitem>
<listitem>
<para>Open a command box and change to c:/hsqldb</para>
</listitem>
<listitem>
<para>In the command prompt, execute<code> java -cp lib/hsqldb.jar org.hsqldb.Server</code>
</para>
</listitem>
</orderedlist>
<para>After installing the database, we have to setup Hibernate Configuration file. Create <code>hibernate.cfg.xml</code> in the directory called <code>src</code> in the development folder(ex.<code>$myApp/WEB-INF/src/hibernate.cfg.xml</code>). Copy the following lines into your hibernate.cfg.xml. It depends on how you map your Java objects.</para>
<itemizedlist>
<listitem><sect3><title>Using the Mapping Files</title></sect3></listitem>
</itemizedlist>
<programlisting>&lt;?xml version='1.0' encoding='utf-8'?&gt;&#13;&lt;!DOCTYPE hibernate-configuration PUBLIC&#13;"-//Hibernate/Hibernate Configuration DTD 3.0//EN"&#13;"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;&#13;&#13;&lt;hibernate-configuration&gt;&#13;&#13;&lt;session-factory&gt;&#13;&#13;&lt;!-- Database connection settings --&gt;&#13;&lt;property name="connection.driver_class"&gt;org.hsqldb.jdbcDriver&lt;/property&gt;&#13;&lt;property name="connection.url"&gt;jdbc:hsqldb:hsql://localhost&lt;/property&gt;&#13;&lt;property name="connection.username"&gt;sa&lt;/property&gt;&#13;&lt;property name="connection.password"&gt;&lt;/property&gt;&#13;&#13;&lt;!-- JDBC connection pool (use the built-in) --&gt;&#13;&lt;property name="connection.pool_size"&gt;1&lt;/property&gt;&#13;&#13;&lt;!-- SQL dialect --&gt;&#13;&lt;property name="dialect"&gt;org.hibernate.dialect.HSQLDialect&lt;/property&gt;&#13;&#13;&lt;!-- Enable Hibernate's automatic session context management --&gt;&#13;&lt;property name="current_session_context_class"&gt;thread&lt;/property&gt;&#13;&#13;&lt;!-- Disable the second-level cache --&gt;&#13;&lt;property name="cache.provider_class"&gt;org.hibernate.cache.NoCacheProvider&lt;/property&gt;&#13;&#13;&lt;!-- Echo all executed SQL to stdout --&gt;&#13;&lt;property name="show_sql"&gt;true&lt;/property&gt;&#13;&#13;&lt;!-- Drop and re-create the database schema on startup --&gt;&#13;&lt;property name="hbm2ddl.auto"&gt;create&lt;/property&gt;&#13;&#13;&lt;mapping resource="events/Event.hbm.xml"/&gt; &#13;&#13;&lt;/session-factory&gt;&#13;&#13;</programlisting>
<itemizedlist>
<para>&lt;/hibernate-configuration&gt;</para>
<listitem><sect3><title>Using Java Annotation</title></sect3></listitem>
</itemizedlist>
<para/>
<programlisting>&lt;?xml version='1.0' encoding='utf-8'?&gt;&#13;&lt;!DOCTYPE hibernate-configuration PUBLIC&#13;"-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;&#13;&#13;&lt;hibernate-configuration&gt;&#13;    &lt;session-factory&gt;    &#13;    &lt;!-- Database connection settings â    &#13;    &lt;property name="connection.driver_class"&gt;org.hsqldb.jdbcDriver&lt;/property&gt;    &#13;    &lt;property name="connection.url"&gt;jdbc:hsqldb:hsql://localhost&lt;/property&gt;    &#13;    &lt;property name="connection.username"&gt;sa&lt;/property&gt;    &#13;    &lt;property name="connection.password"&gt;&lt;/property&gt;    &#13;&#13;    &lt;!-- JDBC connection pool (use the built-in) â    &#13;    &lt;property name="connection.pool_size"&gt;1&lt;/property&gt;    &#13;    &lt;!-- SQL dialect â    &#13;    &lt;property name="dialect"&gt;org.hibernate.dialect.HSQLDialect&lt;/property&gt;    &#13;&#13;    &lt;!-- Enable Hibernate's automatic session context management â    &#13;    &lt;property name="current_session_context_class"&gt;thread&lt;/property&gt;    &#13;    &lt;!-- Disable the second-level cache â    &#13;    &lt;property    &#13;    name="cache.provider_class"&gt;org.hibernate.cache.NoCacheProvider&lt;/property&gt;    &#13;    &lt;!-- Echo all executed SQL to stdout â    &#13;    &lt;property name="show_sql"&gt;true&lt;/property&gt;    &#13;    &lt;!-- Drop and re-create the database schema on startup â    &#13;    &lt;property name="hbm2ddl.auto"&gt;create&lt;/property&gt;    &#13;</programlisting>
<para>&lt;mapping class="events.Event"/&gt;</para>
<programlisting>&lt;/session-factory&gt;&#13;&lt;/hibernate-configuration&gt;&#13;</programlisting>
<para>We continue with how to create a class to handle data accessing jobs.</para></sect1><sect1><title>Creating DAO Objects</title>
<para>For ease of maintenance, we used to create another Java class to handle data accessing jobs. </para>
<orderedlist>
<listitem>
<para>Create <code>EventDAO.java</code>
</para>
</listitem>
</orderedlist>
<programlisting>package events;&#13;&#13;import java.util.Date;&#13;import java.util.List;&#13;&#13;import org.hibernate.Session;&#13;import org.zkoss.zkplus.hibernate.HibernateUtil;&#13;&#13;public class EventDAO {&#13;    Session currentSession() {    &#13;        return HibernateUtil.currentSession();        &#13;    }    &#13;    public void saveOrUpdate(Event anEvent, String title, Date date) {    &#13;        Session sess = currentSession();        &#13;        anEvent.setTitle(title);        &#13;        anEvent.setDate(date);        &#13;        sess.saveOrUpdate(anEvent);        &#13;    }    &#13;    public void delete(Event anEvent) {    &#13;        Session sess = currentSession();        &#13;        sess.delete(anEvent);        &#13;    }    &#13;    public Event findById(Long id) {    &#13;        Session sess = currentSession();        &#13;        return (Event) sess.load(Event.class, id);        &#13;    }    &#13;    public List findAll() {    &#13;        Session sess = currentSession();        &#13;        return sess.createQuery("from Event").list();        &#13;    }    &#13;}&#13;</programlisting>
<orderedlist>
<listitem>
<para>You have to compile the Java source, and place the class file in a directory called <code>classes</code> in the Web development folder, and in its correct package. (ex.<code>$myApp/WEB-INF/classes/event/EventDAO.class</code>)</para>
</listitem>
</orderedlist></sect1><sect1><title>Accessing Persistence Objects in ZUML Page</title>
<para>To access persistence objects in ZUML page is simple, simply declare a persistence object, and uses it to get data from database. </para>
<orderedlist>
<listitem>
<para>Create a <code>event.zul</code> in the root directory of web development. (ex. <code>$myApp/event.zul</code>)</para>
</listitem>
</orderedlist>
<programlisting>&lt;zk&gt;&#13;&lt;zscript&gt;&lt;![CDATA[&#13;import java.util.Date;&#13;import java.text.SimpleDateFormat;&#13;import events.Event;&#13;import events.EventDAO;&#13;&#13;//fetch all allEvents from database&#13;List allEvents = new EventDAO().findAll();&#13;&#13;]]&gt;&lt;/zscript&gt;&#13;                &lt;listbox id="lbxEvents"&gt;                &#13;    &lt;listhead&gt;    &#13;        &lt;listheader label="Title" width="200px"/&gt;        &#13;        &lt;listheader label="Date" width="100px"/&gt;        &#13;    &lt;/listhead&gt;    &#13;    &lt;listitem forEach="${allEvents}" value="${each}"&gt;    &#13;        &lt;listcell label="${each.title}"/&gt;        &#13;        &lt;zscript&gt;String datestr = new SimpleDateFormat("yyyy/MM/dd").format(each.date);&lt;/zscript&gt;        &#13;        &lt;listcell label="${datestr}"/&gt;        &#13;    &lt;/listitem&gt;    &#13;&lt;/listbox&gt;&#13;&lt;/zk&gt;&#13;</programlisting>
<orderedlist>
<para/>
<listitem>
<para>Open a browser and visit the ZUML page. (ex. <code>http://localhost:8080/event/event.zul</code>)</para>
</listitem>
</orderedlist>
<para/>
<para/></sect1></chapter>
<chapter>
<title>17. Spring Integration</title><sect1><title>What is Spring</title>
<para>
<ulink url="http://www.springframework.org/">Spring</ulink> is a platform for building Java application, and it includes many easy-to-use solutions for building web-based application.</para></sect1><sect1><title>Prerequisites of Using Spring</title>
<para>Before you have to finish the following prerequisites:</para><sect2><title>Copy spring.jar into your Web library</title>
<para>Before using Spring, you have to download it, and put the jar file into the directory of your web application. </para>
<orderedlist>
<listitem>
<para>Download Spring<ulink url="http://www.hibernate.org/"> library (</ulink>
<ulink url="http://www.springframework.org/download">http://www.springframework.org/download</ulink>
<ulink url="http://www.hibernate.org/">)</ulink>
</para>
</listitem>
<listitem>
<para>Put spring.jar into your <code>$myApp/WEB-INF/lib/</code>
</para>
<orderedlist>
<para>
<code>$myApp represents the name of your web application.</code>
</para>
</orderedlist>
</listitem>
</orderedlist></sect2><sect2><title>Configure <code>web.xml</code>
</title>
<para>
<code>In your web.xml, you have to def</code>
<code>ine</code>
<code> </code>
<code>org.springframework.web.context.ContextLoaderListener</code>
<code>, and to specify the location of the configuration file to load bean definitions.</code>
</para>
<programlisting>&lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;/WEB-INF/applicationContext.xml&lt;/param-value&gt;&lt;/context-param&gt;&lt;listener&gt;&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt;&#13;</programlisting></sect2><sect2><title>Create Spring Configuration File</title>
<para>Define bean definitions in <code>applicationContext.xml</code> file, and put it into your <code>WEB-INF</code> directory.</para>
<programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd"&gt;&lt;beans&gt; &lt;bean id="DataSource" class="test.DataSourceImpl"/&gt;&lt;/beans&gt;&#13;</programlisting></sect2><sect2><title>Creating Spring Bean Class</title>
<para>
<code>For OOP programming, you have to define a DataSource interface:</code>
</para>
<para>
<code>DataSource.java</code>
</para>
<programlisting>package test;public interface DataSource{ java.util.List getElementsList();} &#13;</programlisting>
<para>
<code>and its implementation:</code>
</para>
<para>
<code>DataSourceImpl.java</code>
</para>
<programlisting>package test;import java.util.*;public class DataSourceImpl implements DataSource{ public List getElementsList() {&#13;                                             List list = new ArrayList();list.add("Tom");list.add("Henri");list.add("Jim");return list; }}                                             &#13;</programlisting></sect2></sect1><sect1><title>Accessing Spring Bean in the ZUML page</title>
<para>There are two ways to access Spring-Managed beans in your ZUML page. One is using <code>variable-resolver</code>, and the other is using <code>SpringUtil</code>. Which to use depends on your usage, in the ZUML page, we suggest you to use <code>variable-resolver</code>. </para><sect2><title>
<code>Using </code>
<code>variable-Resolver</code>
</title>
<para>Simply declare the <code>variable-resolver</code> for <code>org.zkoss.zkplus.spring.DelegatingVariableResolver</code> on top of your ZUML page, then, in the rest of your page, you can access any Spring-Managed beans directly using its bean-id.</para>
<programlisting>&lt;?variable-resolver class="org.zkoss.zkplus.spring.DelegatingVariableResolver"?&gt; &lt;window&gt; &lt;grid&gt; &lt;rows&gt; &lt;row forEach="${DataSource.elementsList}"&gt; &lt;label value="${each}"/&gt; &lt;/row&gt; &lt;/rows&gt; &lt;/grid&gt; &lt;/window&gt;&#13;</programlisting>
<para>
<code>variable-resolver </code>will look-up the bean named <code>DataSource</code> automatically for you, and returned a list to the <code>forEach</code> loop.</para></sect2><sect2><title>Using <code>SpringUtil</code>
</title>
<para>
<code>org.zkoss.zkplus.spring.SpringUtil</code> is a utility class which allows you to get Spring-managed beans with ease. </para>
<programlisting>&lt;window&gt; &lt;zscript&gt; import org.zkoss.zkplus.spring.SpringUtil; import test.*;  DataScource dataSource = SpringUtil.getBean("DataSource"); List list = dataSource.getElementsList(); &lt;/zscript&gt;  &lt;grid&gt; &lt;rows&gt; &lt;row forEach="${list}"&gt; &lt;label value="${each}"/&gt; &lt;/row&gt; &lt;/rows&gt; &lt;/grid&gt; &lt;/window&gt;&#13;</programlisting>
<para>Where the <code>forEach</code> loop is looping over the collection to print the <code>${each}</code> attribute on each object in the collection.</para></sect2></sect1><sect1><title>Spring Security</title>
<para>Spring Security 2.0 is the next generation security system for the Spring Framework. It has added many new features since its predecessor Acegi Security System. </para><sect2><title>Running a sample application</title>
<orderedlist>
<listitem>
<para>Download the war file</para>
<para>
<ulink url="http://downloads.sourceforge.net/zkforge/zkspringsec2.war">http://downloads.sourceforge.net/zkforge/zkspringsec2.war</ulink>
</para>
<para>The tutorial sample is borrowed from Spring Security 2.0, and has been modified to work with ZK seamlessly.</para>
</listitem>
<listitem>
<para>Deploy the war file</para>
</listitem>
</orderedlist>
<itemizedlist>
<listitem>
<para>Tomcat 5.5 and above.</para>
</listitem>
</itemizedlist>
<para>Copy <code>zkspringsec2.war</code> to the <code>$Tomcat_Home/webapps/ </code>folder of Tomcat server and restart Tomcat. </para>
<orderedlist>
<listitem>
<para>Use your browser to visit:</para>
<para>
<ulink url="http://localhost:8080/zkspringsec2/">http://localhost:8080/zkspringsec2/</ulink>
</para>
<para>username/password is rod/koala </para>
</listitem>
</orderedlist></sect2><sect2><title>Prerequisites of using Spring Security</title>
<para>To make Spring Security work with ZK properly, you have to copy the following jars to <code>/WEB-INF/lib</code>
<code>.</code>
</para>
<itemizedlist>
<listitem>
<para>
<code>ZK Spring Integration Library jar file</code>
</para>
</listitem>
</itemizedlist>
<programlisting>zkspring.jar&#13;</programlisting>
<itemizedlist>
<listitem>
<para>Spring Security library jar files</para>
</listitem>
</itemizedlist>
<programlisting>aopalliance-1.0.jar&#13;aspectjrt-1.5.4.jar&#13;commons-codec-1.3.jar&#13;commons-collections-3.2.jar&#13;commons-lang.jar&#13;commons-logging-1.1.1.jar&#13;jstl-1.1.2.jar&#13;log4j-1.2.14.jar&#13;spring-security-acl-2.0.3.jar&#13;spring-security-core-2.0.3.jar&#13;spring-security-core-tiger-2.0.3.jar&#13;spring-security-taglibs-2.0.3.jar&#13;spring.jar&#13;standard-1.1.2.jar&#13;</programlisting></sect2><sect2><title>Configure the /WEB-INF/web.xml file</title>
<para>To make Tomcat work with Spring Security properly, you shall specify the location of spring-security configuration file, and define listener of spring, and filter of spring-security as follows: </para>
<programlisting>&lt;!--&#13;- Location of the XML file that defines the root application context&#13;- Applied by ContextLoaderListener.&#13;--&gt;&#13;</programlisting>
<para>&lt;context-param&gt;</para>
<para>&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</para>
<para>&lt;param-value&gt;</para>
<para>...</para>
<para>/WEB-INF/applicationContext-security.xml</para>
<para>&lt;/param-value&gt;</para>
<para>&lt;/context-param&gt;</para>
<programlisting>&#13;&lt;!--&#13;- Loads the root application context of this web app at startup.&#13;- The application context is then available via&#13;- WebApplicationContextUtils.getWebApplicationContext(servletContext).&#13;--&gt;&#13;&lt;listener&gt;&#13;</programlisting>
<para>&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</para>
<para>&lt;/listener&gt; </para>
<programlisting>&lt;!--&#13;- Spring Security Filter Chains&#13;--&gt;&#13;</programlisting>
<para>&lt;filter&gt;</para>
<para>&lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;</para>
<para>&lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;</para>
<para>&lt;/filter&gt;</para></sect2><sect2><title>
<code>Create </code>
<code>/WEB-INF/applicationContext-security.xml</code>
</title>
<para>
<code>Create </code>
<code>application-security.xml</code>
<code> file under $myApp</code>
<code>/WEB-INF/</code>
<code>. This file include required dentitions of spring-security. </code>
</para>
<programlisting>&lt;!--&#13;- Spring namespace-based configuration&#13;--&gt;&#13;&lt;beans:beans xmlns="http://www.springframework.org/schema/security"&#13;xmlns:beans="http://www.springframework.org/schema/beans"&#13;xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&#13;xsi:schemaLocation="http://www.springframework.org/schema/beans &#13;http://www.springframework.org/schema/beans/spring-beans-2.0.xsd&#13;http://www.springframework.org/schema/security &#13;http://www.springframework.org/schema/security/spring-security-2.0.1.xsd"&gt;&#13;&#13;&lt;!--&#13;- Enable the @Secured annotation to secure service layer methods&#13;--&gt;&#13;&lt;global-method-security secured-annotations="enabled"&gt;&#13;&lt;/global-method-security&gt;&#13;&#13;&lt;!--&#13;- Secure the page per the URL pattern&#13;--&gt;&#13;&lt;http auto-config="true"&gt;&#13;&lt;intercept-url pattern="/secure/extreme/**" access="ROLE_SUPERVISOR"/&gt;&#13;&lt;intercept-url pattern="/secure/**" access="IS_AUTHENTICATED_REMEMBERED" /&gt;&#13;&lt;intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" /&gt;&#13;&#13;&lt;!-- use own login page rather than the default one --&gt;&#13;&lt;form-login login-page="/login.zul"/&gt;&#13;&lt;/http&gt;&#13;&#13;&lt;!--&#13;Usernames/Passwords are&#13;rod/koala&#13;dianne/emu&#13;scott/wombat&#13;peter/opal&#13;--&gt;&#13;&lt;authentication-provider&gt;&#13;&lt;password-encoder hash="md5"/&gt;&#13;&lt;user-service&gt;&#13;&lt;user name="rod" password="a564de63c2d0da68cf47586ee05984d7" authorities="ROLE_SUPERVISOR, ROLE_USER, ROLE_TELLER" /&gt;&#13;&lt;user name="dianne" password="65d15fe9156f9c4bbffd98085992a44e" authorities="ROLE_USER,ROLE_TELLER" /&gt;&#13;&lt;user name="scott" password="2b58af6dddbd072ed27ffc86725d7d3a" authorities="ROLE_USER" /&gt;&#13;&lt;user name="peter" password="22b5c9accc6e1ba628cedc63a72d57f8" authorities="ROLE_USER" /&gt;&#13;&lt;/user-service&gt;&#13;&lt;/authentication-provider&gt;&#13;&lt;/beans:beans&gt;&#13;</programlisting></sect2><sect2><title>
<code>Def</code>
<code>ine which service to be secured</code>
</title>
<para>
<code>Use Spring Security annotation </code>
<code>@Secured</code>
<code> to protect the calling of a business service as follows: </code>
</para>
<programlisting>public interface BankService {@Secured("IS_AUTHENTICATED_ANONYMOUSLY")public Account readAccount(Long id);@Secured("IS_AUTHENTICATED_ANONYMOUSLY")public Account[] findAccounts();@Secured("ROLE_TELLER")public Account post(Account account, double amount);}&#13;</programlisting></sect2><sect2><title>
<code>Def</code>
<code>ine which ZK event to be secured</code>
</title>
<para>
<code>In /WEB-INF/applicationContext-security.xml, define required configurations of the namespace of zk, and specify which ZK event to secure as follows,</code>
</para>
<programlisting>&lt;!--&#13;- Spring namespace-based configuration&#13;--&gt;&#13;&lt;beans:beans xmlns="http://www.springframework.org/schema/security"&#13;xmlns:zksp="http://www.zkoss.org/2008/zkspring"&#13;xmlns:beans="http://www.springframework.org/schema/beans"&#13;xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&#13;xsi:schemaLocation="http://www.springframework.org/schema/beans &#13;http://www.springframework.org/schema/beans/spring-beans-2.0.xsd&#13;http://www.springframework.org/schema/security &#13;http://www.springframework.org/schema/security/spring-security-2.0.1.xsd&#13;http://www.zkoss.org/2008/zkspring&#13;http://www.zkoss.org/2008/zkspring/zkspring.xsd"&gt;&#13;                &#13;&lt;http ...&gt;&#13;...&#13;&lt;/http&gt;&#13;... &#13;&#13;&lt;!--&#13;- Secure the ZK event processing per the event name and ZK component path pattern&#13;--&gt;&#13;</programlisting>
<para>&lt;zksp:zk-event login-template-close-delay="5"&gt;</para>
<para>&lt;zksp:intercept-event event="onClick" path="//**/btn_*" access="ROLE_TELLER"/&gt;</para>
<para>&lt;zksp:intercept-event path="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/&gt;</para>
<para>&lt;/zksp:zk-event&gt;</para>
<programlisting>&#13;&lt;/beans:beans&gt;&#13;</programlisting>
<itemizedlist>
<listitem>
<para>xmlns:zksp="http://www.zkoss.org/2008/zkspring tells the Spring Security engine that we will use the ZK Spring namespace configuration and define the name space to zksp.</para>
</listitem>
<listitem>
<para>http://www.zkoss.org/2008/zkspring http://www.zkoss.org/2008/zkspring/zkspring.xsd tells the Spring Security engine where to find such ZK Spring namespace configuration schema.</para>
</listitem>
<listitem>
<para>&lt;zksp:zk-event&gt; tells the Spring Security engine we want to secure ZK event processing. This will configure the necessary listeners , filters, and Spring beans automatically. In this example, login-template-close-delay="5" tells ZK to CLOSE the login window automatically in five(5) seconds if login successfully; zero(0) means close the login window immediately; and a negative value means wait for users operation.</para>
</listitem>
<listitem>
<para>&lt;zksp:intercept-event event="onClick" path="//**/btn_*" access="ROLE_TELLER"/&gt; tells the Spring Security engine which ZK event and components we want to secure. In this example, it says that any onClick event that is fired to the ZK components whose id starts with btn_ will be checked againt the ROLE_TELLER authority.</para>
</listitem>
<listitem>
<para>&lt;zksp:intercept-event path="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/&gt; tells that all anonymous users can access to all events and all components.</para>
</listitem>
</itemizedlist></sect2><sect2><title>The ZUML Page</title>
<para>In the following example, ZK prompts end user to login when he/she attempts to change the balance of account since the <code>onClick</code> event of <code>Button</code> component has been secured by Spring-Security. </para>
<para>&lt;?variable-resolver class="org.zkoss.spring.DelegatingVariableResolver"?&gt;</para>
<programlisting>&lt;zk&gt;&#13;&lt;window title="Accouts" border="normal" width="500px"&gt;&#13;&lt;zscript&gt;&lt;![CDATA[&#13;void adjBalance(Button btn) {&#13;double bal = new Double((String)btn.getAttribute("bal")).doubleValue();&#13;//get the account object&#13;bigbank.Account a = bankService.readAccount(btn.getAttribute("aid"));&#13;//change the account balance&#13;bankService.post(a, bal);&#13;//update the account balance on the browser&#13;btn.getFellow("bal_"+a.getId()).setValue(""+a.getBalance());&#13;}&#13;]]&gt;&#13;&lt;/zscript&gt;&#13;&lt;grid&gt;&#13;&lt;rows&gt;&#13;&lt;row forEach="${accounts}"&gt;&#13;&lt;label value="${each.id}"/&gt;&#13;&lt;label value="${each.holder}"/&gt;&#13;&lt;label id="bal_${each.id}" value="${each.balance}"/&gt;&#13;&lt;button id="btn_m20_${each.id}" label="-$20" onClick="adjBalance(self)"&gt;&#13;&lt;custom-attributes aid="${each.id}" bal="-20"/&gt;&#13;&lt;/button&gt; &#13;&lt;button id="btn_m5_${each.id}" label="-$5" onClick="adjBalance(self)"&gt; &#13;&lt;custom-attributes aid="${each.id}" bal="-5"/&gt;&#13;&lt;/button&gt; &#13;...................&#13;&lt;/row&gt;&#13;&lt;/rows&gt;&#13;&lt;/grid&gt;&#13;&lt;/window&gt;&#13;&lt;button label="Home" href="/index.zul"/&gt;&#13;&lt;button label="Logout" href="/j_spring_security_logout"/&gt;&#13;&lt;/zk&gt;&#13;</programlisting>
<para/>
<para/></sect2></sect1></chapter>
<chapter>
<title>18. Portal Integration</title>
<para>ZK provides a portlet to load ZUML pages for JSR 168 compliant portal. This portlet is called ZK portlet loader, and it is implemented as org.zkoss.zk.ui.http.DHtmlLayoutPortlet.</para><sect1><title>Configuration</title><sect2><title>WEB-INF/portlet.xml</title>
<para>To use it, you first have to add the following definition into WEB-INF/portlet.xml. Notice that expiration-cache must be set to zero to prevent portals from caching the result.</para>
<programlisting>&lt;portlet&gt;&#13;    &lt;description&gt;ZK loader for ZUML pages&lt;/description&gt;    &#13;    &lt;portlet-name&gt;zkPortletLoader&lt;/portlet-name&gt;    &#13;    &lt;display-name&gt;ZK Portlet Loader&lt;/display-name&gt;    &#13;&#13;    &lt;portlet-class&gt;org.zkoss.zk.ui.http.DHtmlLayoutPortlet&lt;/portlet-class&gt;    &#13;&#13;    &lt;expiration-cache&gt;0&lt;/expiration-cache&gt;    &#13;&#13;    &lt;supports&gt;    &#13;        &lt;mime-type&gt;text/html&lt;/mime-type&gt;        &#13;        &lt;portlet-mode&gt;VIEW&lt;/portlet-mode&gt;        &#13;    &lt;/supports&gt;    &#13;&#13;    &lt;supported-locale&gt;en&lt;/supported-locale&gt;    &#13;&#13;    &lt;portlet-info&gt;    &#13;        &lt;title&gt;ZK&lt;/title&gt;        &#13;        &lt;short-title&gt;ZK&lt;/short-title&gt;        &#13;        &lt;keywords&gt;ZK,ZUML&lt;/keywords&gt;        &#13;    &lt;/portlet-info&gt;    &#13;&lt;/portlet&gt;&#13;</programlisting></sect2><sect2><title>WEB-INF/web.xml</title>
<para>ZK portlet loader actually delegates the loading of ZUML pages to ZK loader (org.zkoss.zk.ui.http.DHtmlLayoutServlet). Thus, you have to configure WEB-INF/web.xml as specified in Appendix A in the Developer's Reference, even if you want to use only portlets.</para></sect2></sect1><sect1><title>The Usage</title><sect2><title>The zk_page and zk_richlet Parameter and Attribute</title>
<para>ZK portlet loader is a generic loader. To load a particular ZUML page, you have to specify either a request parameter, a portlet attribute or a portlet preference called zk_page, if you want to load a ZUML page, or zk_richlet, if you want to load a richlet.</para>
<para>More precisely, ZK portlet loader first checks the following locations for the path of the ZUML page or the richlet. The lower the number, the higher the priority.</para>
<orderedlist>
<listitem>
<para>The request parameter (RenderRequest's getParameter) called zk_page. If found, it is the path of the ZUML page.</para>
</listitem>
<listitem>
<para>The request attribute (RenderRequest's getAttribute) called zk_page. If found, it is the path of the ZUML page.</para>
</listitem>
<listitem>
<para>The request preference (RenderRequest's getPortletPreferences's getValue) called zk_page. If found, it is the path of the ZUML page.</para>
</listitem>
<listitem>
<para>The request parameter (RenderRequest's getParameter) called zk_richlet. If found, it is the path of the richlet.</para>
</listitem>
<listitem>
<para>The request attribute (RenderRequest's getAttribute) called zk_richlet. If found, it is the path of the richlet.</para>
</listitem>
<listitem>
<para>The request preference (RenderRequest's getPortletPreferences's getValue) called zk_richlet. If found, it is the path of the richlet.</para>
</listitem>
<listitem>
<para>The initial parameter (PortletConfig's getInitParameter) called zk_page. If found, it is the path of the ZUML page.</para>
</listitem>
</orderedlist></sect2><sect2><title>Examples</title>
<para>How to pass a request parameter or attribute to a portlet depends on the portal. You have to consult the user's guide of your favorite portal for details. The following is an example that uses Potix Portal.</para>
<programlisting>&lt;layout contentType="text/html"&gt;&#13;    &lt;title&gt;ZK Porlet Demo&lt;/title&gt;    &#13;    &lt;header name="Cache-Control" value="no-cache"/&gt;    &#13;    &lt;header name="Pragma" value="no-cache"/&gt;    &#13;&#13;    &lt;vbox&gt;    &#13;        &lt;hbox&gt;        &#13;            &lt;servlet page="sample1.zul"/&gt;            &#13;            &lt;portlet name="zkdemo.zkLoader"&gt;            &#13;                &lt;attribute name="zk_page" value="/test/sample2.zul"/&gt;                &#13;            &lt;/portlet&gt;            &#13;        &lt;/hbox&gt;        &#13;    &lt;/vbox&gt;    &#13;&#13;    &lt;molds uri="~./pxp/html/molds.xml"/&gt;    &#13;&lt;/layout&gt;&#13;</programlisting>
<para>
<graphic fileref="images/1000000000000290000000735EEBE1FC.png">2
			
		</graphic>
</para></sect2></sect1></chapter>
<chapter>
<title>19. Beyond ZK</title>
<para>In addition to processing ZUML pages, the ZK distribution included a lot of technologies and tools. This chapter provided the basic information of some of them. Interested readers might look at Javadoc for detailed API.</para><sect1><title>Logger</title>
<para>Package: org.zkoss.util.logging.Log</para>
<para>The logger used by ZK is based on the standard logger, java.util.Logger. However, we wrap it as org.zkoss.util.logging.Log to make it more efficient. The typical use is as follows.</para>
<programlisting>import org.zkoss.util.logging.Log;&#13;class MyClass {&#13;    private static final Log log = Log.lookup(MyClass.class);    &#13;    public void f(Object v) {    &#13;        if (log.debugable()) log.debug("Value is "+v);        &#13;    }    &#13;}&#13;</programlisting>
<para>Since ZK uses the standard logger to log message, you could control what to log by configuring the logging of the Web server you are using. How to configure the logging of the Web server varies from one server to another. Please consult the manuals. Or, you might use the logging configuration mechanism provided by ZK as described below.</para>
<para>Note: By default, all ZK log instances are mapped to the same Java logger named org.zkoss to have the better performance. If you want to control the log level up to individual class, you have to invoke the following statement to turn on the hierarchy support.</para>
<para>Log.setHierarchy(true);</para>
<para>Note: The hierarchy support is enabled automatically, if you configure the log level with WEB-INF/zk.xml as described in the following section.</para><sect2><title>How to Configure Log Levels with ZK</title>
<para>In addition to configuring the logging of the Web server, you can use the logging configuration mechanism provided by ZK. By default, it is disabled. To enable it, you have to specify the following content in WEB-INF/zk.xml. Refer to Appendix B in the Developer's Reference fore more details.</para>
<programlisting>&lt;zk&gt;&#13;    &lt;log&gt;    &#13;    &lt;log-base&gt;org.zkoss&lt;/log-base&gt;    &#13;    &lt;/log&gt;    &#13;&lt;/zk&gt;&#13;</programlisting>
<para>Alternatively, you can enable the logging configuration mechanism manually by invoking the init method of LogService as follows.</para>
<programlisting>org.zkoss.util.logging.LogService.init("org.zkoss", null);&#13;</programlisting>
<para>If you want to log not just org.zkoss but also everything, you could specify an empty value for log-base.</para>
<para>Once the mechanism is enabled, ZK looks for i3-log.conf by searching the classpath at startup and some particular locations (see below). If found, ZK loads its content to initialize the log levels. Then, ZK keeps watching this file, and reloads its content if the file is modified.</para></sect2><sect2><title>Content of i3-log.conf</title>
<para>An example of i3-log.conf is as follows.</para>
<programlisting>org.zkoss.zk.ui.impl.UiEngineImpl=FINER&#13;        #Make the log level of the specified class to FINERorg.zkoss.zk.ui.http=DEBUG#Make the log level of the specified package to DEBUG        &#13;    org.zkoss.zk.au.http.DHtmlUpdateServlet=INHERIT#Clear the log level of a specified class such that it inherits what    &#13;    #has been defined above (Default: INFO)    &#13;org.zkoss.zk.ui=OFF&#13;    #Turn off the log for the specified package    &#13;org.zkoss=WARNING&#13;    #Make all log levels of ZK classes to WARNING except those specified here    &#13;</programlisting><sect3><title>Allowed Levels</title>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Level</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>OFF</para>
</entry>
<entry>
<para>Indicates no message at all.</para>
</entry>
</row>
<row>
<entry>
<para>ERROR</para>
</entry>
<entry>
<para>Indicates providing error messages.</para>
</entry>
</row>
<row>
<entry>
<para>WARNING</para>
</entry>
<entry>
<para>Indicates providing warning messages. It also implies ERROR.</para>
</entry>
</row>
<row>
<entry>
<para>INFO</para>
</entry>
<entry>
<para>Indicates providing informational messages. It also implies ERROR and WARNING.</para>
</entry>
</row>
<row>
<entry>
<para>DEBUG</para>
</entry>
<entry>
<para>Indicates providing tracing information for debugging purpose. It also implies ERROR, WARNING and INFO.</para>
</entry>
</row>
<row>
<entry>
<para>FINER</para>
</entry>
<entry>
<para>Indicates providing fairly detailed tracing information for debugging purpose. It also implies ERROR, WARNING, INFO and DEBUG</para>
</entry>
</row>
<row>
<entry>
<para>INHERIT</para>
</entry>
<entry>
<para>Indicates to clear any level being set to the specified package or class. In other words, the log level will be the same as its parent node.</para>
</entry>
</row></tbody></tgroup>
</informaltable></sect3></sect2><sect2><title>Location of i3-log.conf</title>
<para>At first, ZK looks for this file in the classpath. If not found, it looks for the conf directory.</para>
<informaltable frame="all">
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Application Server</para>
</entry>
<entry>
<para>Location</para>
</entry>
</row>
</thead><tbody>
<row>
<entry>
<para>Tomcat</para>
</entry>
<entry>
<para>Place i3-log.conf under the $TOMCAT_HOME/conf directory</para>
</entry>
</row>
<row>
<entry>
<para>Others</para>
</entry>
<entry>
<para>Try the conf directory first. If not working, you could set the system property called the org.zkoss.io.conf.dir directory to be the directory where i3-log.conf resides.</para>
</entry>
</row></tbody></tgroup>
</informaltable></sect2><sect2><title>Disable All Logs</title>
<para>Some logs are generated before loading i3-log.conf. If you want to disable all logs completely, you have to either configure the logging of the Web server<footnote>
<para>Remember ZK uses the standard logging utilities. Unless you specify something in i3-log.conf, and the default logging levels depend on the Web server (usually INFO).</para>
</footnote>, or specify log-level when configuring DHtmlLayoutServlet in WEB-INF/web.xml. Refer to the Developer's Reference for details.</para>
<programlisting>&lt;servlet&gt;&#13;    &lt;servlet-name&gt;zkLoader&lt;/servlet-name&gt;    &#13;    &lt;servlet-class&gt;org.zkoss.zk.ui.http.DHtmlLayoutServlet&lt;/servlet-class&gt;    &#13;</programlisting>
<para>&lt;init-param&gt;</para>
<para>&lt;param-name&gt;log-level&lt;/param-name&gt;</para>
<para>&lt;param-value&gt;OFF&lt;/param-value&gt;</para>
<para>&lt;/init-param&gt;</para>
<programlisting>...&#13;</programlisting></sect2></sect1><sect1><title>DSP</title>
<para>Package: org.zkoss.web.servlet.dsp</para>
<para>A JSP-like template technology. It takes the same syntax as that of JSP. Unlike JSP, DSP is interpreted at the run time, so it is easy to deploy DSP pages. No Java compiler is required in your run-time environment. In addition, you could distribute DSP pages in jar files. This is the way ZK is distributed.</para>
<para>However, you cannot embed Java codes in DSP pages. Actions of DSP, though extensible through TLD files, are different from JSP tags.</para>
<para>If you want to use DSP in your Web applications, you have to set up WEB-INF/web.xml to add the following lines.</para>
<programlisting>    &lt;!-- ///////////// --&gt;    &#13;    &lt;!-- DSP (optional) --&gt;    &#13;    &lt;servlet&gt;    &#13;        &lt;description&gt;&lt;![CDATA[        &#13;The servlet loads the DSP pages.&#13;        ]]&gt;&lt;/description&gt;        &#13;        &lt;servlet-name&gt;dspLoader&lt;/servlet-name&gt;        &#13;        &lt;servlet-class&gt;org.zkoss.web.servlet.dsp.InterpreterServlet&lt;/servlet-class&gt;        &#13;&#13;        &lt;!-- Specify class-resource, if you want to access TLD defined in jar files --&gt;        &#13;                                                    &lt;init-param&gt;&lt;param-name&gt;class-resource&lt;/param-name&gt;&lt;param-value&gt;true&lt;/param-value&gt;&lt;/init-param&gt;                                                    &#13;    &lt;/servlet&gt;    &#13;    &lt;servlet-mapping&gt;    &#13;        &lt;servlet-name&gt;dspLoader&lt;/servlet-name&gt;        &#13;        &lt;url-pattern&gt;*.dsp&lt;/url-pattern&gt;        &#13;    &lt;/servlet-mapping&gt;    &#13;</programlisting>
<para>Note: The mapping of the DSP loader is optional. Specify it only if you want to write Web pages in DSP syntax.</para>
<para>Though standard components of ZK use DSP as a template technology, they are handled directly by ZK loader.</para>
<para>Refer to the Developer's Reference for more information.</para></sect1><sect1><title>iDOM</title>
<para>Package: org.zkoss.idom</para>
<para>An implementation of W3C DOM. It is inspired by JDOM<footnote>
<para>http://www.jdom.org</para>
</footnote> to have concrete classes for all XML objects, such as Element and Attribute. However, iDOM implements the W3C API, such as org.w3c.dom.Element. Thus, you could use iDOM seamlessly with XML utilities that only accept the W3C DOM.</para>
<para>A typical example is XSLT and XPath. You could use any of favorite XSL processor and XPath utilities with iDOM.</para></sect1></chapter>
</book>
